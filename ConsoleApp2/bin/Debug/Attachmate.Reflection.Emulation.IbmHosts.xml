<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Attachmate.Reflection.Emulation.IbmHosts</name>
    </assembly>
    <members>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu">
            <summary>
            Provides methods and properties for interacting with a terminal session's context menu
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.DefaultMenuName">
            <summary>
            The name of the default context menu
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.#ctor">
            <summary>
            Initializes a new instance of the ContextMenu class.
            </summary>
            <remarks>Do not use this constructor. It is only present for XML Serialization support.</remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ContextMenu class.
            </summary>
            <param name="name">The name of the menu</param>
            <exception cref="T:System.ArgumentException">Thrown if <b>name</b> contains illegal characters</exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.Count">
            <summary>
            Gets a value indicating how many menu items (including separators) are in this menu.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.MappingCollection">
            <summary>
            Gets a value indicating the set of menu items comprising this context menu.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.Name">
            <summary>
            Gets a value indicating the descriptive name of this menu.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.AddSeparator">
            <summary>
            Adds a new separator to the end of the menu.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.AddMenuItem(Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem)">
            <summary>
            Adds a new context menu item to the end of the menu.
            </summary>
            <param name="item">A new context menu item</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.RemoveItem(System.Int32)">
            <summary>
            Removes a specified context menu item at a given position within the menu
            </summary>
            <param name="index">Identifies the position within the menu at which to remove a menu item.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.ClearAllItems">
            <summary>
            Removes all items from the context menu, resulting in an empty menu.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.GetContextMenuItem(System.String)">
            <summary>
            Returns a context menu item with the specified name.
            </summary>
            <param name="itemName">The name of the menu item, as it is displayed within the menu. 
            This applies only to items of type ContextMenuItemType.MenuItem</param>
            <returns>A ContextMenuItem with the specified name, or null if no such item exists.</returns>
            <remarks>This method cannot be used to return separator menu items, as they cannot be uniquely identified.</remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.GetSchema">
            <summary>
            Returns an in-memory representation of the XML schema used for SerializableList
            </summary>
            <returns>Null -- not currently implemented.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads in a list type from an xml file
            </summary>
            <param name="reader">where to read the xml from</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes out a list to xml format
            </summary>
            <param name="writer">writes the xml to persistant storage</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current ContextMenu</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.Equals(System.Object)">
            <summary>
            Determines whether two ContextMenu instances are equal.
            </summary>
            <param name="obj">The object to compare with the current ContextMenu</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.BothAreDefault(System.String,System.String)">
            <summary>
            Determines whether two menu names are both referring to the default context menu
            </summary>
            <param name="thisName">The left side operand</param>
            <param name="rightSideName">The right side operand</param>
            <returns>True if and only if both parameters refer to a default context menu. False otherwise</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.op_Equality(Attachmate.Reflection.Emulation.IbmHosts.ContextMenu,Attachmate.Reflection.Emulation.IbmHosts.ContextMenu)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="cm1">The first object to compare. </param>
            <param name="cm2">The second object to compare. </param>
            <returns>true if the specified objects are equal to each other; otherwise, false.  If both objA and objB are null, the method returns true.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenu.op_Inequality(Attachmate.Reflection.Emulation.IbmHosts.ContextMenu,Attachmate.Reflection.Emulation.IbmHosts.ContextMenu)">
            <summary>
            Determines whether the specified object is not equal to the current object.
            </summary>
            <param name="cm1">The first object to compare. </param>
            <param name="cm2">The second object to compare. </param>
            <returns>true if the specified objects are not equal to each other; otherwise, false.</returns>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem">
            <summary>
            Represents an individual item within a context menu.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.Separator">
            <summary>
            Identifier for separator menu items
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.IllegalCharacterError">
            <summary>
            Error message for including illegal XML characters in a menu name or menu item name
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.name">
            <summary>
            Returns the menu item name 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.menuItemType">
            <summary>
            Gets a value indicating the type of menu item this item refers to.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.mapping">
            <summary>
            Gets a value indicating what this item is mapped to. 
            </summary>
            <remarks>
            If this item is not a ContextMenuItemType.MenuItem, this value will be irrelevant
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.#ctor">
            <summary>
            Initializes a new instance of the ContextMenuItem class.
            </summary>
            <remarks>Do not use this constructor -- only for XML Serialization support</remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.#ctor(System.String,Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItemType,Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence)">
            <summary>
            Initializes a new instance of the ContextMenuItem class.
            </summary>
            <param name="name">The name of the item. This is the text that will appear within the context menu for the item. For separator
            menu items, this value is ignored.</param>
            <param name="type">What type of menu item this is</param>
            <param name="mapping">The action mapping for this item, if a menu item, otherwise ignored.</param>
            <exception cref="T:System.ArgumentException">Thrown if <b>name</b>contains any illegal characters.</exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.Name">
            <summary>
            Gets a value indicating the name of the menu item. For separator items, the value ContextMenuItem.Separator is returned.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.MenuItemType">
            <summary>
            Gets a value indicating the type of menu item this item refers to.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.Mapping">
            <summary>
            Gets a value indicating what this item is mapped to. 
            </summary>
            <remarks>
            If this item is not a ContextMenuItemType.MenuItem, this value will be irrelevant
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.GetSchema">
            <summary>
            Returns an in-memory representation of the XML schema used for SerializableList
            </summary>
            <returns>Null -- not currently implemented.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads in a list type from an xml file
            </summary>
            <param name="reader">where to read the xml from</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes out a list to xml format
            </summary>
            <param name="writer">writes the xml to persistant storage</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current ContextMenuItem</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.Equals(System.Object)">
            <summary>
            Determines whether two ContextMenuItem instances are equal.
            </summary>
            <param name="obj">The object to compare with the current ContextMenuItem</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.ConvertToXml(Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem)">
            <summary>
            Returns an xml version of a specified ContextMenuItem
            </summary>
            <param name="toConvert">The item to convert</param>
            <returns>A string representation of the equivalent XML</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.op_Equality(Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem,Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="cm1">The first object to compare. </param>
            <param name="cm2">The second object to compare. </param>
            <returns>true if the specified objects are equal to each other; otherwise, false.  If both objA and objB are null, the method returns true.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.op_Inequality(Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem,Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem)">
            <summary>
            Determines whether the specified object is not equal to the current object.
            </summary>
            <param name="cm1">The first object to compare. </param>
            <param name="cm2">The second object to compare. </param>
            <returns>true if the specified objects are not equal to each other; otherwise, false.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem.ContainsIllegalXmlCharacters(System.String)">
            <summary>
            Helper method to detect illegal XML characters
            </summary>
            <param name="input">The input string to test</param>
            <returns>True if <b>input</b> contains illegal XML characters, false if not</returns>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItemType">
            <summary>
            Specifies a type of context menu item
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItemType.Separator">
            <summary>
            A separator line in between groups of menu items
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItemType.MenuItem">
            <summary>
            A menu item that, when invoked, performs some action that is mapped to it.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ContextMenus">
            <summary>
            Defines properties and operations on the collection of context menus currently defined in the session document
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenus.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IContextMenus,Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal)">
            <summary>
            Initializes a new instance of the ContextMenus object
            </summary>
            <param name="contextMenus">The remote ContextMenus instance</param>
            <param name="terminal">The parent of this object</param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ContextMenus.Parent">
            <summary>
            Gets a value indicating the parent object of this object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ContextMenus.Count">
            <summary>
            Gets a value indicating how many ContextMenus are defined for this session document
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ContextMenus.DefaultContextMenu">
            <summary>
            Gets or sets the default context menu for this session document
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenus.Add(Attachmate.Reflection.Emulation.IbmHosts.IContextMenu)">
            <summary>
            Adds (or updates an existing) context menu to this session document 
            </summary>
            <param name="menu">The context menu to add</param>
            <returns>True if the add or update was successful, false if an error occurred</returns>
            <exception cref="T:System.ArgumentNullException">If the name passed is null or empty</exception>
            <exception cref="T:System.InvalidOperationException">If the ContextMenus object is not available or in an error state</exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenus.Remove(System.String)">
            <summary>
            Removes a context menu from this session document
            </summary>
            <param name="name">The descriptive name of the menu to remove</param>
            <returns>True if the remove was successful, false if the menu name could not be found or an error occurred</returns>
            <exception cref="T:System.ArgumentNullException">If the name passed is null</exception>
            <exception cref="T:System.ArgumentException">If the name passed corresponds to the default menu, which cannot be deleted.
            This can be represented by an empty string, or the <b>ContextMenu.DefaultMenuName</b> constant</exception>
            <exception cref="T:System.InvalidOperationException">If the ContextMenus object is not available or in an error state</exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenus.Contains(System.String)">
            <summary>
            Returns a value indicating whether a context menu of a given name exists in this session document.
            </summary>
            <param name="name">The descriptive name of the menu. If null or empty string is passed, this is equivalent to the default menu.</param>
            <returns>True if the menu exists, false if it does not</returns>
            <exception cref="T:System.InvalidOperationException">If the ContextMenus object is not available or in an error state</exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenus.ItemByName(System.String)">
            <summary>
            Returns the context menu associated with the specified descriptive name.
            </summary>
            <param name="name">The descriptive name of the menu. If null or empty string is passed, this is equivalent to the default menu.</param>
            <returns>The context menu associated with <b>name</b>, or null if it does not exist</returns>
            <exception cref="T:System.InvalidOperationException">If the ContextMenus object is not available or in an error state</exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenus.ItemByIndex(System.Int32)">
            <summary>
            Returns the context menu at the specified index in the session document's context menu collection
            </summary>
            <param name="index">The position within the collection to return a menu for.</param>
            <returns>The context menu at the specified position</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index argument is invalid.</exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenus.Clear">
            <summary>
            Removes all non-default context menus from the session document
            </summary>
            <remarks>NOTE: the default menu is never removed.</remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ContextMenus.Items">
            <summary>
            Returns the collection of context menus currently defined for the session document
            </summary>
            <returns>An array of <b>ContextMenu</b> items currently defined in the session document</returns>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.CopyDataDelimiterOption">
            <summary>
            Specifies options for the IbmScreen.CopyDataSeparation property
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CopyDataDelimiterOption.SeparateAtField">
            <summary>
            Separate by delimiters at field boundaries
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CopyDataDelimiterOption.SeparateAtWord">
            <summary>
            Separate by delimiters at word boundaries
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.Hotspot">
            <summary>
            Defines an individual hotspot instance
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.#ctor">
            <summary>
            Initializes a new instance of the Hotspot class.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.#ctor(System.String,Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence)">
            <summary>Initializes a new instance of the Hotspot class.</summary>
            <param name="text">The action type.</param>
            <param name="actionSequence">Optional parameters associated with the action. If there are no parameters needed
            for the action, null may be specified for this parameter.</param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.Text">
            <summary>
            Gets or sets a value indicating the hotspot text. The text can be up to 80 characters.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.Tooltip">
            <summary>
            Gets or sets the text to display when the mouse cursor is over the hotspot.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.Row">
            <summary>Gets or sets whether the hotspot will appear only if the text is in the specified row.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.Column">
            <summary>Gets or sets whether the hotspot will appear only if the text is in the specified column.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.OtherDelimiters">
            <summary>
            Gets or sets the list of characters to use as hotspot delimiters when UseOtherDelimiters is true.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.MatchCase">
            <summary>
            Gets or sets a value indicating whether to make the hotspot case sensitive.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.PrecededByDelimiter">
            <summary>Gets or sets a value indicating whether the hotspot must be preceded by a delimiter, usually a space.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.FollowedByDelimiter">
            <summary>
            Gets or sets a value indicating whether the hotspot must be followed by a delimiter, usually a space.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.MatchUntilDelimiter">
            <summary>Gets or sets a value indicating whether to define the end of the hotspot as a delimiter, usually a space.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.AutoInvoke">
            <summary>
            Gets or sets a value indicating whether to cause the hotspot to be invoked as soon as it appears on the screen.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.SpaceDelimiter">
            <summary>Gets or sets a value indicating whether to use the white space created by pressing the SPACEBAR as a hotspot delimiter.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.UseOtherDelimiters">
            <summary>Gets or sets a value indicating whether to use other characters as hotspot delimiters.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.ActionSequence">
            <summary>
            Gets or sets the action sequence to invoke when this hotspot is invoked.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.GetSchema">
            <summary>Returns an in-memory representation of the XML schema used for Hotspot.</summary>
            <returns>Null -- not currently implemented</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.ReadXml(System.Xml.XmlReader)">
            <summary>Reads in a list type from an xml file.</summary>
            <param name="reader">where to read the xml from</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.WriteXml(System.Xml.XmlWriter)">
            <summary>Writes out a list to xml format.</summary>
            <param name="writer">writes the xml to persistant storage</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.op_Equality(Attachmate.Reflection.Emulation.IbmHosts.Hotspot,Attachmate.Reflection.Emulation.IbmHosts.Hotspot)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="hs1">The first object to compare</param>
            <param name="hs2">The second object to compare</param>
            <returns>true if the specified objects are equal to each other; otherwise, false.  If both objA and objB are null, the method returns true.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.op_Inequality(Attachmate.Reflection.Emulation.IbmHosts.Hotspot,Attachmate.Reflection.Emulation.IbmHosts.Hotspot)">
            <summary>
            Determines whether the specified object is not equal to the current object.
            </summary>
            <param name="hs1">The first object to compare</param>
            <param name="hs2">The second object to compare</param>
            <returns>true if the specified objects are not equal to each other; otherwise, false.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns>true if the specified object is equal to the current object; otherwise, false</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.GetHashCode">
            <summary>
            Serves as the default hash function. 
            </summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Hotspot.ToString">
            <summary>
            Returns a string representation of this Hotspot.
            </summary>
            <returns>A string representation of this Hotspot</returns>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.HotspotOptionFlags">
            <summary>
            Hotspot options
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotOptionFlags.None">
            <summary>No options specified.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotOptionFlags.MatchCase">
            <summary>Hotspot is case sensitive.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotOptionFlags.PrecededByDelimiter">
            <summary>Hotspot must be preceded by a space.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotOptionFlags.FollowedByDelimiter">
            <summary>Hotspot must be followed by a space.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotOptionFlags.MatchUntilDelimiter">
            <summary>Defines a space as the end of the hotspot.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotOptionFlags.AutoInvoke">
            <summary>Cause the hotspot to be invoked as soon as it appears on the screen.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotOptionFlags.SpaceDelimiter">
            <summary>Use the white space created by pressing the spacebar as a hotspot delimiter.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotOptionFlags.UseOtherDelimiters">
            <summary>Use characters other than space as hotspot delimiters.</summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.HotspotsMouseButtonOption">
            <summary>
            Specifies options for mouse button to use when invoking hotspots
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotsMouseButtonOption.Left">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotsMouseButtonOption.Right">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotsMouseButtonOption.Middle">
            <summary>
            Middle mouse button
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.HotspotStyleOption">
            <summary>
            Specifies options for how hotspots appear on the screen
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotStyleOption.Button">
            <summary>
            Hotspot appears as a push button.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotStyleOption.Outline">
            <summary>
            Hotspot appears as an outlined rectangle
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HotspotStyleOption.Invisible">
            <summary>
            Hotspots are active but not visible
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IDMAttributeOption">
            <summary>
            Defines criteria used to obtain a device name from the ID Management server. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IDMAttributeOption.None">
            <summary>
            No criteria (default)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IDMAttributeOption.PoolName">
            <summary>
            Use pool name
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IDMAttributeOption.ApplName">
            <summary>
            Use application name
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IDMAttributeOption.ClientIP">
            <summary>
            Use client IP address
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IDMAttributeOption.HostAddress">
            <summary>
            Use host address
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IDMAttributeOption.HostPort">
            <summary>
            Use host port
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IDMAttributeOption.IDAssociate">
            <summary>
            Unsupported
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IDMAttributeOption.SessionName">
            <summary>
            Use session name
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IDMAttributeOption.SessionType">
            <summary>
            Use session type
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IDMAttributeOption.UserName">
            <summary>
            Use user name
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IDMAttributeOption.ClientDNS">
            <summary>
            Use client DNS
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.TLSSSLVersionOption">
            <summary>
            Specifies options for TLS and SSL versions
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TLSSSLVersionOption.TLS_V1">
            <summary>
            TLS version 1.0
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TLSSSLVersionOption.SSL_V3">
            <summary>
            SSL 3.0
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TLSSSLVersionOption.TLS_V1_2">
            <summary>
            TLS version 1.2
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.UiControlActionMapper">
            <summary>
                Methods and properties associated with accessing and setting the input map action sequence for a given user interface control.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.UiControlActionMapper.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal,Attachmate.Reflection.Emulation.IbmHosts.IUiControlActionMapper)">
            <summary>
                The constructor, for internal use.
            </summary>
            <param name="terminal">The IIbmTerminal interface is an interface to access an IBM 3270 or 5250 host emulation session object.</param>
            <param name="uiControlActionMapper">Object associated with the session document's keyboard map.</param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.UiControlActionMapper.Parent">
            <summary>
                Gets the parent object. The parent is the IIbmTerminal object.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.UiControlActionMapper.Add(Attachmate.Reflection.UserInterface.IUiControl,Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence)">
            <summary>Adds the input map action sequence to the given user interface control.</summary>
            <param name="uiControl">Object containing properties and operations on the control.</param>
            <param name="inputMapActionSequence">Object containing a set of actions that are mapped to an input mapping.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.UiControlActionMapper.Get(Attachmate.Reflection.UserInterface.IUiControl)">
            <summary>
                Returns the input map action sequence from a given user interface control.
            </summary>
            <param name="uiControl">Object containing properties and operations on the control.</param>
            <returns>Object containing a set of actions that are mapped to an input mapping.</returns>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IUiControlActionMapper">
            <summary>
                Methods and properties associated with accessing and setting the input map action sequence for a given user interface control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IUiControlActionMapper.Parent">
            <summary>
                Gets the parent object. The parent is the IIbmTerminal object.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IUiControlActionMapper.Add(Attachmate.Reflection.UserInterface.IUiControl,Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence)">
            <summary>
                Adds the input map action sequence to the given user interface control.
            </summary>
            <param name="uiControl">Object containing properties and operations on the control.</param>
            <param name="inputMapActionSequence">Object containing a set of actions that are mapped to an input mapping.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IUiControlActionMapper.Get(Attachmate.Reflection.UserInterface.IUiControl)">
            <summary>
                Returns the input map action sequence from a given user interface control.
            </summary>
            <param name="uiControl">Object containing properties and operations on the control.</param>
            <returns>Object containing a set of actions that are mapped to an input mapping.</returns>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventHandler">
            <summary>
            CreditCardRecognized event handler.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">CreditCardRecognizedEventArgs event arguments.</param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs">
            <summary>
            CreditCardRecognized event arguments.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.userId">
            <summary>
            The Windows user name of the current user.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.userDomainName">
            <summary>
            The domain that the user is logged onto, or an empty string if not logged onto a Windows domain.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.machineName">
            <summary>
            The machine name (as set up in the system control panel).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.eventType">
            <summary>
            The type of access that the credit card number was encountered in (eg., LiveScreen, OfficeTools, ScreenHistory, etc).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.dateTime">
            <summary>
            The date and time that the event occurred.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.success">
            <summary>
            Reserved for future use. This currently always returns a success return code.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.redactedAccountNumber">
            <summary>
            The card number (in redacted format) that was recognized.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the CreditCardRecognizedEventArgs class.
            </summary>
            <param name="accountNumber">The card number (in redacted format) that was recognized.</param>
            <param name="user">The Windows user name of the current user.</param>
            <param name="machineName">The machine name (as set up in the system control panel).</param>
            <param name="userDomainName">The domain that the user is logged onto, or an empty string if not logged onto a Windows domain.</param>
            <param name="dateTime">The date and time that the event occurred.</param>
            <param name="eventType">The type of access that the credit card number was encountered in (eg. LiveScreen, OfficeTools, ScreenHistory, etc).</param>
            <param name="success">Reserved for future use. This currently always returns a success return code.</param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.UserId">
            <summary>
            Gets the Windows user name of the current user.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.MachineName">
            <summary>
            Gets the machine name (as set up in the system control panel).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.UserDomainName">
            <summary>
            Gets the domain that the user is logged onto, or an empty string if not logged onto a Windows domain.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.EventType">
            <summary>
            Gets a description of the type of access that the credit card number was encountered in (eg. LiveScreen, OfficeTools, ScreenHistory, etc).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.DateTime">
            <summary>
            Gets the date and time that the event occurred.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.Success">
            <summary>
            Gets a success return code. (This is Reserved for future use. It currently always returns a success return code.)
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.CreditCardRecognizedEventArgs.RedactedAccountNumber">
            <summary>
            Gets the card number (in redacted format) that was recognized.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AfterSendKeysEventHandler">
            <summary>
            Handles the AfterSendKeys event to permit users to obtain the string sent to the host and
            the row and column on the screen where the keys were sent.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">AfterSendKeys event argument.</param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AfterSendKeysEventArgs">
            <summary>
            AfterSendKeys event argument class.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.AfterSendKeysEventArgs.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the AfterSendKeysEventArgs class.
            </summary>
            <param name="key">Keys that have been sent.</param>
            <param name="row">Cursor row position.</param>
            <param name="column">Cursor column position.</param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.AfterSendKeysEventArgs.Key">
            <summary>
            Gets the keys that have been sent.
            </summary>
            <example>
            <code>
            AfterSendKeysEventArgs args ;
            string strKey = args.Key;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.AfterSendKeysEventArgs.Row">
            <summary>
            Gets the cursor row position where the keys were sent.
            </summary>
            <example>
            <code>
            AfterSendKeysEventArgs args ;
            int row = ags.Row;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.AfterSendKeysEventArgs.Column">
            <summary>
            Gets the cursor column position where the keys were sent.
            </summary>
            <example>
            <code>
            AfterSendKeysEventArgs args ;
            int column = args.Column;
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400ColumnSeperatorOption">
            <summary>
            Specifies valid character values to use as the column separator in 5250 terminal sessions.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400ColumnSeperatorOption.Dots">
            <summary>
            Dots or periods (.) are used to render separate columns.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400ColumnSeperatorOption.VerticalLines">
            <summary>
            Vertical lines (|) are used to render separate columns.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400StatusLineOption">
            <summary>
            Defines valid values that control rendering of the status line in 5250 terminal sessions. 
            </summary>
            <remarks>
            These values specify which of three different host status lines appears at the bottom of the terminal window 
            when you are connected to an AS/400.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400StatusLineOption.StatusLineNone">
            <summary>
            Does not display the status line.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400StatusLineOption.StatusLine5250">
            <summary>
            Displays a character-based representation of the status line.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400StatusLineOption.StatusLine3488">
            <summary>
            Displays a symbol-based representation of the status line.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400StatusLineOption.StatusLineDebug">
            <summary>
            Displays the debug status line.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400WordWrapOption">
            <summary>
            Defines valid values for the 5250 word wrap feature.
            </summary>
            <remarks>
             These enumeration values specify whether 
            to wrap text to the next available field or to truncate text at the end of the field, 
            and whether the host controls this behavior.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400WordWrapOption.Off">
            <summary>
            Text is not wrapped to the next available line, but is truncated at the end of the current line. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400WordWrapOption.Local">
            <summary>
            Text is wrapped to the next available line as controlled by Reflection.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400WordWrapOption.Host">
            <summary>
            Text is wrapped to the next available line as controlled by the host.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.BeforeSendControlKeyEventHandler">
            <summary>
            Handles the BeforeSendControlKey event to permit users to modify a control key value 
            or cancel a send control key action before it is sent.
            <para>To cancel the action, set the Cancel property of the BeforeSendControlKeyEventArgs
             object passed to the event handler to true.</para>
            </summary>
            <param name="sender">event sender.</param>
            <param name="args">BeforeSendControlKey event argument.</param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.BeforeSendControlKeyEventArgs">
             <summary>
             Contains the Key and Cancel properties that allow the event handler to cancel the action
             or modify the key value before the control key is sent to the host. 
             </summary>
            [Serializable]
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.BeforeSendControlKeyEventArgs.#ctor(Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode,System.Boolean)">
            <summary>
            Constructs a BeforeSendControlKeyArgs object.
            </summary>
            <param name="key">Control Key.</param>
            <param name="cancel">To cancel the Control Key or not.</param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.BeforeSendControlKeyEventArgs.Key">
            <summary>
            The <c>Key</c> property permits the user to inspect or modify the Control key value.
            </summary>
            <example>
            <code>
            BeforeSendControlKeyEventArgs args;
            args.Key = ControlKeyCode.Delete;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.BeforeSendControlKeyEventArgs.Cancel">
            <summary>
            The <c>Cancel</c> property indicates whether the user wants to cancel the SendControlKey.
            </summary>
            <example>
            <code>
            BeforeSendControlKeyEventArgs args;
            args.Cancel = true;
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.BeforeSendKeysEventHandler">
            <summary>
            Handles the BeforeSendKeys event that permits users to modify a key value 
            and cancel a send key action before it is sent.
            </summary>
            <remarks>
            To cancel the action, set the Cancel property of the BeforeSendKeysEventArgs
            object that's passed to the event handler to true. 
            </remarks>
            <param name="sender">The event sender.</param>
            <param name="args">BeforeSendKeys event argument.</param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.BeforeSendKeysEventArgs">
             <summary>
             Contains the Cancel and Key properties that allow the event handler 
             to cancel the action or modify the key value before the key is sent to the host.  
             </summary>
            [Serializable]
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.BeforeSendKeysEventArgs.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a BeforeSendKeysEventArgs object.
            </summary>
            <param name="keys">The key.</param>
            <param name="row">The key row position.</param>
            <param name="column">The key column position.</param>
            <param name="cancel">Cancel to send the key.</param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.BeforeSendKeysEventArgs.Keys">
            <summary>
            <c>Gets</c> or <c>sets</c> the Keys property that permits the user to inspect or modify the keys value.
            </summary>
            <example>
            <code>
            BeforeSendKeysEventArgs args;
            args.Key = "Delete";
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.BeforeSendKeysEventArgs.Cancel">
            <summary>
            <c>Gets</c> or <c>sets</c> the Cancel property that indicates whether the user wants to cancel the key action.
            </summary>
            <remarks>
            To cancel the Keys, set the Cancel property to true.
            </remarks>
            <example>
            <code>
            BeforeSendKeysEventArgs args;
            args.Cancel = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.BeforeSendKeysEventArgs.Row">
            <summary>
            <c>Gets</c> the current row position of the cursor.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.BeforeSendKeysEventArgs.Column">
            <summary>
            <c>Gets</c> the current column position of the cursor.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor">
            <summary>
            Provides implementation of properties and methods to get and set terminal colors within a Reflection theme.
            </summary>
            <seealso cref="T:Attachmate.Reflection.Emulation.IbmHosts.IThemeColor"/>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IThemeColor,Attachmate.Reflection.Emulation.IbmHosts.ITheme)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor"/> class. 
            </summary>
            <param name="themeColor">
            Terminal color.
            </param>
            <param name="theme">
            Terminal theme.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor.Parent">
            <summary>
            <c>Gets</c> the parent object (<c>ITheme</c>).
            </summary>
            <example>
            <code>
            Attachmate.Reflection.Object.Emulation.IbmHosts._Theme theme;
            public ITheme GetParent()
            {
               return theme.Parent;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor.IsBackgroundSingleColor">
            <summary>
            Indicates whether the screen background color is a single color or mapped per field attributes 
            defined in the <c>IbmTerminalAttributeOption</c> enumerator.
            </summary>
            <example>
            <code>
            Attachmate.Reflection.Object.Emulation.IbmHosts.ThemeColor color;
            
            bool IsBackColor = color.IsBackgroundSingleColor;
            return IsBackColor;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor.BackgroundColor">
            <summary>
            Gets the text screen background color when IsBackgroundSingleColor is true. 
            </summary>
            <remarks>
            The get throws an exception when IsBackgroundSingleColor is false.
            Setting the text screen background color also sets the IsBackgroundSingleColor property to true.
            </remarks>
            <example>
            <code>
            Attachmate.Reflection.Object.Emulation.IbmHosts.ThemeColor color;
            public Color GetBackgoundColor()
            {
               if(color.IsBackgroundSingleColor == true)
                  return color.BackgroundColor;
               else
                  return null;
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor.GetForegroundColor(Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption)">
            <summary>
            Returns the current mapped foreground color for a given terminal attribute. 
            </summary>
            <param name="attr">The host color or attribute whose mapped color is returned.</param>
            <returns>The current foreground color mapping for the specified attribute.</returns>
            <exception cref="M:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor.NewInvalidColorMapperOperationException">Throws an exception when the ThemeColor object is null.</exception>
            <example>
            <code>
            Attachmate.Reflection.Emulation.IbmHosts.ThemeColor color;
            Color foregroundColor = color.GetForegroundColor(IbmTerminalAttributeOption.GraphicsBlack);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor.GetBackgroundColor(Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption)">
            <summary>
            Returns the current mapped background color for a given terminal attribute.
            </summary>
            <param name="attr">The host color or attribute whose mapped color is returned.</param>
            <returns>The current background color mapping for the specified attribute.</returns>
            <exception cref="M:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor.NewInvalidColorMapperOperationException">Throws an exception when the ThemeColor object is false.</exception>
            <example>
            <code>
            Attachmate.Reflection.Emulation.IbmHosts.ThemeColor color;
            Color backgroundColor = color.GetBackgroundColor(IbmTerminalAttributeOption.GraphicsBlack);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor.SetForegroundColor(Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption,System.Drawing.Color)">
            <summary>
            <c>Sets</c> the current mapped foreground color for a given terminal attribute.
            </summary>
            <param name="attr">The host color or attribute whose mapped color is set.</param>
            <param name="newColor">The new foreground color mapping for the specified attribute.</param> 
            <exception cref="M:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor.NewInvalidColorMapperOperationException">Throws an exception when the ThemeColor is false.</exception>
            <example>
            <code>
            Attachmate.Reflection.Emulation.IbmHosts.ThemeColor color;
            color.SetForegroundColor(IbmTerminalAttributeOption.GraphicsBlack,Color.blue);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor.SetBackgroundColor(Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption,System.Drawing.Color)">
            <summary>
            <c>Sets</c> the current mapped background color for a given terminal attribute.
            </summary>
            <param name="attr">The host color or attribute whose mapped color is set.</param>
            <param name="newColor">The new background color mapping for the specified attribute.</param>
            <exception cref="M:Attachmate.Reflection.Emulation.IbmHosts.ThemeColor.NewInvalidColorMapperOperationException">Throws an exception when the ThemeColor object is false.</exception>
            <example>
            <code>
            Attachmate.Reflection.Emulation.IbmHosts.ThemeColor color;
            color.SetBackgroundColor(IbmTerminalAttributeOption.GraphicsBlack,Color.blue);
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ColorModeOption">
            <summary>
            Specifies values for the color mode operation of 3270 terminal sessions.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ColorModeOption.TwoColor">
            <summary>
            Sets terminal to operate in two-color mode.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ColorModeOption.FourColor">
            <summary>
            Sets terminal to operate in four-color mode.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ColorModeOption.TwoOrFourColor">
            <summary>
            Sets terminal to operate in two-color or four-color mode.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode">
            <summary>
            Defines the valid values for control keys.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.InvalidKey">
            <summary>
            An invalid key value.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Transmit">
            <summary>
            Send data to the host (Enter). 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Erase_Eof">
            <summary>
            Erase to end of field. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Tab">
            <summary>
            Tab Forward key. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.BackTab">
            <summary>
            Tab Backward key. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Down">
            <summary>
            Down Arrow key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Up">
            <summary>
            Up Arrow key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Right">
            <summary>
            Right Arrow key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Left">
            <summary>
            Left Arrow key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Insert">
            <summary>
            Insert key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F1">
            <summary>
            F1/PF1 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F2">
            <summary>
            F2/PF2 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F3">
            <summary>
            F3/PF3 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F4">
            <summary>
            F4/PF4 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F5">
            <summary>
            F5/PF5 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F6">
            <summary>
            F6/PF6 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F7">
            <summary>
            F7/PF7 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F8">
            <summary>
            F8/PF8 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F9">
            <summary>
            F9/PF9 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F10">
            <summary>
            F10/PF10 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F11">
            <summary>
            F11/PF11 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F12">
            <summary>
            F12/PF12 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F13">
            <summary>
            F13/PF13 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F14">
            <summary>
            F14/PF14 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F15">
            <summary>
            F15/PF15 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F16">
            <summary>
            F16/PF16 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F17">
            <summary>
            F17/PF17 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F18">
            <summary>
            F18/PF18 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F19">
            <summary>
            F19/PF19 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F20">
            <summary>
            F20/PF20 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F21">
            <summary>
            F21/PF21 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F22">
            <summary>
            F22/PF22 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F23">
            <summary>
            F23/PF23 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.F24">
            <summary>
            F24/PF24 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.PA1">
            <summary>
            PA1 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.PA2">
            <summary>
            PA2 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.PA3">
            <summary>
            PA3 function key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.FieldExit">
            <summary>
            Field Exit key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Clear">
            <summary>
            Clear key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.BackSpace">
            <summary>
            Backspace key (nondestructive).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.DestructiveBackSpace">
            <summary>
            Destructive Backspace key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Delete">
            <summary>
            Delete key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.DeleteChar">
            <summary>
            Delete Character key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.DeleteWord">
            <summary>
            Delete Word key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.NextWord">
            <summary>
            Next Word key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.EraseInput">
            <summary>
            Erase Input key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.RuleLine">
            <summary>
            Ruler Cursor Line key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.CursorSelect">
            <summary>
            Cursor Select key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.FieldMark">
            <summary>
            Field Mark key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.ReverseField">
            <summary>
            Reverse Field key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.EndOfField">
            <summary>
            End of Field key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Reset">
            <summary>
            Reset key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.NewLine">
            <summary>
            New Line key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Home">
            <summary>
            Home key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Attention">
            <summary>
            Attention key to activate attention program (AS/400 only).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.SystemRequest">
            <summary>
            Send system request.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Print">
            <summary>
            Print the host screen.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.AltCursor">
            <summary>
            Alternate Cursor key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Dup">
            <summary>
            Dup key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.ClearPartition">
            <summary>
            Clear Partition key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.PartitionJump">
            <summary>
            Partition Jump key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.PanRight">
            <summary>
            Pan Right key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.CursorBlink">
            <summary>
            Cursor Blink key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.FieldDelimiter">
            <summary>
            Field Delimiter key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.LeftDouble">
            <summary>
            Left Double key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.RightDouble">
            <summary>
            Right Double key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.ScrollDown">
            <summary>
            Scroll Down key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.ScrollUp">
            <summary>
            Scroll Up key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.PanLeft">
            <summary>
            Pan Left key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.DownDouble">
            <summary>
            Down Double key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.ExtGr">
            <summary>
            Ext Gr key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.FieldMinus">
            <summary>
            Field Minus key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.FieldPlus">
            <summary>
            Field Plus key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Help">
            <summary>
            Display the host help screen. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Hex">
            <summary>
            Hex key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.PageDown">
            <summary>
            Page Down key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.PageUp">
            <summary>
            Page Up key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.PlusCr">
            <summary>
            Plus CR key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.RollDown">
            <summary>
            Roll Down key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.RollUp">
            <summary>
            Roll Up key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistBeginBold">
            <summary>
            Text Assist Begin Bold key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistBeginOfLine">
            <summary>
            Text Assist Begin of Line key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistBeginUnderline">
            <summary>
            Text Assist Begin Underline key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistBottomOfPage">
            <summary>
            Text Assist Bottom of Page key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistCarrierReturn">
            <summary>
            Text Assist Carrier Return key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistCenter">
            <summary>
            Text Assist Center key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistEndBold">
            <summary>
            Text Assist End Bold key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistEndOfLine">
            <summary>
            Text Assist End of Line key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistHalfIndexDown">
            <summary>
            Text Assist Half Index Down key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistHalfIndexUp">
            <summary>
            Text Assist Half Index Up key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistInsertSymbols">
            <summary>
            Text Assist Insert Symbols key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistNextStop">
            <summary>
            Text Assist Next Stop key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistNextTextColumn">
            <summary>
            Text Assist Exit Text Column key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistPageEnd">
            <summary>
            Text Assist Page End key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistRequiredSpace">
            <summary>
            Text Assist Required Space key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistRequiredTab">
            <summary>
            Text Assist Required Tab key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistStop">
            <summary>
            Text Assist Stop key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistTextTabAdvance">
            <summary>
            Text Assist Text Tab Advance key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistTopOfPage">
            <summary>
            Text Assist Top of Page key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.TextAssistWordUnderline">
            <summary>
            Text Assist Word Underline key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Test">
            <summary>
            Activate test program (AS/400 legacy only).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.UpDouble">
            <summary>
            Up Double key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.Duplicate">
            <summary>
            Duplicate key.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode.PreviousWord">
            <summary>
            Previous Word key.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.CursorBlinkRateOption">
            <summary>
            Defines values that specify the speed at which the cursor blinks in the terminal window.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CursorBlinkRateOption.NoBlink">
            <summary>
            No blinking.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CursorBlinkRateOption.Slow">
            <summary>
            Slow blinking.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CursorBlinkRateOption.Medium">
            <summary>
            Medium blinking.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CursorBlinkRateOption.Fast">
            <summary>
            Fast blinking.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CursorBlinkRateOption.System">
            <summary>
            System default blinking.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.CursorInNewFieldEventHandler">
            <summary>
            CursorInNewField event handler delegate.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">CursorInNewField event argument.</param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.CursorInNewFieldEventArgs">
            <summary>
            CursorInNewField event argument.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.CursorInNewFieldEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a CursorInNewFieldEventArgs object.
            </summary>
            <param name="row">Cursor row location.</param>
            <param name="column">Cursor column location.</param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.CursorInNewFieldEventArgs.Row">
            <summary>
            Gets the cursor row location.
            </summary>
            <example>
            <code>
            CursorInNewFieldEventArgs cursor;
            int row = cursor.Row;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.CursorInNewFieldEventArgs.Column">
            <summary>
            Gets the cursor column location.
            </summary>
            <example>
            <code>
            CursorInNewFieldEventArgs cursor;
            int cloumn = cursor.Column;
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.CursorMovementStyleOption">
            <summary>
            Determines how the cursor moves between composed Thai characters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CursorMovementStyleOption.IncludeAllCharacters">
            <summary>
            The cursor treats combiner characters (in addition to the base character) as single characters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CursorMovementStyleOption.SkipCompositionElements">
            <summary>
            The cursor moves over a composed Thai character as if it were a single character.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.CursorShapeOption">
            <summary>
            Defines values that determine the cursor's appearance in the terminal window.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CursorShapeOption.NoCursor">
            <summary>
            The cursor doesn't appear.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CursorShapeOption.Underline">
            <summary>
            The cursor appears as an underscore (_).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CursorShapeOption.LowHalfBlock">
            <summary>
            The cursor appears as a rectangle that covers the bottom half of the character space.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CursorShapeOption.HighHalfBlock">
            <summary>
            The cursor appears as a rectangle that covers the top half of the character space.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CursorShapeOption.FullBlock">
            <summary>
            The cursor appears as a rectangle that covers the entire character space.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.CutFillCharacterOption">
            <summary>
            Defines cut/fill character values, 
            which specify whether Cut and Clear actions replace characters with nulls or spaces.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CutFillCharacterOption.NullCharacter">
            <summary>
            Cut and cleared characters are replaced with nulls.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.CutFillCharacterOption.SpaceCharacter">
            <summary>
            Cut and cleared characters are replaced with spaces.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.DbcsUnmappedCharOption">
            <summary>
            Defines valid values for DBCS unmapped characters. 
            </summary>
            <remarks>
            These enumeration values
            specify how Reflection translates double-byte host characters 
            that are not available in the SHIFT-JIS double-byte character translation
            table. 
            <para>This property affects file transfers and printed output.</para>
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DbcsUnmappedCharOption.DbcsBlank">
            <summary>
            Blank (DBCS 8140 character).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DbcsUnmappedCharOption.OutlineRect">
            <summary>
            Outline rectangle (DBCS 81A0 character).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DbcsUnmappedCharOption.FilledRect">
            <summary>
            Filled rectangle (DBCS 81A1 character).
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.DbcsUserDefinedCharacterSourceOption">
            <summary>
            Specifies the location of DBCS user-defined character fonts. 
            </summary>
            <remarks>
            This property is applicable to 5250 sessions only.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DbcsUserDefinedCharacterSourceOption.HostImages">
            <summary>
            Fonts are on the host.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DbcsUserDefinedCharacterSourceOption.PCEndUserDefinedImages">
            <summary>
            Fonts are on the PC.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.DefinedEventType">
            <summary>
            Specifies the host settings.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefinedEventType.Silence">
            <summary>
            No host activity for specified interval.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefinedEventType.KeyboardEnabled">
            <summary>
            Keyboard enabled for specified interval.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefinedEventType.CursorEnterField">
            <summary>
            Cursor has entered specified field.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefinedEventType.CursorExitField">
            <summary>
            Cursor has exited specified field.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefinedEventType.CursorEnterPosition">
            <summary>
            Cursor has entered specified position.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefinedEventType.CursorExitPosition">
            <summary>
            Cursor has exited specified position.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefinedEventType.DisplayString">
            <summary>
            Specified string is displayed at designated coordinates.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefinedEventType.TimeOfDay">
            <summary>
            Time of Day specified as "HH:MM:SS.hh" occurs.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefinedEventType.TimeElapsed">
            <summary>
            Passage of specified interval of time in "HH:MM:SS.hh" format occurs.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes">
            <summary>
            Defines values that determine a field's attributes.
            </summary>
            <remarks>
            This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values.</remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.CharSetApl">
            <summary>Character set attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.Default">
            <summary>Default text attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.Blink">
            <summary>Blinking text attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.Reverse">
            <summary>Reverse video text attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.Strikethrough">
            <summary>Strikethrough text attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.Underline">
            <summary>Underline text attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.Overline">
            <summary>Overline text attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.ColumnSeparator">
            <summary>Column separator text attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.Visible">
            <summary>Visible text attribute </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.HighIntensity">
            <summary>High-intensity text attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.LightPen">
            <summary>Light pen field attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.AlphaOnly">
            <summary>Alpha-only field attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.RightJustified">
            <summary>Right-aligned field attribute </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.NumericShift">
            <summary>Numeric shift field attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.NumericOnly">
            <summary>Numeric only field attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.Digits">
            <summary>Digits field attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.SignedNumeric">
            <summary>Signed numeric field attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.MagneticStrip">
            <summary>Magnetic strip field attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.User">
            <summary>User field type attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.Message">
            <summary>Message field type attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.ModeBlock">
            <summary>Block mode field attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.ModeProtected">
            <summary>Protected mode field attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.RightLine">
            <summary>Right vertical line text attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.LeftLine">
            <summary>Left vertical line text attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.Modified">
            <summary>Modified field attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.Attribute">
            <summary>Identifies attributes as field attributes. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.AttributePosition">
            <summary>Identifies a field attribute definition character </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.MandatoryFill">
            <summary>Mandatory fill field attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.MandatoryEntry">
            <summary>Mandatory entry field attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.Trigger">
            <summary>Trigger field attribute. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.AttributeSpace">
            <summary>Field attribute occupies screen space. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.MarkDup">
            <summary>Field dup or mark enabled. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.AutoEnter">
            <summary>Field is auto enter. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.ExitRequired">
            <summary>Field exit required. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.UpperCase">
            <summary>Field is uppercase. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.RightAdjustBlankFill">
            <summary>Field is right-adjust blank fill. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.RightAdjustZeroFill">
            <summary>Field is right-adjust zero fill. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.CheckMod10">
            <summary>Field is check mod 10. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.CheckMod11">
            <summary>Field is check mod 11. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes.AlphaShift">
            <summary>Field is Alphabetic Shift. </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.FieldType">
            <summary>
            Defines valid field type values.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldType.Protected">
            <summary>Searches for a protected field.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldType.Unprotected">
            <summary>Searches for an unprotected field.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FieldType.Any">
            <summary>Searches for a protected or unprotected field.</summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.FileExistsOption">
            <summary>
            Specifies which operation to perform when a file already exists.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FileExistsOption.AskUser">
            <summary>
            Prompts the user.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FileExistsOption.Overwrite">
            <summary>
            Overwrites the file.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FileExistsOption.Append">
            <summary>
            Appends the existing file.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FileExistsOption.OpenError">
            <summary>
            Opens the file and indicates an error.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.FileSystemOption">
            <summary>
            Defines valid values for specifying the file system.    
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FileSystemOption.Windows">
            <summary>Windows file system. Characters are assumed to be ANSI and are not translated.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FileSystemOption.Dos">
            <summary>DOS file system. Characters are translated to ASCII (also known as the OEM character set) before being sent or after being received from the
            host.</summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer">
            <summary>
            Provides properties for configuring host file transfer and methods for
            executing file transfers to or from the host.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer,Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer"/> class. 
            </summary>
            <param name="fileTransfer">
            Remote file transfer object.
            </param>
            <param name="terminal">
            The parent terminal object.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Parent">
            <summary>
            <c>Gets</c> the parent object (IIbmTerminal).
            </summary>
            <example>
            <code>
            FileTransfer FTransfer;
            IbmTerminal ITerminal;
            
            //Get IbmTerminal object.
            ITerminal = FTransfer.Parent;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.HostFileListMacro">
            <summary>
            Gets or sets the macro that runs when you click the 
            Show Host Files button in the Transfer dialog box. 
            </summary>
            <remarks>
            You can use this macro to reposition the cursor, or to go to a valid screen 
            prior to executing the host file list command. 
            <para>This property is only relevant for 3270 terminal sessions.
            The default value is "".
            This string can contain up to 260 characters.
            </para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null (or in Visual Basic is Nothing). 
            Use a zero-length string to indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter length is too long.
            </exception> 
            <example>
            <code>
            FileTransfer FTransfer;
            FTransfer.HostFileListMacro = "HostFile";
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.DfltExistsAction">
            <summary>
            Gets or sets what happens during an IND$FILE transfer 
            if the destination file already exists.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Values:</term>
            </listheader>
            <item>
                <term>Append</term>
                <description>Adds the file being transferred to the existing destination file.</description>
            </item>
            <item>
                <term>AskUser</term>
                <description>Prompts the user to choose from these property values.</description>
            </item>
            <item>
                <term>OpenError</term>
                <description>Fails the transfer (and returns an error).</description> 
            </item>
            <item>
                <term>Overwrite</term>
                <description>Replaces the destination file. (The default.)</description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            FileTransfer FTransfer;
            FTransfer.DfltExistsAction = FileExistsOption.AskUser;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.ShowDISOSSStatusDialog">
            <summary>
            Gets or sets a value indicating whether to display the transfer-in-progress "thermometer" 
            when receiving data from the host during DISOSS transfers.
            </summary>
            <remarks>
            To show the thermometer, set this property is true. This property is
            only valid for 3270 sessions connecting to a host that uses DISOSS file transfer.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            FileTransfer FTransfer;
            FTransfer.ShowDISOSSStatusDialig = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.TransferType">
            <summary>
            Gets or sets the transfer protocol for Reflection to use.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            FileTransfer FTransfer;
            FTransfer.TransferType = FileTransferTypeOption.Ftp;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.INDReceiveFile(System.String,System.String,Attachmate.Reflection.Emulation.IbmHosts.INDFileTransferType,Attachmate.Reflection.Emulation.IbmHosts.FileExistsOption,System.Boolean)">
            <summary>
            Transfers a file from the host to the PC using the IND$FILE protocol.
            </summary>
            <param name="pcFile">Specifies a name for the PC file to receive the host data. Provide complete path information.</param>
            <param name="hostFile">Specifies a host file.</param>
            <param name="type">Specifies the type of file being transferred.</param>
            <param name="fileExistsOption">Specifies what to do if the file specified in the pcFile argument already exists.</param>
            <param name="showStatus">Displays the file transfer in the Progress window if set to true.</param>
            <exception cref="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.NewInvalidFTOperationException">If the FileTransfer object equals <c>Null</c>.</exception>
            <example>
            <code>
            FileTransfer file = new FileTransfer(IFileTransfer fileTransfer,IIbmTerminal ibmTerminal);
            file.INDReceiveFile("//File.txt", "HostFile", INDFileTransferType.Ascii, FileExistsOption.AskUser, true);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.INDSendFile(System.String,System.String,Attachmate.Reflection.Emulation.IbmHosts.INDFileTransferType,Attachmate.Reflection.Emulation.IbmHosts.FileExistsOption,System.Boolean)">
            <summary>
            Transfers a file from the PC to the host using the IND$FILE protocol.
            </summary>
            <param name="pcFile">Specifies a local file. Unless you provide complete path information, 
            only files in the current directory will be found. You cannot use wildcard characters 
            to send multiple files the way you can by using the Transfer screen.</param>
            <param name="hostFile">Specifies a name for the file being transferred. 
            This name must comply with host file naming conventions. You cannot use an empty string.</param>
            <param name="type">Specifies the type of file being transferred.</param>
            <param name="fileExistsOption">Specifies what to do if the file specified in the HostFile argument already exists.</param>
            <param name="showStatus">Use true to display the Transfer in the Progress window while the transfer is in progress, or false to not display the Transfer
            in the Progress window.</param>
            <exception cref="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.NewInvalidFTOperationException">If the FileTransfer object equals <c>Null</c>.</exception>
            <example>
            <code>
            FileTransfer file = new FileTransfer(IFileTransfer fileTransfer,IIbmTerminal ibmTerminal);
            file.INDSendFile("//pcFile.txt", "HostFile", INDFileTransferType.Ascii, FileExistsOption.AskUser, true);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.ShowFileTransferDialog">
            <summary>
            Opens the File Transfer dialog box.
            </summary>
            <exception cref="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.NewInvalidFTOperationException">If the FileTransfer object equals <c>Null</c>.</exception>
            <example>
            <code>
            FileTransfer file = new FileTransfer(IFileTransfer fileTransfer,IIbmTerminal ibmTerminal);
            file.ShowFileTransferDialog();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.ShowFileTransferSetupDialog">
            <summary>
            Opens the Transfer Setup dialog box. 
            </summary>
            <remarks>This method returns an error if the user cancels the dialog box.</remarks>
            <exception cref="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.NewInvalidFTOperationException">If the FileTransfer object equals <c>Null</c>.</exception>
            <example>
            <code>
            FileTransfer file = new FileTransfer(IFileTransfer fileTransfer,IIbmTerminal ibmTerminal);
            file.ShowFileTransferSetupDialog();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.AbortTransfer">
            <summary>
            Aborts an IND$FILE transfer. 
            </summary>
            <remarks>
            This method is more drastic than CancelTransfer and may leave the host session in an unpredictable state. 
            Use <see cref="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.CancelTransfer"/> unless you think the host program has stopped responding.
            </remarks>
            <exception cref="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.NewInvalidFTOperationException">If the FileTransfer object equals <c>Null</c>.</exception>
            <example>
            <code>
            FileTransfer file = new FileTransfer(IFileTransfer fileTransfer,IIbmTerminal ibmTerminal);
            file.AbortTransfer();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.CancelTransfer">
            <summary>
            Cancels a IND$FILE or AS/400 data transfer in progress. If the host  
            stops responding, you may need to use the <see cref="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.AbortTransfer"/> method instead.
            </summary>
            <exception cref="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.NewInvalidFTOperationException">If the FileTransfer object equals <c>Null</c></exception>
            <example>
            <code>
            FileTransfer file = new FileTransfer(IFileTransfer fileTransfer,IIbmTerminal ibmTerminal);
            file.CancelTransfer();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.AS400ReceiveFile(System.String,System.Boolean)">
            <summary>
            Transfers data from the host to the PC using the AS/400 data transfer protocol.
            </summary>
            <remarks>
            This method is only relevant to 5250 sessions.
            </remarks>
            <param name="transferFile">
            The name of a transfer request file that provides all necessary 
            information about the transfer. Use an empty string to specify 
            configuration information provided by AS/400 Data Transfer keywords.</param>
            <param name="showStatus">Displays the file transfer in the Progress window if set to true.</param>
            <exception cref="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.NewInvalidFTOperationException">If the FileTransfer object equals <c>Null</c>.</exception>
            <example>
            <code>
            FileTransfer file = new FileTransfer(IFileTransfer fileTransfer,IIbmTerminal ibmTerminal);
            file.AS400ReceiveFile(" ",true);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.AS400SendFile(System.String,System.Boolean)">
            <summary>
            Transfers one or more PC files to the host using the AS/400 data transfer protocol. 
            </summary>
            <remarks>
            This method is only relevant to 5250 sessions.
            </remarks>
            <param name="transferFile">The name of a transfer request file that provides all necessary information about the transfer. 
            Use an empty string to specify configuration information provided by AS/400 Data Transfer keywords.</param>
            <param name="showStatus">Displays the file transfer in the Progress window if set to true.</param>
            <exception cref="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.NewInvalidFTOperationException">If the FileTransfer object equals <c>Null</c>.</exception>
            <example>
            <code>
            FileTransfer file = new FileTransfer(IFileTransfer fileTransfer,IIbmTerminal ibmTerminal);
            file.AS400SendFile(" ",true);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Open(Attachmate.Reflection.Emulation.IbmHosts.FileTransferRequestType,System.String)">
            <summary>
            Opens and executes a transfer request file.
            This is equivalent to opening a Transfer Request (.mto or .xto)
            file using the Open button in the File Transfer dialog and/or
            the Run button on the Batch Transfer tab.
            If the XfrHostReturnCode property is non-zero after completion,
            the XfrHostMessage property will contain the error message.
            </summary>
            <param name="transferFileType">
            The transfer request file type: AS400 or Mainframe
            </param>
            <param name="transferRequestFile">
            The name of the transfer request file.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400AssumePositiveNumerics">
            <summary>
            Gets or sets a value indicating whether Reflection looks for a negative sign (-) or a blank (positive)
            in the first byte of numeric fields in fixed column ASCII database files.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 
            5250 sessions.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400Authority">
            <summary>
            Gets or sets the level of authority to associate with a file that is transferred to the host.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant when the SessionType property 
            is set to 5250Terminal. 
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>AuthAll</term>
            <description> Allows other users to view the file in a list, and to read it, write to
            it, or delete it.</description></item> 
            <item><term>AuthNone</term>
            <description>Prevents other users from viewing the file in a list, and from 
            writing to it or deleting it. </description></item>
            <item><term>AuthRead</term>
            <description>Allows other users to view the file in a list and read it, but not to write
            to the file or delete it.</description></item>
            <item><term>AuthReadWrite</term>
            <description>Allows other users to see the file in a list, read it, 
            and write to it, but not delete it. (The default.)</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400Charset">
            <summary>
            Gets or sets the character set to use for transfers to and from an AS/400. 
            </summary>
            <remarks>
            This property is relevant for data that contains characters with decimal values
            greater than 127. (The ANSI and ASCII character sets have the same values for characters 
            with decimal values from 32 - 126.) 
            <para>This property affects AS/400 data transfer only.</para> 
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>AS400Ansi</term>
            <description>Uses the ANSI character set. (The default.)</description></item>
            <item><term>AS400Ascii</term>
            <description>Uses the ASCII character set.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400CompatibleAsciiFile">
            <summary>
            Gets or sets a value indicating whether Reflection uses the buffer length or the field length
            of a packed decimal field to determine the size of fields on the PC.
            </summary>
            <remarks>
            This setting mimics how Micro Focus RUMBA and EXTRA! perform this same operation. 
            When set to false, the extra byte that appears as a space in front of 
            even length fields is eliminated. This setting applies to 5250 sessions only.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400CompatibleFDFFile">
            <summary>
            Gets or sets a value indicating whether Reflection denotes a number's digit/decimal 
            characteristics in file description files (FDF) the same as RUMBA.
            </summary>
            <remarks>
            By default, Reflection counts the implied positive or negative sign 
            and any decimal point when denoting the digit/decimal characteristics of a number in file description files. 
            For example, Reflection denotes 123.45 as 7/2 (that is, seven total digits, 
            two of which fall to the right of the decimal point). 
            <para>The implied positive or negative sign represents the first digit, the numbers 123 
            represent the next three digits, the decimal point represents another digit, 
            and the two numbers on the right of the decimal point (45) represent the last two digits.</para>
            <para>RUMBA denotes the same number (123.45) as 5/2 (that is, five total digits, 
            two of which fall to the right of the decimal point).</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400DateFormat">
            <summary>
            Gets or sets the date format for selected fields that have an AS/400 field type of date.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant when 
            the SessionType property is set to 5250Terminal.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>Dds</term>
            <description>Format given by AS/400 file attribute.</description></item>
            <item><term>Default</term>
            <description>AS/400 job default.</description></item>
            <item><term>DateMonthYear</term>
            <description>Date, month, year (dd/mm/yy).</description></item>
            <item><term>European</term>
            <description>IBM European standard (dd.mm.yyyy).</description></item>
            <item><term>Iso</term>
            <description>International Standards Organization (yyyy/mm/dd).</description></item>
            <item><term>Jis</term>
            <description>Japanese Industrial Standard (yyyy-mm-dd).</description></item>
            <item><term>Julian</term>
            <description>(yy/ddd).</description></item>
            <item><term>MonthDateYear</term>
            <description>Month, date, year (mm/dd/yy).</description></item>
            <item><term>Usa</term>
            <description>USA standard (mm/dd/yyyy).</description></item>
            <item><term>YearMonthDate</term>
            <description>Year, month, date (yy/mm/dd).</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400DateSeparator">
            <summary>
            Gets or sets a character to use as a date separator in selected 
            fields that have an AS/400 field type of date.
            </summary>
            <remarks>
            This property is only relevant when the SessionType property 
            is set to 5250Terminal in AS/400 data transfers.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>AS400Blank</term>
            <description>( )</description></item>
            <item><term>AS400Comma</term>
            <description>(,)</description></item>
            <item><term>AS400Dash</term>
            <description>(-)</description></item>
            <item><term>AS400Default</term>
            <description>AS/400 job default.</description></item>	    
            <item><term>AD400Null</term>
            <description>Absence of any separator.</description></item>	
            <item><term>AD400Period</term>
            <description>(.)</description></item>
            <item><term>AD400Slash</term>
            <description>(/)</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400DecSep">
            <summary>
            Gets or sets a character to use as a decimal separator in selected
            fields that have an AS/400 field type of packed decimal or zoned decimal.
            </summary>
            <remarks>
            This property is only relevant when the SessionType property 
            is set to 5250Terminal in AS/400 data transfers.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>AS400Comma</term>
            <description>(,)</description></item>
            <item><term>AS400Default</term>
            <description>AS/400 job default.</description></item>
            <item><term>AS400Period</term>
            <description>(.)</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400DeleteTrailingSpaces">
            <summary>
            Gets or sets a value indicating whether extra spaces at the end of a record are 
            deleted when the records are transferred to the PC during AS/400 data transfers.
            </summary>
            <remarks>
            This setting is only relevant for 5250 terminal sessions.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400ExistsAction">
            <summary>
            Gets or sets what Reflection does if it finds a PC file with the same name 
            as the host file or member that you are trying to receive.
            </summary>
            <remarks>
            The equivalent property for IND$FILE is DfltExistsAction.
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>Append</term>
            <description>Appends the host file or member to the existing PC file.</description></item>
            <item><term>AskUser</term>
            <description>Prompts the user for a decision if the PC file already exists. (The default.)</description></item>
            <item><term>OpenError</term>
            <description>Fails the transfer (and returns an error) if the PC file already exists.</description></item>
            <item><term>Overwrite</term>
            <description>Replaces the existing PC file.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400FileText">
            <summary>
            Gets or sets a host file description, which appears in AS/400-generated lists 
            (such as WRKOBJ displays) and as a Tooltip in the Transfer dialog box.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant to 5250 
            sessions. 
            The default is "". This string can contain up to 50 characters.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400ForceHexConversion">
            <summary>
            Gets or sets a value indicating whether Reflection translates data that is in coded 
            character set ID (CCSID) 65535 from hexadecimal to EBCDIC when 
            transferring it to the host or to ANSI when receiving it. 
            </summary>
            <remarks>
            When this property is false, Reflection sends and receives 
            data in hexadecimal format instead of translating it.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400GroupByString">
            <summary>
            Gets or sets how to group returned data after a requested function is performed. 
            </summary>
            <remarks>
            When the Select statement (specified by the Xfr400SelectString) includes 
            a function and multiple fields, a Group By Statement is necessary. 
            <para>This property affects AS/400 data transfer and is only relevant to 5250 
            sessions.</para>
            <para>Note: You can set up SQL query options using the SetSQLStatement method;  
            however, those options will supercede any transfer options entered using this property.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400HavingString">
            <summary>
            Gets or sets a string that imposes a condition on a function of the Select statement. 
            </summary>
            <remarks>
            You can create a Having statement only after you create a Select statement using Xfr400SelectString.
            Note: You can set up SQL query options using the SetSQLStatement method; 
            however, those options will supersede any transfer options entered using this property.
            <para>
            This property affects AS/400 data transfer and is only relevant to 5250 sessions.
            The default is "".</para>
            <para></para>
            <para>Use the following syntax for this string (up to 220 characters):</para>
            <para>[function](field name)[test][value]</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400HostFileType">
            <summary>
            Gets or sets the type of host file to create.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant to 
            5250 sessions.
            <list type="bullet"> 
            <listheader><term>Values:</term></listheader>
            <item>
            <term>AS400Data</term> 
            <description>Creates an AS/400 physical data file and member. (The default.)</description>
            </item>
            <item>
            <term>AS400Source</term>
            <description>Creates an AS/400 physical source file and member.</description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400IgnoreDecErrors">
            <summary>
            Gets or sets a value indicating whether Reflection ignores decimal data errors found in packed or zoned fields 
            during transfers from the AS/400. 
            </summary>
            <remarks>
            When this property is true, decimal data errors are ignored, which speeds up the transfer process.
            This property affects AS/400 data transfer and is only relevant to 5250 sessions. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400JoinByString">
            <summary>
            Gets or sets how to combine data from multiple files. 
            </summary>
            <remarks>
            You can create a Join By statement only if multiple files or members are selected. 
            <para>Note: You can set up SQL query options by using the SetSQLStatement method; 
            however, those options will supersede any transfer options entered using this property.</para>
            <para>This property affects AS/400 data transfer and is only relevant to 5250 sessions. </para>
            The default is "".
            <para>Use the following syntax to create the string (up to 220 characters): </para>
            <para>[field name1](test)[field name2]</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). Use an zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400LocalFile">
            <summary>
            Gets or sets the name of the PC file to send or receive in AS/400 data transfers.
            </summary>
            <remarks>
            If no path is provided, Reflection uses the folder specified by XfrCurrentDirectory. 
            For example, the following statements set the local transfer file to "C:\test\Payroll":
            <para>FileTransfer.XfrCurrentDirectory = "C:\Test"</para>
            <para>FileTransfer.Xfr400LocalFile = "Payroll"</para>
            <para>When you receive data to a local file, the value of the Xfr400OutputDestination property 
            should be set to AS400File (the default value).</para>
            <para>This property is only relevant for 5250 sessions. 
            The default is "". This string can contain up to 260 characters.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400MemberText">
            <summary>
            Gets or sets a new member description which appears in AS/400-generated lists, 
            such as WRKMBRPDM, and as a Tooltip in the Transfer dialog box.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant to 5250 sessions.
            The default is "". This string can contain up to 50 characters.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). 
            Use a zero-length string to indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400NCS">
            <summary>
            Gets or sets the character set Reflection uses for character translations during AS/400 data transfers.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant to 5250 sessions.
            <list type="bullet"> 
            <listheader><term>Values:</term></listheader>
            <item><term>Belgian</term><description>Reflection uses the Belgian character set.</description></item>
            <item><term>CanadianFrench</term><description>Reflection uses the Canadian French character set.</description></item>
            <item><term>Danish</term><description>Reflection uses the Danish character set.</description></item>
            <item><term>EastEurope</term><description>Reflection uses the Eastern Europe character set.</description></item>
            <item><term>Finnish</term><description>Reflection uses the Finnish character set.</description></item>
            <item><term>French</term><description>Reflection uses the French character set.</description></item>
            <item><term>German</term><description>Reflection uses the German character set.</description></item>
            <item><term>Greek</term><description>Reflection uses the Greek character set.</description></item>
            <item><term>Icelandic</term><description>Reflection uses the Icelandic character set.</description></item>
            <item><term>Italian</term><description>Reflection uses the Italian character set.</description></item>
            <item><term>Multilingual</term><description>Reflection uses the Multilingual character set.</description></item>
            <item><term>Norwegian</term><description>Reflection uses the Norwegian character set.</description></item>
            <item><term>Portuguese</term><description>Reflection uses the Portuguese character set.</description></item>
            <item><term>Spanish</term><description>Reflection uses the Spanish character set.</description></item>
            <item><term>Swedish</term><description>Reflection uses the Swedish character set.</description></item>
            <item><term>Swiss</term><description>Reflection uses the Swiss character set.</description></item>
            <item><term>UKEnglish</term><description>Reflection uses the UK English character set.</description></item>
            <item><term>USEnglish</term><description>Reflection uses the US English character set. (The default.)</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400NumDisplayRecords">
            <summary>
            Gets or sets the number of records displayed in the Query Results window 
            This window appears when you transfer host records to the screen display (instead of to a file).
            </summary>
            <remarks>
            To specify screen display, set the value of Xfr400OutputDestination to AS400Display. 
            <para>If the number of records displayed is less than the total number received, 
            click More in the Query Results to view the remainder.</para>
            <para>This property affects AS/400 data transfer and is only relevant to 5250 sessions.
            The range of values is 1 to 500. The default value is 200.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>                        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400Objects">
            <summary>
            Gets or sets a value indicating whether data is transferred to a new member on the AS/400 
            or to an existing member, and whether the file that contains the member already exists.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            <list type="bullet"> 
            <listheader><term>Values:</term></listheader>
            <item><term>CreateFileAndMember</term><description>Creates a new member within a new host file.</description></item>
            <item><term>CreateMember</term><description>Creates a new member within an existing host file.</description></item>
            <item><term>RepMember</term><description>Sends to (and overwrites) an existing member in an existing file. 
            Reflection does not prompt you to confirm the overwrite action.</description></item>
            <item><term>RepMemberConf</term><description>Sends to an existing member in an existing file. Before
            overwriting the existing member, Reflection asks you to confirm the overwrite action. (The default.)</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400OrderByString">
            <summary>
            Gets or sets how to sort selected records. 
            </summary>
            <remarks>
            Note: You can set up SQL query options using the SetSQLStatement method; 
            however, those options will supersede transfer options entered using this property.
            <para>This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            The default is "".</para>
            <para>Use the following syntax to create this string (up to 220 characters):</para>
            <para>[field] [sequence]</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400OutputDest">
            <summary>
            Gets or sets a value indicating whether host data is received to a PC file or to your display.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            <list type="bullet"> 
            <listheader><term>Values:</term></listheader> 
            <item><term>AS400Display</term><description>Receives host data to your display.</description></item>
            <item><term>AS400File</term><description>Receives host data to the file specified by the Xfr400LocalFile property. (The default.)</description></item>
            <item><term>AS400Spreadsheet</term><description>Receives host data to a DIF file. If you have a spreadsheet program on your PC 
            that has a Windows association with DIF files, selecting this option also opens the DIF file in that program.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400ReceiveConversion">
            <summary>
            Gets or sets a conversion format for a file being received from an AS/400.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            <list type="bullet"> 
            <listheader><term>Values:</term></listheader> 
            <item><term>Ascii</term>
            <description>Appropriate for files with no special formatting and fixed record widths. (The default.)</description></item>
            <item><term>BasicSeq</term>
            <description>Separates all fields with commas and inserts quotation marks around character and hexadecimal fields.</description></item>
            <item><term>CommaDelimiter</term>
            <description>Separates all fields with commas and inserts quotation marks around character fields that contain a comma or quotation mark.</description></item>
            <item><term>Dif</term>
            <description>Use for files transferred to and from Microsoft Excel. DIF files contain the names of the fields.</description></item>
            <item><term>DosRandom</term>
            <description>Appropriate with host database applications that require data to be in this format.</description></item>
            <item><term>NoConversion</term>
            <description>Use for files that should not be translated.</description></item>
            <item><term>TabDelimiter</term>
            <description>Separates all fields with tabs and inserts quotation marks around character fields that contain a quotation mark.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400ReceiveDescFile">
            <summary>
            Gets or sets a description file to receive during a transfer from an AS/400 to the PC.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            <para>The default is "*.FDF".
            This string can contain up to 260 characters.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400RecordLength">
            <summary>
            Gets or sets(second syntax line) the record size (in bytes) for files created on the host.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            The range of values is 13-4105. The default is 92.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>                        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400RefFile">
            <summary>
            Gets or sets the reference file that will be used to set 
            the definitions of fields for the new AS/400 file.
            </summary>
            <remarks>
            This property is relevant only when Xfr400Objects is set to CreateFileAndMember and Xfr400UseDescriptionFile is True.
            <para>Specify a reference file using the following syntax:</para>
            <para>[library name]/[filename]</para>
            <para>The [library name] indicates the library in which the reference file resides.
            The [filename] is the name of the AS/400 database file that 
            contains the field descriptions.</para> 
            <para>For example:
            FileTransfer.Xfr400RefFile = "mylib/myfile"</para>
            <para>This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            The default is "".
            This string can contain up to 220 characters.</para>
            <para>For more information on creating AS/400 files, see your AS/400 documentation. </para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400RemoteFile">
            <summary>
            Gets or sets a host file that the PC receives or to which data
            from the PC is sent, for AS/400 data transfers.
            </summary>
            <remarks>
            For example:
            FileTransfer.Xfr400RemoteFile = "mylib/myfile(mymember)"
            <para>This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            The default is "". This string can contain up to 260 characters.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400ReturnMissing">
            <summary>
            Gets or sets a value indicating whether records that contain values for missing fields should be returned. 
            </summary>
            <remarks>
            When this property is set to true, records with missing fields are returned.
            This property affects AS/400 data transfer and is only relevant for 5250 
            sessions.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400SaveDescriptionFile">
            <summary>
            Gets or sets a value indicating whether to save the description file during a transfer from an AS/400 to a PC.  
            </summary>
            <remarks>
            When this property is set to True, the description file is saved.
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400SelectString">
            <summary>
            Gets or sets which fields to transfer. 
            </summary>
            <remarks>
            This affects AS/400 data transfer and is only relevant for 5250 sessions.
            <para>Note: You can set up SQL query options using the SetSQLStatement method; 
            however, those options will supersede any transfer options entered using this property.</para>
            <para>The default is "". This string can contain up to 220 characters. </para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400SendConversion">
            <summary>
            Gets or sets a conversion format for a file being sent to an AS/400.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>AS400Ascii</term>
            <description>Appropriate for files with no special formatting and fixed record widths. (The default.)</description></item>
            <item><term>AS400BasicSeq</term>
            <description>Separates all fields with commas and inserts quotation marks around character and hexadecimal fields.</description></item>
            <item><term>AS400CommaDelimiter</term>
            <description>Separates fields with commas, but only inserts quotation marks around character fields that contain a comma or quotation mark.</description></item>
            <item><term>AS400DosRandom</term>
            <description>Appropriate with host database applications that require data to be in this format.</description></item>
            <item><term>AS400NoConversion</term>
            <description>Used for files that should not be translated.</description></item>
            <item><term>AS400TabDelimiter</term>
            <description>Separates all fields with tabs and inserts quotation marks around character fields that contain a quotation mark.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400SendDescFile">
            <summary>
            Gets or sets a description file to send during a transfer to an AS/400 from the PC.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            The default is "*.FDF". This string can contain up to 260 characters.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400ShowProgress">
            <summary>
            Gets or sets a value indicating whether to show the transfer-in-progress "thermometer" when receiving data from the host. 
            </summary>
            <remarks>
            Transfers take less time when the thermometer is not shown because the AS/400 does not have to 
            count the number of selected records before transferring them.
            <para>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400SortSeq">
            <summary>
            Gets or sets a sort sequence for the transferred data. 
            </summary>
            <remarks>
            The sort sequence determines the order of alphabetic characters
            when fields are alphabetized. The sort sequence also affects
            any comparisons based on characters in the fields. For example, the 
            following statement specifies the EBCDIC hexadecimal sort sequence:
            <para>FileTransfer.Xfr400SortSeq  = "*HEX"</para>
            <para>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</para>
            <list type="bullet"> 
            <listheader><term>Values:</term></listheader>
            <item><term>*HEX</term><description>Uses the EBCDIC hexadecimal sort sequence.</description></item>
            <item><term>*JOB</term><description>Uses the AS/400 job default.</description></item>
            <item><term>*LANGIDSHR</term><description>Uses a shared weight table.</description></item>
            <item><term>*LANGIDUNQ</term><description>Uses a unique weight table.</description></item>
            </list>
            <para>You can also specify a table name by using the following syntax:</para>
            <para>[library name]/[filename]</para>
            <para>This string can contain up to 220 characters.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400StartRecord">
            <summary>
            Use this property to skip a given number of records at the start of a file 
            (for example, the first line of headings in a spreadsheet) before sending the file to the AS/400. 
            </summary>
            <remarks>
            If header information causes a problem for an AS/400 program that analyzes the uploaded data, 
            change this property from the default (1). The range of values is 1 - 32,768.
            <para>The value 1 sends the entire file to the host. </para>
            <para>The value 2 skips the first record in the file. </para>
            <para>The value 3 skips the first two records in the file (and so on).</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>                        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400TimeFormat">
            <summary>
            Gets or sets the time format for selected fields that have an AS/400 field type of Time.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            <list type="bullet">
            <listheader><term>Values:</term></listheader> 
            <item><term>Dds</term><description>Format given by AS/400 file attribute.</description></item>
            <item><term>Default</term><description>AS/400 job default.</description></item>
            <item><term>European</term><description>IBM European standard (hh.mm.ss).</description></item>
            <item><term>HourMonthSecond</term><description>Hour, minute, second (hh:mm:ss).</description></item>
            <item><term>Iso</term><description>International Standards Organization (hh.mm.ss).</description></item>
            <item><term>Jis</term><description>Japanese Industrial standard (hh:mm:ss).</description></item>
            <item><term>Usa</term><description>USA standard (hh:mm AM or PM).</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges..
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400TimeSeparator">
            <summary>
            Gets or sets a character to use as a time separator in selected fields that have an AS/400 field type of Time.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>AS400Blank</term><description>( )</description></item>
            <item><term>AS400Colon</term><description>(:)</description></item>
            <item><term>AS400Comma</term><description>(,)</description></item>
            <item><term>AS400Default</term><description>AS/400 job default.</description></item>
            <item><term>AS400Null</term><description>No separator.</description></item>
            <item><term>AS400Period</term><description>(.)</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400Transport">
            <summary>
            Gets or sets the protocol for data transfers. 
            </summary>
            <remarks>
            For example, this statement specifies TCP/IP file transfers:
            <para>FileTransfer.Xfr400Transport = TCPIP</para>
            <para>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</para>
            <list type="bullet"> 
            <listheader><term>Values:</term></listheader> 
            <item><term>CommServer</term><description>Uses IBM Comm Server.</description></item>
            <item><term>DLC8022</term><description>Uses 802.2.</description></item>
            <item><term>LIPITCP</term><description>Uses TCP/IP.</description></item>
            <item><term>MPTN</term><description>Uses MPTN. (The default.)</description></item>
            <item><term>MSSNAServer</term><description>Uses MS SNA Server.</description></item>
            <item><term>NetwareSAA</term><description>Uses NetWare SAA.</description></item>
            <item><term>SDLC</term><description>Uses SDLC.</description></item>
            <item><term>Twinax</term><description>Uses Twinax.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400UseDescriptionFile">
            <summary>
            Gets or sets a value indicating whether a description file is used when sending a PC file to an AS/400. 
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400WhereString">
            <summary>
            Gets or sets one or more conditions that determine whether a record is transferred.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            <para> Note: You can set up SQL query options using the SetSQLStatement method;  
            however, those options will supercede any options entered using this property.</para>
            <para>The default is "".</para>
            <para>Use the following syntax to create the string (up to 220 characters):</para>
            <para>[field name] [test] [value]</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr400HostTP">
            <summary>
            Gets or sets which host transaction program (TP) Reflection should use for TCP/IP file transfers 
            (XfrTransport is set to LipiTcp).
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>Ehntfw</term><description>Uses EHNTFW transaction program. (The default.)</description></item>
            <item><term>Lipi</term><description>Uses LIPI transaction program.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.DfltXfrType">
            <summary>
            Gets or sets the default type for mainframe transfers in 3270 sessions.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>Ascii</term><description>Specifies an ASCII transfer.</description></item>
            <item><term>Binary</term><description>Specifies a binary transfer. (The default for all versions except the Japanese language.)</description></item>
            <item><term>Jiscii</term><description>Specifies a JISCII transfer (The default for the Japanese language version.)</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.IndAutoPositionCursor">
            <summary>
            Gets or sets a value indicating whether Reflection enters IND$FILE commands in the last unprotected field on the screen. 
            </summary>
            <remarks>
            This property affects IndReceiveFile and IndSendFile methods of file 
            transfers performed in the File Transfer dialog box.
            This property applies to 3270 terminal sessions only.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.Xfr8Dot3FilenameCase">
            <summary>
            Gets or sets how to display the filenames of PC files that were created in 16-bit 
            applications within the Transfer dialog box. 
            </summary>
            <remarks>
            Eight-dot-three describes DOS filenames which contain up to eight characters and have a three-character file extension.
            <list type="bullet"> 
            <listheader><term>Values:</term></listheader>
            <item><term>Lowercase</term><description>Displays all 8.3 filenames in lowercase. (The default.)</description></item>
            <item><term>PreserveCase</term><description>Displays all 8.3 filenames as returned by the file system.</description></item>        
            <item><term>Uppercase</term><description>Displays all 8.3 filenames in uppercase.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrAddParam">
            <summary>
            Gets or sets any additional parameters that should be appended to the IND$FILE commands that Reflection generates.
            </summary>
            <remarks>
            This property is applicable 3270 sessions only.
            <para>The default is "". This string can contain up to 220 characters.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrApvUser">
            <summary>
            Gets or sets a value indicating whether shift-out and shift-in (SO/SI) characters in the host file 
            from hosts that select the NOSO option remain intact (untranslated) for JISCII file translations.
            </summary>
            <remarks>
            If this value is True, characters are not translated.
            This property is applicable to double-byte 3270 sessions only.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrAsciiCrlf">
            <summary>
            Gets or sets a value indicating whether carriage returns and linefeed characters (CR/LF) at the end of lines in ASCII files
            are removed (when sent to the host) or added (when received from the host). 
            </summary>
            <remarks>
            CR/LF processing is typically appropriate for ASCII files, but not for binary files.
            This property affects IND$FILE transfer and is applicable to 3270
            sessions only.
            <list type="bullet"> 
            <listheader><term>Values:</term></listheader>
            <item><term>Convert</term><description>Carriage return and linefeed characters are added or removed. (The default.)</description></item>
            <item><term>Ignore</term><description>Carriage return and linefeed characters are not added or removed.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrBinaryCRLF">
            <summary>
            Gets or sets a value indicating whether carriage returns and linefeed characters (CR/LF) at the end of lines in ASCII files
            are removed (when you send the file to the host) or added (when you receive the file from the host). 
            </summary>
            <remarks>
            CR/LF processing is typically appropriate for ASCII files, but not for binary files.
            This property affects IND$FILE transfer and is applicable to 3270 sessions only.
            <list type="bullet"> 
            <listheader><term>Values:</term></listheader>
            <item><term>Convert</term><description>Carriage return and linefeed characters are added or removed.</description></item>
            <item><term>Ignore</term><description>Carriage return and linefeed characters are not added or removed. (The default.)</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrCloseDlgAfterTransfer">
            <summary>
            Gets or sets a value indicating whether Reflection closes the File Transfer
            dialog box upon completion of a file transfer.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrCurrentDirectory">
            <summary>
            Gets or sets the current local working folder for file transfer.
            </summary>
            <remarks>
            By default, this folder is displayed in the Transfer dialog box and 
            is used to open and save transfer request files. 
            <para>This property  value changes if you navigate to a new folder 
            from the Transfer dialog box. </para>
            <para>The default is "". This string can contain up to 220 characters.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrEnableTemplates">
            <summary>
            Gets or sets a value indicating whether file transfer templates are enabled in 3270 terminal sessions.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrFtpLocalFile">
            <summary>
            Gets or sets the file that the PC receives (for transfers to the PC using FtpReceiveFile), or the 
            file that's sent to the host (for transfers to the host using FtpSendFile).
            </summary>
            <remarks>
            When no path is specified, Reflection uses the folder specified by XfrCurrentDirectory.
            <para>The default is "".</para>
            This string can contain up to 260 characters.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null (or in Visual Basic is Nothing). 
            Use a zero-length string to indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrFtpRemoteFile">
            <summary>
            Gets or sets the file that the host receives (for transfers to the host using FtpSendFile), or the file that's 
            sent to the PC (for transfers to the PC using FtpReceiveFile).
            </summary>
            <remarks>
            The default is "".
            This string can contain up to 260 characters.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null (or in Visual Basic is Nothing). 
            Use a zero-length string to indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrHostCmd">
            <summary>
            Gets or sets the host program that Reflection runs to initiate a file transfer. 
            </summary>
            <remarks>
            The default value, "IND$FILE" (or "APVUFILE" if you use a Japanese 
            version of Reflection) is generally appropriate for CMS, TSO, and CICS hosts.  
            <para>For CICS hosts, you may need to specify your site's CICS transaction (for example, "CFTR"). 
            This property affects IND$FILE transfer and is applicable to 3270
            sessions only. This string can contain up to 9 characters. </para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null (or in Visual Basic is Nothing). 
            Use a zero-length string to indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrHostMessage">
            <summary>
            Gets or sets the message that the host file transfer program 
            returns to Reflection after a transfer completes.
            </summary>
            <remarks>
            The default is "".
            This string can contain up to 255 characters.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrHostSys">
            <summary>
            Gets or sets which 3270 operating environment the host is running.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>Cics</term><description>The host environment is CICS.</description></item>
            <item><term>Cms</term><description>The host environment is CMS. (The default.)</description></item>
            <item><term>Tso</term><description>The host environment is TSO.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrIndAllocUnit">
            <summary>
            Gets or sets the unit of disk space for your primary and secondary space allocations.
            </summary>
            <remarks>
            This property affects IND$FILE transfer and is applicable only to 
            3270 sessions when the host is running TSO.
            <list type="bullet"> 
            <listheader><term>Values:</term></listheader>
            <item><term>XfrAllocBlock</term><description>Allocations are in blocks.</description></item>
            <item><term>XfrAllocCylinder</term><description>Allocations are in cylinders.</description></item>
            <item><term>XfrAllocTrack</term><description>Allocations are in tracks.</description></item>
            <item><term>XfrAllocDflt</term><description>The unit is determined by the host. (The default.)</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured via the Permissions Manager, 
            or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrIndAvgBlk">
            <summary>
            Gets or sets the size (in bytes) for an average block. 
            </summary>
            <remarks>
            This property affects IND$FILE transfer and is applicable 
            only to 3270 sessions when the host is running TSO.
            <para>The range of values is 0-32768. The default is 0.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>                
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrIndBlkSize">
            <summary>
            Gets or sets the block size (between 0 and 32768 bytes) for the file being
            created on the host as the result of a transfer from Reflection. 
            </summary>
            <remarks>
            For files with fixed-length records, this value must be a multiple 
            of the Logical Record Length, which is controlled by the XfrIndLRecL 
            property. 
            <para>This property affects IND$FILE transfer and is applicable to 3270 
            sessions only. The default value is 0.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrIndLRecl">
            <summary>
            Gets or sets the record size (in bytes) for files created on the host 
            as the result of a transfer from Reflection. 
            </summary>
            <remarks>
            If you do not specify a record size, it is determined by the host.
            This property affects IND$FILE transfer and is applicable to 3270 
            sessions when the host is running TSO or CMS.
            <para>The default is 0. The range of values is 0 - 32,768</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrIndNOSO">
            <summary>
            Gets or sets a value indicating whether to remove the shift-out/shift-in (SO/SI) characters 
            from files sent to the host. 
            </summary>
            <remarks>
            This setting is intended for files made up entirely of double-byte 
            characters or that contain both single-byte and double-byte characters.
            <para>This property is applicable to double-byte 3270 sessions only.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrIndPrimAlloc">
            <summary>
            Gets or sets the primary allocation (in Allocation Units, as per the XfrIndAllocUnit property) 
            for the host file created by an IND$FILE transfer.
            </summary>
            <remarks>
            This property affects IND$FILE transfer and is applicable to 3270 sessions only.
            <para>The default is 0. The range of values is 0-32768.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrIndRecFm">
            <summary>
            Gets or sets the record format for files created on the host by an IND$FILE transfer.
            </summary>
            <remarks>
            This property affects IND$FILE transfer and is applicable to TSO 
            or CMS 3270 sessions.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>Fixed</term><description>Forces the host to create fixed-length records.</description></item>
            <item><term>Undefined</term><description>Forces the host to create files without a specific record format. (TSO hosts only.)</description></item>
            <item><term>Variable</term><description>Forces the host to create variable-length records. Use this value to preserve the format of a binary file. (The default.)</description></item> 
            <item><term>XfrRecFmDflt</term><description>The record format is determined by the host.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrIndSecAlloc">
            <summary>
            Gets or sets secondary allocations (in Allocation Units, as per the XfrIndAllocUnit property), 
            in case the primary allocation is not sufficient. 
            </summary>
            <remarks>
            The host sets the limit (generally 15) for secondary allocations (known as "extents").
            <para>This property affects IND$FILE transfer and is applicable to 3270 sessions only. </para>
            <para>The default is 0. The range of values is 0-32768.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrIndSO">
            <summary>
            Gets or sets a value indicating whether to convert shift-in (SI) characters to US (hex 1F) 
            and shift-out (SO) characters to RS (hex 1E) in JISCII files received from the host. 
            </summary>
            <remarks>
            This property is applicable only to double-byte 3270 sessions and JISCII file transfers.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrIndStrucFldSz">
            <summary>
            Gets or sets a value indicating whether Reflection uses the Write Structured Field protocol 
            for IND$FILE transfers and, if so, sets the buffer size.
            </summary>
            <remarks>
            This property affects IND$FILE transfer and is applicable to 
            3270 sessions only.
            <list type="bullet"> 
            <listheader><term>Values:</term></listheader> 
            <item><term>SFDisabled</term><description>Uses the Buffered protocol instead of the Write Structured Field protocol.</description></item>
            <item><term>SF2k</term><description>Uses the Write Structured Field protocol with a 2K buffer. (The default for the Japanese version of Reflection.)</description></item>
            <item><term>SF4k</term><description>Uses the Write Structured Field protocol with a 4K buffer. (The default for the English version of Reflection.)</description></item>
            <item><term>SF8k</term><description>Uses the Write Structured Field protocol with a 8K buffer.</description></item>
            <item><term>SF16k</term><description>Uses the Write Structured Field protocol with a 16K buffer.</description></item>
            <item><term>SF32k</term><description>Uses the Write Structured Field protocol with a 32K buffer.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrJisciiCrlf">
            <summary>
            Gets or sets a value indicating whether carriage returns and line-feed characters (CR/LF)  
            at the end of lines in JISCII files are removed (from files you send to the host) 
            or added (to files you receive from the host). 
            </summary>
            <remarks>
            CR/LF processing is typically appropriate for JISCII files, but not for binary files.
            This property is applicable to double-byte 3270 sessions only.  
            <list type="bullet"> 
            <listheader><term>Values:</term></listheader>
            <item><term>Convert</term><description>Carriage return and line-feed characters are added and removed. (The default.)</description></item>
            <item><term>Ignore</term><description>Carriage return and line-feed characters are not added and removed.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrLocalFile">
            <summary>
            Gets or sets the default file or files that the PC receives (for transfers from the host), 
            or that the host receives (for transfers to the host). 
            </summary>
            <remarks>
            This property only affects IND$FILE data transfer in 3270 sessions using the File 
            Transfer dialog box. If you transfer files programmatically 
            using the IndReceiveFile or the IndSendFile method, you must specify 
            the local filename using the LocalFile argument.When no path is given, Reflection uses the folder specified by XfrCurrentDirectory. 
            <para>Use commas to separate multiple filenames, for example:</para>
            <para> FileTransfer.XfrRemoteFile = "test1.txt, test2.txt"</para>
            <para> The default value is "". This string can contain up to 260 characters.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null (or in Visual Basic is Nothing). Use a zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrReceive8Dot3">
            <summary>
            Gets or sets a value indicating whether to truncate filenames to eight characters with a three-letter extension 
            of files received from an IBM mainframe. 
            </summary>
            <remarks>
            When this property is true, filenames that are longer than eight characters are truncated. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrSpacesToUnderscores">
            <summary>
            Gets or sets a value indicating whether to translate spaces in filenames to 
            underscores for files transferred to an IBM mainframe or AS/400.
            </summary>
            <remarks>
            When this property is set to true, spaces in PC filenames are changed to underscores. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrRemoteFile">
            <summary>
            Gets or sets the file or files that the PC receives for transfers from the host
            or that the host receives for transfers from the PC. 
            </summary>
            <remarks>
            This property only affects IND$FILE data transfers in 3270 sessions using the File Transfer dialog box.
            <para>The default value is "". This string can contain up to 260 characters.</para>
            <para>If you transfer files programmatically using the IndReceiveFile or IndSendFile method, 
            you must specify the local filename using the HostFile argument.</para>
            <para>Use commas to separate multiple filenames. For example, FileTransfer.XfrRemoteFile = "test1 data, test2 data".</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null (or in Visual Basic is Nothing). 
            Use a zero-length string to indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrHostReturnCode">
            <summary>
            Gets the numeric value returned by the transfer program 
            that indicates whether the transfer succeeded or failed. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrStartTimeout">
            <summary>
            Gets or sets the length of time (in seconds) Reflection waits for a 
            host response when attempting to connect to a host. 
            </summary>
            <remarks>
            If the specified time elapses with no response from the host, Reflection 
            times out and returns an error. 
            <para> This property affects IND$FILE transfer and is applicable to 
            3270 sessions only.</para>
            <para>The default is 25. The range of values is 1-9999.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>                        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrTimeout">
            <summary>
            Gets or sets the length of time (in seconds) that Reflection waits for a 
            host response before timing out and returning an error. 
            </summary>
            <remarks>
            Timeouts typically occur during file transfers; however, this value is 
            also used for other situations.
            <para>This property affects IND$FILE transfer and is applicable to 
            3270 sessions only.</para>
            <para>The range of values is 1-9999. The default is 60.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>                        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.FileTransfer.XfrUnderscoresToSpaces">
            <summary>
            Gets or sets a value indicating whether to translate underscores in filenames to spaces 
            for files received from an IBM mainframe or AS/400 system.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property that was secured 
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.DefaultTransferTypeOption">
            <summary>
            Specifies the default type for mainframe transfers. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefaultTransferTypeOption.Ascii">
            <summary>
            Specifies an ASCII transfer.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefaultTransferTypeOption.Binary">
            <summary>
            Specifies a binary transfer.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefaultTransferTypeOption.Jiscii">
            <summary>
            Specifies a JISCII transfer.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.INDFileTransferType">
            <summary>
            Specifies the default type for mainframe transfers.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.INDFileTransferType.Ascii">
            <summary>
            Specifies an ASCII transfer.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.INDFileTransferType.Binary">
            <summary>
            Specifies a binary transfer.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.INDFileTransferType.Jiscii">
            <summary>
            Specifies a JISCII transfer.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.FileTransferRequestType">
            <summary>
            Specifies the transfer request file type.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FileTransferRequestType.AS400">
            <summary>
            Specifies an AS400 transfer request file (.xto).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FileTransferRequestType.Mainframe">
            <summary>
            Specifies a Mainframe transfer request file (.mto).
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.FileTransferTypeOption">
            <summary>
            Specifies the transfer protocol that Reflection will use.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FileTransferTypeOption.IndFile">
            <summary>
            Specifies IND$FILE as the transfer protocol.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FileTransferTypeOption.AS400Xfer">
            <summary>
            Specifies AS/400 data transfer as the transfer protocol. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FileTransferTypeOption.Ftp">
            <summary>
            Specifies FTP as the transfer protocol. 
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.FilenameCase8Dot3Option">
            <summary>
            Specifies the filename appearance within the Transfer dialog box for files created in 16-bit applications. 
            </summary>
            <remarks>
            "Eight-dot-three" describes DOS filenames, which
            have a maximum of eight characters with a three-character extension.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FilenameCase8Dot3Option.UpperCase">
            <summary>
            Displays all 8.3 filenames in uppercase.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FilenameCase8Dot3Option.LowerCase">
            <summary>
            Displays all 8.3 filenames in lowercase.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FilenameCase8Dot3Option.PreserveCase">
            <summary>
            Displays all 8.3 filenames as returned by the file system.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ConvertCrLfOption">
            <summary>
            Specifies whether carriage returns and line-feed characters at the end of lines 
            are removed (when you send binary/ASCII files to the host) or added (when you receive these files). 
            </summary>
            <remarks>
            CR/LF processing is usually appropriate for ASCII files but not for binary files.
            This property affects  during IND$FILE transfer in and is applicable to only 3270 sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ConvertCrLfOption.Ignore">
            <summary>
            Carriage return and line-feed characters are not added or removed.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ConvertCrLfOption.Convert">
            <summary>
            Carriage return and line-feed characters are added or removed.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.TransferHostSysOption">
            <summary>
            Specifies which 3270 operating environment the host is running.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TransferHostSysOption.CMS">
            <summary>
            The host environment is CMS.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TransferHostSysOption.TSO">
            <summary>
            The host environment is TSO.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TransferHostSysOption.CICS">
            <summary>
            The host environment is CICS.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IndAllocUnitOption">
            <summary>
            Specifies the unit of disk space for your primary and secondary space allocations.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndAllocUnitOption.Default">
            <summary>
            The unit is determined by the host.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndAllocUnitOption.Cylinder">
            <summary>
            Allocations are in cylinders.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndAllocUnitOption.Track">
            <summary>
            Allocations are in tracks.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndAllocUnitOption.Block">
            <summary>
            Allocations are in blocks.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IndRecordFormatOption">
            <summary>
            Specifies the record format values for files created on the host by an IND$FILE transfer.
            </summary>
            <remarks>
            This property is applicable to TSO or CMS 3270 sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndRecordFormatOption.Default">
            <summary>
            The record format is determined by the host.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndRecordFormatOption.Fixed">
            <summary>
            Forces the host to create fixed-length records.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndRecordFormatOption.Variable">
            <summary>
            Forces the host to create variable-length records. Use this value to preserve the format of a binary file. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndRecordFormatOption.Undefined">
            <summary>
            Forces the host to create files without a specific record format. (This value is only relevant to TSO hosts.)
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IndStrucFieldSizeOption">
            <summary>
            Specifies whether Reflection uses the Write Structured Field protocol for IND$FILE transfers and determines the buffer size.
            </summary>
            <remarks>
            This property is applicable to 3270 sessions only.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndStrucFieldSizeOption.SFDisabled">
            <summary>
            Uses the Buffered protocol instead of the Write Structured Field protocol.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndStrucFieldSizeOption.SF2K">
            <summary>
            Uses the Write Structured Field protocol with a 2K buffer.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndStrucFieldSizeOption.SF4K">
            <summary>
            Uses the Write Structured Field protocol with a 4K buffer.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndStrucFieldSizeOption.SF8K">
            <summary>
            Uses the Write Structured Field protocol with a 8K buffer.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndStrucFieldSizeOption.SF16K">
            <summary>
            Uses the Write Structured Field protocol with a 16K buffer.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IndStrucFieldSizeOption.SF32K">
            <summary>
            Uses the Write Structured Field protocol with a 32K buffer.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.DefaultExistsActionOption">
            <summary>
            Defines the action that occurs with an IND$FILE transfer when the specified destination file already exists.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefaultExistsActionOption.AskUser">
            <summary>
            Prompts the user for a decision.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefaultExistsActionOption.Overwrite">
            <summary>
            Replaces the file.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefaultExistsActionOption.Append">
            <summary>
            Appends the host file or member to the file.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.DefaultExistsActionOption.OpenError">
            <summary>
            Fails the transfer and returns an error.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400AuthorityOption">
            <summary>
            Specifies the authority level associated with a file that is transferred to the host.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400AuthorityOption.All">
            <summary>
            Allows other users to view the file in a list, and to read, write to, or delete the file.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400AuthorityOption.None">
            <summary>
            Prevents other users from viewing the file in a list, and from writing to or deleting the file.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400AuthorityOption.Read">
            <summary>
            Allows other users to view the file in a list and to read it, but prevents them from writing to the file or deleting it.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400AuthorityOption.ReadWrite">
            <summary>
            Allows other users to view the file in a list, and to read it and write to it, but not delete it.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400CharSetOption">
            <summary>
            Specifies which character set to use for transfers to and from an AS/400. 
            </summary>
            <remarks>
            This property is relevant for data that contains characters with decimal values above 127. 
            (The ANSI and ASCII character sets have the same values for characters with decimal values from 32-126.)
            <para>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</para>
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400CharSetOption.AS400Ansi">
            <summary>
            ANSI character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400CharSetOption.AS400Ascii">
            <summary>
            ASCII character set.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400DateFormatOption">
            <summary>
            Specifies the date format for selected fields that have an AS/400 field type of Date.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateFormatOption.Dds">
            <summary>
            Format given by AS/400 file attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateFormatOption.Default">
            <summary>
            AS/400 job default.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateFormatOption.DateMonthYear">
            <summary>
            Date, month, year (dd/mm/yy).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateFormatOption.European">
            <summary>
            IBM European standard (dd.mm.yyyy).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateFormatOption.Iso">
            <summary>
            International Standards Organization (yyyy/mm/dd).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateFormatOption.Jis">
            <summary>
            Japanese Industrial Standard (yyyy-mm-dd).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateFormatOption.Julian">
            <summary>
            (yy/ddd).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateFormatOption.MonthDateYear">
            <summary>
            Month, date, year (mm/dd/yy).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateFormatOption.Usa">
            <summary>
            USA standard (mm/dd/yyyy).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateFormatOption.YearMonthDate">
            <summary>
            Year, month, date (yy/mm/dd).
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400DateSeparatorOption">
            <summary>
            Specifies the character to use as a date separator in selected fields that have an AS/400 field type of Date.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateSeparatorOption.Blank">
            <summary>
            ( )
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateSeparatorOption.Comma">
            <summary>
            (,)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateSeparatorOption.Dash">
            <summary>
            (-)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateSeparatorOption.Default">
            <summary>
            AS/400 job default.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateSeparatorOption.Null">
            <summary>
            Absence of any separator.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateSeparatorOption.Period">
            <summary>
            (.)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DateSeparatorOption.Slash">
            <summary>
            (/)
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400DecimalSeparatorOption">
            <summary>
            Specifies a character to use as a decimal separator in selected fields 
            that have an AS/400 field type of packed decimal or zoned decimal.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DecimalSeparatorOption.Comma">
            <summary>
            (,)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DecimalSeparatorOption.Default">
            <summary>
            AS/400 job default.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400DecimalSeparatorOption.Period">
            <summary>
            (.)
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400HostFileTypeOption">
            <summary>
            Specifies which type of host file to create (for AS/400 data transfer in 5250 sessions).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400HostFileTypeOption.Data">
            <summary>
            Creates an AS/400 physical data file and member.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400HostFileTypeOption.Source">
            <summary>
            Creates an AS/400 physical source file and member.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption">
            <summary>
            Specifies which character set Reflection uses for character translations during AS/400 data transfers.
            </summary>
            <remarks>
            This property is only relevant for 5250 sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.Belgian">
            <summary>
            Reflection uses the Belgian character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.CanadianFrench">
            <summary>
            Reflection uses the Canadian French character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.Danish">
            <summary>
            Reflection uses the Danish character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.EastEurope">
            <summary>
            Reflection uses the Eastern Europe character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.Finnish">
            <summary>
            Reflection uses the Finnish character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.French">
            <summary>
            Reflection uses the French character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.German">
            <summary>
            Reflection uses the German character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.Greek">
            <summary>
            Reflection uses the Greek character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.Icelandic">
            <summary>
            Reflection uses the Icelandic character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.Italian">
            <summary>
            Reflection uses the Italian character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.Multilingual">
            <summary>
            Reflection uses the Multilingual character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.Norwegian">
            <summary>
            Reflection uses the Norwegian character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.Portuguese">
            <summary>
            Reflection uses the Portuguese character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.Spanish">
            <summary>
            Reflection uses the Spanish character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.Swedish">
            <summary>
            Reflection uses the Swedish character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.Swiss">
            <summary>
            Reflection uses the Swiss character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.UKEnglish">
            <summary>
            Reflection uses the UK English character set.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400NationalCharSetOption.USEnglish">
            <summary>
            Reflection uses the US English character set.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400ObjectsOption">
            <summary>
            Specifies whether to tranfer data to a new member on the AS/400 or to an existing member, 
            and whether the file that contains the member already exists. (5250 sessions only.)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400ObjectsOption.CreateFileAndMember">
            <summary>
            Creates a new member within a new host file.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400ObjectsOption.CreateMember">
            <summary>
            Creates a new member within an existing host file.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400ObjectsOption.RepMemberConf">
            <summary>
            Sends to an existing member in an existing file. Before overwriting the existing member, Reflection asks you to confirm the overwrite action.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400ObjectsOption.RepMember">
            <summary>
            Sends to an existing member in an existing file. Reflection does not prompt you to confirm the overwrite action before overwriting the existing member.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400OutputDestinationOption">
            <summary>
            Specifies whether host data should be received to a PC file or to your display.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400OutputDestinationOption.Display">
            <summary>Receives host data to your display.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400OutputDestinationOption.File">
            <summary>
            Receives host data to the file specified by the Xfr400LocalFile property.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400OutputDestinationOption.Spreadsheet">
            <summary>
            Receives host data to a DIF file. 
            </summary>
            <remarks>
            If you have a spreadsheet program on your PC that has a Windows association 
            with DIF files, selecting this option also opens the DIF file in that program.
            </remarks>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400ReceiveConversionOption">
            <summary>
            Specifies a conversion format for a file being received from an AS/400.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400ReceiveConversionOption.Ascii">
            <summary>
            Appropriate for files with no special formatting and fixed record widths.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400ReceiveConversionOption.BasicSeq">
            <summary>
            Separates all fields with commas and inserts quotation marks around character and hexadecimal fields.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400ReceiveConversionOption.CommaDelimiter">
            <summary>
            Separates fields with commas, but only inserts quotation marks around character fields that contain a comma or quotation mark.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400ReceiveConversionOption.DosRandom">
            <summary>
            Appropriate with host database applications that require data to be in this format.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400ReceiveConversionOption.NoConversion">
            <summary>
            Use for files that should not be translated.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400ReceiveConversionOption.TabDelimiter">
            <summary>
            Separates all fields with tabs and inserts quotation marks around character fields that contain a quotation mark.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400ReceiveConversionOption.Dif">
            <summary>
            Use for files transferred to and from Microsoft Excel. DIF files contain the names of the fields.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400SendConversionOption">
            <summary>
            Specifies a conversion format for files received from an AS/400.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400SendConversionOption.Ascii">
            <summary>
            Appropriate for files with fixed record widths and no special formatting. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400SendConversionOption.BasicSeq">
            <summary>
            Separates fields with commas and inserts quotation marks around character and hexadecimal fields. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400SendConversionOption.CommaDelimiter">
            <summary>
            Separates fields with commas and inserts quotation marks around character fields that contain either a comma or a quotation mark.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400SendConversionOption.DosRandom">
            <summary>
            Appropriate with host database applications that require data to be in this format.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400SendConversionOption.NoConversion">
            <summary>
            Use for files that should not be translated.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400SendConversionOption.TabDelimiter">
            <summary>
            Separates fields with tabs and inserts quotation marks around character fields that contain a quotation mark. 
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeFormatOption">
            <summary>
            Specifies the time format for selected fields that have an AS/400 field type of Time. 
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeFormatOption.Dds">
            <summary>
            Format given by a AS/400 file attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeFormatOption.Default">
            <summary>
            AS/400 job default.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeFormatOption.European">
            <summary>
            IBM European standard (hh.mm.ss).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeFormatOption.HourMinuteSecond">
            <summary>
            Hour, minute, second (hh:mm:ss).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeFormatOption.Iso">
            <summary>
            International Standards Organization (hh.mm.ss).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeFormatOption.Jis">
            <summary>
            Japanese Industrial standard (hh:mm:ss).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeFormatOption.Usa">
            <summary>
            USA standard (hh:mm AM or PM).
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeSeparatorOption">
            <summary>
            Specifies the character to use as a time separator in selected fields having an AS/400 field type of Time.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeSeparatorOption.Blank">
            <summary>
            ( )
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeSeparatorOption.Colon">
            <summary>
            (:)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeSeparatorOption.Comma">
            <summary>
            (,)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeSeparatorOption.Default">
            <summary>
            AS/400 job default.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeSeparatorOption.Null">
            <summary>
            Absence of any separator.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TimeSeparatorOption.Period">
            <summary>
            (.)
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400TransportOption">
            <summary>
            Specifies the protocol to use.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.    
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400TransportOption.LipiTcp">
            <summary>
            Use TCP/IP
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.AS400HostTPOption">
            <summary>
            Specifies which transation program to use.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400HostTPOption.Ehntfw">
            <summary>
            Use EHNTFW transaction program.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.AS400HostTPOption.Lipi">
            <summary>
            Use LIPI transaction program.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.FindOption">
            <summary>
            Determines the direction in which to search for text on the screen.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FindOption.Forward">
            <summary>
            Searches forward from the current screen position.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.FindOption.Backward">
            <summary>
            Searches backward from the current screen position.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption">
            <summary>
            Defines valid values for the color of the graphics cross-hair cursor in a 3179G terminal session.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.Black">
            <summary>
            The cursor is black.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.Blue">
            <summary>
            The cursor is blue.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.Cyan">
            <summary>
            The cursor is cyan.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.Grey">
            <summary>
            The cursor is grey.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.Green">
            <summary>
            The cursor is green.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.Magenta">
            <summary>
            The cursor is magenta.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.Red">
            <summary>
            The cursor is red.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.White">
            <summary>
            The cursor is white.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.Yellow">
            <summary>
            The cursor is yellow.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.DarkBlue">
            <summary>
            The cursor is dark blue.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.DarkCyan">
            <summary>
            The cursor is dark cyan.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.DarkGrey">
            <summary>
            The cursor is dark grey.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.DarkGreen">
            <summary>
            The cursor is dark green.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.DarkMagenta">
            <summary>
            The cursor is dark magenta.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.DarkRed">
            <summary>
            The cursor is dark red.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCrosshairColorOption.DarkYellow">
            <summary>
            The cursor is dark yellow.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCursorShapeOption">
            <summary>
            Defines valid values for the shape of the graphics cursor in 3179G terminal sessions.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCursorShapeOption.Cross">
            <summary>
            The cursor is a small, white cross (approximately 20 by 20 pixels).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCursorShapeOption.InvertedCrosshair">
            <summary>
            The cursor is a cross hair that spans the entire display and 
            changes color in response to the background to remain visible.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsCursorShapeOption.ColorCrosshair">
            <summary>
            The cursor is a cross hair that spans the entire display.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.GraphicsDeviceOption">
            <summary>
            Defines valid values for the type of graphics device Reflection emulates for
            3179G terminal sessions. 
            </summary>
            <remarks>
            You cannot change this property when you are connected to a host.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsDeviceOption.Ibm3179G">
            <summary>
            Configures Reflection as an IBM 3179G graphics terminal.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsDeviceOption.Gddmpcg">
            <summary>
            Configures Reflection as an GDDM PCG graphics terminal.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GraphicsDeviceOption.Gddmpcgx">
            <summary>
            Configures Reflection as an GDDM PCGX graphics terminal.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption">
            <summary>
            Defines valid values for the host code page character set used for character translations.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Arabic">
            <summary>
            Arabic code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Austrian">
            <summary>
            Austrian code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.AustrianEuro">
            <summary>
            Austrian Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Baltic">
            <summary>
            Baltic code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.BalticEuro">
            <summary>
            Baltic Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Belgian">
            <summary>
            Belgian code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.BelgianEuro">
            <summary>
            Belgian Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.BelgianNew">
            <summary>
            Belgian New code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.BelgianNewEuro">
            <summary>
            Belgian New Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.CanadianFrench">
            <summary>
            Canadian French code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.CanadianFrenchEuro">
            <summary>
            Canadian French Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.SimplifiedChinese">
            <summary>
            Simplified Chinese code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.TraditionalChinese">
            <summary>
            Traditional Chinese code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Cyrillic">
            <summary>
            Cyrillic code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Danish">
            <summary>
            Danish code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.DanishEuro">
            <summary>
            Danish Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.EastEurope">
            <summary>
            Eastern Europe code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Finnish">
            <summary>
            Finnish code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.FinnishEuro">
            <summary>
            Finnish Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.French">
            <summary>
            French code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.FrenchEuro">
            <summary>
            French Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.German">
            <summary>
            German code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.GermanEuro">
            <summary>
            German Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Greek">
            <summary>
            Greek code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Hebrew">
            <summary>
            Hebrew code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Icelandic">
            <summary>
            Icelandic code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.IcelandicEuro">
            <summary>
            Icelandic Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Italian">
            <summary>
            Italian code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.ItalianEuro">
            <summary>
            Italian Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.JapaneseEnglish">
            <summary>
            Japanese English code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.JapaneseKatakana">
            <summary>
            Japanese Katakana code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.JapaneseKatakanaExt">
            <summary>
            Japanese Katakana Extended code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.JapaneseExtended">
            <summary>
            Japanese Extended code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Korean">
            <summary>
            Korean code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.KoreanExtended">
            <summary>
            Korean Extended code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Multilingual">
            <summary>
            Multilingual code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.MultilingualEuro">
            <summary>
            Multilingual Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Netherlands">
            <summary>
            Dutch code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.NetherlandsEuro">
            <summary>
            Dutch Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Norwegian">
            <summary>
            Norwegian code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.NorwegianEuro">
            <summary>
            Norwegian Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Portuguese">
            <summary>
            Portuguese code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.PortugueseEuro">
            <summary>
            Portuguese Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Spanish">
            <summary>
            Spanish code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.SpanishEuro">
            <summary>
            Spanish Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Swedish">
            <summary>
            Swedish code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.SwedishEuro">
            <summary>
            Swedish Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Swiss">
            <summary>
            Swiss code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.SwissEuro">
            <summary>
            Swiss Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Thai">
            <summary>
            Thai code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.SwissFrench">
            <summary>
            Swiss French code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.SwissFrenchEuro">
            <summary>
            Swiss French Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.SwissGerman">
            <summary>
            Swiss German code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.SwissGermanEuro">
            <summary>
            Swiss German Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.Turkish">
            <summary>
            Turkish code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.UKEnglish">
            <summary>
            United Kingdom English code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.UKEnglishEuro">
            <summary>
            United Kingdom English Euro code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.USEnglish">
            <summary>
            United States English code page.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostCodePageOption.USEnglishEuro">
            <summary>
            United States English Euro code page.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.HostField">
            <summary>
            Represents (on a host screen) a field with field attributes, 
            start position, and field length.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HostField.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the HostField class.
            </summary>
            <param name="startRow">Starting row position.</param>
            <param name="startColumn">Starting column position.</param>
            <param name="length">Field length.</param>
            <param name="endRow">Ending row position.</param>
            <param name="endColumn">Ending column position.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HostField.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the HostField class.
            </summary>
            <param name="startRow">Starting row position.</param>
            <param name="startColumn">Starting column position.</param>
            <param name="length">Field length.</param>
            <param name="endRow">Ending row position.</param>
            <param name="endColumn">Ending column position.</param>
            <param name="text">Field text.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HostField.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes,Attachmate.Reflection.Emulation.IbmHosts.ScreenColor)">
            <summary>
            Initializes a new instance of the HostField class.
            </summary>
            <param name="startRow">Starting row position.</param>
            <param name="startColumn">Starting column position.</param>
            <param name="length">Field length.</param>
            <param name="endRow">Ending row position.</param>
            <param name="endColumn">Ending column position.</param>
            <param name="text">Field text.</param>
            <param name="attributes">Field attributes.</param>
            <param name="foregroundColor">Field foreground color.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HostField.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes,Attachmate.Reflection.Emulation.IbmHosts.ScreenColor,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HostField class.
            </summary>
            <param name="startRow">Starting row position.</param>
            <param name="startColumn">Starting column position.</param>
            <param name="length">Field length.</param>
            <param name="endRow">Ending row position.</param>
            <param name="endColumn">Ending column position.</param>
            <param name="text">Field text.</param>
            <param name="attributes">Field attributes.</param>
            <param name="foregroundColor">Field foreground color.</param>
            <param name="characterSpecificAttributes">Flag indicating whether each character in the field is examined for character-specific attributes.</param>
            <param name="attributeSpace">Flag indicating whether field attributes occupy space on the screen (true) or not (false). </param>
            <param name="modified">Field modified tag</param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.StartRow">
            <summary>
            <c>Gets</c> field start row.
            </summary>
            <example>
            <code>
            private HostField host;
            int startRow = host.StartRow; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.StartColumn">
            <summary>
            <c>Gets</c> field start column.
            </summary>
            <example>
            <code>
            private HostField host;
            int startColumn = host.StartColumn; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.StartPosition">
            <summary>
            <c>Gets</c> the column and row coordinates of this field.
            </summary>
            <example>
            <code>
            HostField host;
            ScreenPoint point;
            
            //Get the screen position (row , column)
            point = host.StartPosition;
            
            int row = point.Row;//Get the row location.
            int column = point.Column;//Get the column location.
            
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.EndRow">
            <summary>
            <c>Gets</c> field end row.
            </summary>
            <example>
            <code>
            private HostField host;
            int endRow = host.EndRow; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.EndColumn">
            <summary>
            <c>Gets</c> field end column.
            </summary>
            <example>
            <code>
            private HostField host;
            int EndColumn = host.EndColumn; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.EndPosition">
            <summary>
            <c>Gets</c> the column and row coordinates of the end position.
            </summary>
            <example>
            <code>
            HostField host;
            ScreenPoint point;
            
            //Get the screen position (row , column)
            point = host.EndPosition;
            
            int row = point.Row;//Get the row location.
            int column = point.Column;//Get the column location.
            
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.Attributes">
            <summary>
            <c>Gets</c> a bit mask that contains all of the field attributes.
            </summary>
            <example>
            <code>
            HostField host;
            FieldAttributes attribute;
            
            //Get FieldAttributes.
            attribute = host.Attributes; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.ContainsCharacterSpecificAttributes">
            <summary>
            <c>Gets</c> a value indicating whether each character in the field 
            is examined for character-specific attributes.
            </summary>
            <example>
            <code>
            HostField host;
            bool ContainsChar = host.ContainsCharacterSpecificAttributes; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.Length">
            <summary>
            <c>Gets</c> the length of this field, including field attributes.
            </summary>
            <remarks>To determine the text length, use String.length on the string returned by <c>IIbmScreen.GetText()</c>.
            This returns the number of elements in the field. <seealso cref="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.GetText(System.Int32,System.Int32,System.Int32)"/>
            </remarks>
            <example>
            <code>
            HostField host;
            int FieldLength = host.Length; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsModified">
            <summary>
            <c>Gets</c> a value indicating whether the field has been modified. 
            </summary>
            <remarks>
            It returns <c>true</c> if the field has been modified.
            </remarks>
            <example>
            <code>
            HostField host;
            bool IfFieldModified = host.IsModified; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsAttributeSpace">
            <summary>
            <c>Gets</c> a value indicating whether field attributes occupy space on the screen.
            </summary>
            <remarks>
            It returns <c>true</c> if field attributes occupy screen space.
            </remarks>
            <example>
            <code>
            HostField host;
            bool AttributesSpace = host.IsAttributesSpace; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.Text">
            <summary>
            <c>Gets</c> field text.
            </summary>
            <example>
            <code>
            HostField host;
            string FieldText = host.Text; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.ForegroundColor">
            <summary>
            	<c>Gets</c> the foreground color for the specified terminal attribute.</summary>
            <example>
            	<code title="" description="" lang="CS">
            HostField host;
            ScreenColor scrColor;
            //Get the foreground color.
            scrColor = host.ForegroundColor;</code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsAplCharacterSet">
            <summary>
            <c>Gets</c> a value indicating whether the data cell 
            is displayed with APL characters.
            </summary>
            <example>
            <code>
            HostField host;
            bool CharSet = host.IsAlpCharacterSet; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsDefaultDisplay">
            <summary>
            <c>Gets</c> a value indicating whether the data cell is displayed with default attributes.
            </summary>
            <example>
            <code>
            HostField host;
            bool display = host.IsDefaultDisplay; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsBlinking">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains blinking text.
            </summary>
            <example>
            <code>
            HostField host;
            bool blinking = host.IsBlinking; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsReverse">
            <summary>
            <c>Gets</c> a value indicating whether the data cell is 
            displayed in reverse video mode.
            </summary>
            <example>
            <code>
            HostField host;
            bool reverse = host.IsReverse; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsStrikethrough">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains strikethrough text.
            </summary>
            <example>
            <code>
            HostField host;
            bool strike = host.IsStrikeThrough; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsUnderline">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains underlined text.
            </summary>
            <example>
            <code>
            HostField host;
            bool underline = host.IsUnderline; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsOverline">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains overlined text.
            </summary>
            <example>
            <code>
            HostField host;
            bool overline = host.IsOverline; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsColumnSeparator">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains a column separator.
            </summary>
            <example>
            <code>
            HostField host;
            bool columnSeparator = host.IsColumnSeparator; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsVisible">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains visible text.
            </summary>
            <example>
            <code>
            HostField host;
            bool visible = host.IsVisible; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsHighIntensity">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains high intensity text.
            </summary>
            <example>
            <code>
            HostField host;
            bool intensity = host.IsHighIntensity; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsLightPenField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a light pen field.
            </summary>
            <example>
            <code>
            HostField host;
            bool lightPenfield = host.IsLightPenField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsAlphaOnlyField">
            <summary>
            <c>Gets</c> a value indicating whether the field is an alpha-only field.
            </summary>
            <example>
            <code>
            HostField host;
            bool AlphaField = host.IsAlphaOnlyField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsRightJustifiedField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a right-aligned field.
            </summary>
            <example>
            <code>
            HostField host;
            bool rightJustified = host.IsRightJustifiedField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsNumericShiftField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a numeric shift field.
            </summary>
            <example>
            <code>
            HostField host;
            bool numericShiftField = host.IsNumericShiftField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsNumericOnlyField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a numeric-only field.
            </summary>
            <example>
            <code>
            HostField host;
            bool numericField = host.IsNumericOnlyField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsDigitsField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a digits field.
            </summary>
            <example>
            <code>
            HostField host;
            bool digitsField = host.IsDigitsField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsSignedNumericField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a signed numeric field.
            </summary>
            <example>
            <code>
            HostField host;
            bool signedNumericField = host.IsSignedNumericField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsMagneticStripField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a magnetic strip field.
            </summary>
            <example>
            <code>
            HostField host;
            bool magneticStripField = host.IsMagneticStripField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsUserField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a user field.
            </summary>
            <example>
            <code>
            HostField host;
            bool userField = host.IsUserField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsMessageField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a message field.
            </summary>
            <example>
            <code>
            HostField host;
            bool messageField = host.IsMessageField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsBlockField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a block field.
            </summary>
            <example>
            <code>
            HostField host;
            bool blockField = host.IsBlockField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsProtectedField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a protected field.
            </summary>
            <example>
            <code>
            HostField host;
            bool protectField = host.IsProtectField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsDupField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a duplicate format control order field.
            </summary>
            <example>
            <code>
            HostField host;
            bool dupField = host.IsDupField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsAutoEnterField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a auto enter field.
            </summary>
            <example>
            <code>
            HostField host;
            bool autoEnterField = host.IsAutoEnterField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsExitRequiredField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a exit-required field.
            </summary>
            <example>
            <code>
            HostField host;
            bool exitRequired = host.IsExitRequiredField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsUppercaseField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a uppercase field.
            </summary>
            <example>
            <code>
            HostField host;
            bool uppercaseField = host.IsUppercaseField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsMandatoryEntryField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a mandatory entry field.
            </summary>
            <example>
            <code>
            HostField host;
            bool entryField = host.IsMandatoryEntryfield; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsMandatoryFillField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a mandatory fill field.
            </summary>
            <example>
            <code>
            HostField host;
            bool fillField = host.IsMandatoryFillField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsRightAdjustZeroFillField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a right-adjust, zero-fill field.
            </summary>
            <example>
            <code>
            HostField host;
            bool rightAdjustFillField = host.IsRightAdjustZeroFillField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsRightAdjustBlankFillField">
            <summary>
            <c>Gets</c> a value indicating whether the field is a right-adjust, blank-fill field.
            </summary>
            <example>
            <code>
            HostField host;
            bool BlankField = host.IsRightAdjustBlankFillField; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsDbcsField">
            <summary>
            Gets a value indicating whether the field is of any DBCS field type.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsDbcsOnlyField">
            <summary>
            Gets a value indicating whether the field is a DBCS Only field.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsDbcsPureField">
            <summary>
            Gets a value indicating whether the field is a DBCS Pure field.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsDbcsMixed">
            <summary>
            Gets a value indicating whether the field is a DBCS Mixed field.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsDbcsEither">
            <summary>
            Gets a value indicating whether the field is a DBCS Either field.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsDbcsOpen">
            <summary>
            Gets a value indicating whether the field is a DBCS Open field.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HostField.IsDbcsGraphics">
            <summary>
            Gets a value indicating whether the field is a DBCS Graphics field.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HostField.ToString">
            <summary>
            Gets the field in a string format.
            </summary>
            <returns>Returns value as string.</returns>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.HostKeyboardTypeOption">
            <summary>
            Defines options that specify which keys can be used in numeric fields. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostKeyboardTypeOption.Normal">
            <summary>
            Only number keys (on the keyboard and the numeric keypad) 
            and certain symbol keys (PLUS SIGN, MINUS SIGN, PERIOD, and COMMA) can be used.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostKeyboardTypeOption.Typewriter">
            <summary>
            Only SHIFT key combinations that produce uppercase letters and symbols 
            (such as !, @, and #), and number keys on the keypad can be used.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostKeyboardTypeOption.DataEntry">
            <summary>
            All keys can be used.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.HostSystem">
            <summary>
            Options for the host operating system for 3270 file transfer.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostSystem.Cms">
            <summary>
            The host environment is CMS.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostSystem.Tso">
            <summary>
            The host environment is TSO.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.HostSystem.Cics">
            <summary>
            The host environment is CICS.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.HotSpots">
            <summary>
            Hot spot object, defines the set of properties and methods related to hotspots.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IHotSpots)">
            <summary>
            Initializes a new instance of the HotSpots class.
            </summary>
            <param name="hotspots">
            The server side hotspots instance
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.HotSpotsEnabled">
            <summary>
            Gets or sets a value indicating whether hotspots are enabled.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.HotSpotsVisible">
            <summary>
            Gets or sets a value indicating whether hotspots are visible.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.MRUHotSpotColumn">
            <summary>
            Gets the most recently used hotspot column position.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.MRUHotSpotLength">
            <summary>
            Gets the most recently used hotspot length.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.MRUHotSpotRow">
            <summary>
            Gets the most recently used hotspot row position.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.MRUHotSpotText">
            <summary>
            Gets the most recently used hotspot text.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.HotSpotStyle">
            <summary>
            Gets or sets a value indicating the way that hotspots should appear on the screen.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.HotspotsMouseButton">
            <summary>Gets or sets a value indicating the mouse button used to invoke hotspots.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.HotspotsDoubleClick">
            <summary>Gets or sets a value indicating whether a double click is required to activate the hotspot.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.HotspotsShiftKey">
            <summary>Gets or sets a value indicating whether the Shift key must be used in conjunction with the mouse to activate the hotspot.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.HotspotsCtrlKey">
            <summary>Gets or sets a value indicating whether the Ctrl key must be used in conjunction with the mouse to activate the hotspot.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.HotspotsAltKey">
            <summary>Gets or sets a value indicating whether the Alt key must be used in conjunction with the mouse to activate the hotspot.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.MatchCase">
            <summary>Gets or sets a value indicating whether hotspots are case sensitive.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.SpaceDelimiter">
            <summary>Gets or sets a value indicating whether the whitespace created by pressing the spacebar is to be used as a hotspots delimiter.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.UseOtherDelimiters">
            <summary>
            Gets or sets a value indicating whether the contents of the OtherDelimiters property are to be used as additional hotspots delimiters.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.OtherDelimiters">
            <summary>
            Gets or sets a value indicating other character(s) to use as hotspot delimiters when the UseOtherDelimiters property is set to true.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.HotspotsMap">
            <summary>Gets or sets the current hotspots definition file.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.MappingCollection">
            <summary>
            Gets a set of all the hotspots that have been mapped in the current hotspot map.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.DefaultHotspotMapName">
            <summary>Gets the path and filename that the Save method saves a hotspot to when the location defined by the HotspotsMap property is read-only.</summary>
            <remarks>The Save method saves the in-memory hotspot collection to the hotspot file defined by the HotspotsMap property. However, if that location points at a read-only
            location such as the built-ins folder underneath program files\Micro Focus\reflection where files cannot be written to, then the Save method saves the file in
            the user's documents area (e.g. Documents\Micro Focus\Reflection\Hotspots Maps) under the name of the active session.</remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.UnprotectedFieldHotSpots">
            <summary>
            Gets or sets a value indicating whether hotspots are enabled in unprotected fields on the host screen.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.ConfigureHotSpots(System.String)">
            <summary>
            Loads the hotspots file as the current hotspots definitions.
            </summary>
            <param name="hotSpotsFilePath">Hotspots file path</param>
            <returns>Method return code</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.Clear">
            <summary>
            Removes all items from the hotspots map, resulting in an empty map.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.AddHotspot(Attachmate.Reflection.Emulation.IbmHosts.Hotspot)">
            <summary>
            Adds a new hotspot to the current hotspot map. If a hotspot with the specified text already
            exists, subject to the existing hotspot's case sensitivity property, it is removed prior to the new hotspot being added.
            </summary>
            <param name="hs">The hotspot to be added</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.RemoveHotspotByText(System.String,System.Boolean)">
            <summary>
            Removes all hotspots with the specified text from the currrent hotspot map. 
            </summary>
            <param name="hotspotText">Remove all hotspots with this text value</param>
            <param name="caseSensitive">Whether to remove hotspots with the specified text, regardless of case</param>
            <remarks>Does nothing if no match is found.</remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.RemoveHotspot(Attachmate.Reflection.Emulation.IbmHosts.Hotspot)">
            <summary>
            Removes a hotspot with the specified characteristics from the currrent hotspot map. 
            </summary>
            <param name="hotspot">The hotspot to remove</param>
            <remarks>Does nothing if no match is found.</remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.Contains(System.String,System.Boolean)">
            <summary>
            Gets a value indicating whether there is a hotspot with the specified text in the current hotspot map.
            </summary>
            <param name="hotspotText">The hotspot text</param>
            <param name="caseSensitive">Whether to look for hotspots with the specified text, regardless of case</param>
            <returns>True if there is a hotspot with the specified text in the current hotspot map, false if not</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.Save">
            <summary>
            Saves changes to current hotspots map. If the current hotspots map (identified by the HotspotsMap property)
            resides in the installation directory and cannot be written to, the map is saved to the current user's Hotspots Maps subfolder
            underneath the Reflection folder, using the terminal session name as the hotspot map filename. 
            </summary>
            <returns>One of the ReturnCode enumerated values, unless an exception has been thrown</returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while trying to save the hotspots map.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to save the hotspots map.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.SaveAs(System.String)">
            <summary>
            Saves current hotspots map contents to a file.
            </summary>
            <param name="pathName">The path to the new hotspots map file</param>
            <returns>One of the ReturnCode enumerated values</returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while trying to save the hotspots map.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to save the hotspots map.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.HotSpots.ApplyCurrentHotspots">
            <summary>Sends and applies the current hotspot map contents to the host session.</summary>
            <returns>One of the ReturnCode enumeration values</returns>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IbmHostsException">
            <summary>
            Exception object thrown by IbmHosts objects to indicate a error condition.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmHostsException.#ctor">
            <summary>
            Initializes a new instance of the IbmHostsException class.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmHostsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IbmHostsException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmHostsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the IbmHostsException class with a specified error message and a reference
             to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmHostsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Initializes a new instance of the Attachmate.Reflection.Emulation.IbmHosts.IbmHostsException class with serialized
             data.
             </summary>
             <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                 object data about the exception being thrown.
             </param>
             <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                 information about the source or destination.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmHostsException.#ctor(Attachmate.Reflection.ErrorCode,System.String)">
            <summary>
            Initializes a new instance of the <c>Attachmate.Reflection.Emulation.IbmHosts.IbmHostsException</c> class with a specified
            error message.
            </summary>
            <param name="errorCode">Indicates the error condition.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmHostsException.ErrorCode">
            <summary>
            Returns the error code associated with this exception.
            </summary>
            <example>
            <code>
            IbmHostsException host;
            ErrorCode error = host.ErrorCode;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmHostsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize
            the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context"> The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <example>
            <code>
            IbmHostsException host;
            host.GetObjectData(System.Runtime.Serialization.SerializationInfo serialInfo,
                               System.Runtime.Serialization.StreamingContext context);
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen">
            <summary>
            IbmScreen object represents host screen data.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen,Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen"/> class. 
            The constructor, for internal use.
            </summary>
            <param name="screen">
            The server-side IbmScreen instance
            </param>
            <param name="terminal">
            The parent IbmTerminal instance.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.AutoCopyOnSelect">
            <summary>
            Gets or sets a value indicating whether the terminal automatically copies selected text
            to the Clipboard. 
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.AutoCopyOnSelect = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.BlanksBetweenFields">
            <summary>
            Gets or sets the number of blank spaces in a row between columns
            for tab-delimited data.
            </summary>
            <remarks>
            This setting works in conjunction with the UseTableFormat property to determine where columns exist in 
            tab-delimited information on the Clipboard.
            <para>The default value is 2. The range of values is 1 to 16.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.BlankBetweenFields = 10;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ClearSelectionOnCopy">
            <summary>
            Gets or sets a value indicating whether text remains selected after it is copied to the Clipboard. 
            </summary>
            <remarks>When this setting is enabled, the terminal automatically deselects text after it
            is copied to the Clipboard.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.ClearSelectionOnCopy = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CopyInputFieldsOnly">
            <summary>
            Gets or sets a value indicating whether a copy (cut or append) operation
            puts values in unprotected input fields on the Clipboard. 
            </summary>
            <remarks>
            <para>This property is useful for working with form-oriented host applications.</para>
            If this property is true, the terminal replaces protected characters with
            spaces. If this property is false, protected and unprotected characters
            are treated identically.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.CopyInputFieldsOnly = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CopyTrailingSpaces">
            <summary>
            Gets or sets a value indicating whether the terminal will copy the character
            spaces trailing a selection when text is copied to the Clipboard.
            </summary>
            <remarks>
            When this property is false, the terminal does not copy trailing spaces
            to the Clipboard. When it is true, the terminal includes trailing spaces
            in text copied to the Clipboard.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.CopyTrailingSpaces = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CutFillCharacter">
            <summary>
            Gets or sets whether Cut and Clear actions replace characters
            with nulls or spaces.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader> 
            <item>
                <term>SpaceCharacter</term>
                <description>Cut and cleared characters are replaced with spaces. (The default.)</description> 
            </item>
            <item>
                <term>NullCharacter</term>
                <description>Cut and cleared characters are replaced with nulls.</description>
            </item>
            </list>
            </remarks>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.CutFillCharacter = CutFillCharacterOption.SpaceCharacter;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteReplaceTabs">
            <summary>
            Gets or sets a value indicating whether to replace tabs in the Clipboard's contents
            with a specified string before pasting the selection in a host 
            application. 
            </summary>
            <remarks>
            The PasteTabReplacement property defines the string.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.PasteReplaceTabs = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteTabReplacement">
            <summary>
            Gets or sets the <c>string</c> that replaces tabs, if the PasteReplaceTabs setting is set to true.
            </summary>
            <remarks>
            Any random set of characters is acceptable, including character spaces. 
            The PasteReplaceTabs property must be set to true.
            The string can be up to 260 characters long.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.PasteTabReplacment = "aaaabbbbccc";
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteUsingFieldDelimiters">
            <summary>
            Gets or sets a value indicating whether the terminal will 
            attempt to paste on the next row at the same column location where the 
            paste began.  
            </summary>
            <remarks>
            When the value is false, pasting stops, and any
            text remaining in the clipboard is placed into the PasteNext buffer. 
            <para>When the value is true, the terminal continues to search for subsequent 
            fields, searching first right and then down, until it finds another 
            unprotected field. If an unprotected field is located, pasting starts
            in this field; if not pasting stops and any remaining text is put into 
            the PasteNext buffer.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.PasteUsingFieldDelimiters = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteWrapText">
            <summary>
            Gets or sets a value indicating whether text to be pasted will wrap to the next field when it exceeds the
            current line length. </summary>
            <remarks>
            If this value is true, remaining text in the line
            is pasted at the start of the next field. If it is false, the terminal
            truncates the current line and begins pasting at the next field with
            the beginning of a new line. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.PasteWrapText = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteWrapDown">
            <summary>
            Gets or sets a value indicating whether pasted text should be wrapped to the field below
            (instead of to the field to the right).
            </summary>
            <remarks>
            If this value is true, the text is wrapped to the field below the current field.
            If it is false, the text is wrapped to the next input field to the right. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.PasteWrapDown = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteIgnoreFieldType">
            <summary>Gets or sets a value indicating whether to bypass any input field if it is input inhibited and
            continue pasting into the next input field.
            This property applies to 5250 terminal sessions only.
            </summary>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CursorColumn">
            <summary>
            Gets or sets the current cursor column location relative to the left edge of the terminal window. 
            CursorRow returns the row location.
            </summary>
            <remarks>
            The value of this property can be changed with the MoveCursor or MoveCursorTo methods 
            as well as by keyboard and mouse actions.
            </remarks>
            <example>
            <code>
            IbmScreen screen;
            screen.CursorColumn = 5; // 5 is value of cursor column location.
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CursorRow">
            <summary>
            Gets or sets the current cursor row location relative to the top edge of the terminal window. 
            CursorColumn returns the column location.
            </summary>
            <remarks>
            The value of this property can be changed with the MoveCursor or MoveCursorTo methods as
            well as by keyboard and mouse actions.
            </remarks>
            <example>
            <code>
            IbmScreen screen;
            screen.CursorRow = 5; // 5 is value of cursor row location
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.Columns">
            <summary>
            <c>Gets</c> the number of columns of the screen.
            </summary>
            <example>
            <code>
            IbmScreen screen;
            int NumberOfColumns = screen.Columns;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.EnableHotSpots">
            <summary>
            <c>Gets</c> or <c>sets</c> a value indicating whether hotspots can be used. 
            </summary>
            <remarks>
            The default is true.
            When EnableHotspots is set to false, hotspots are not displayed 
            regardless of the value of the ShowHotspots property.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.EnableHotSpots = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.HotSpots">
            <summary>
            Gets the HotSpots object which is used to obtain/specify information pertaining to HotSpots behavior.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.IsKeyboardLocked">
            <summary>
            <c>Gets</c> a value indicating whether keyboard is locked.
            </summary>
            <example>
            <code>
            IbmScreen screen;
            bool KeyboardLocked = screen.IsKeyboardLocked;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.Oia">
            <summary>
            <c>Gets</c> the OIA object. OIA represents the status line on the screen.
            </summary>
            <example>
            <code>
            IbmScreen screen;
            IOia oia = screen.Oia;
            </code>
            </example>  
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.Selection">
            <summary>
            <c>Gets</c> the area of the screen currently selected.
            </summary>
            <example>
            <code>
            IbmScreen screen;
            IScreenRegion SelectedRegion = screen.Selection;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PrintOptions">
            <summary>
            <c>Gets</c> the PrintOptions object. PrintOptions holds configuration options for print emulation/print screen.
            </summary>
            <example>
            <code>
            IbmScreen screen;
            IPrintOptions printOption = screen.PrintOptions;            
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.Parent">
            <summary>
            <c>Gets</c> the parent object. The parent is the IIbmTerminal object.
            </summary>
            <example>
            <code>
            IbmScreen screen;
            IbmTerminal parent = screen.Parent;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.Rows">
            <summary>
            <c>Gets</c> the number of rows of the screen.
            </summary>
            <example>
            <code>
            IbmScreen screen;
            int rows = screen.Rows
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ScreenSettleTime">
            <summary>
            <c>Gets</c> or <c>sets</c> the time duration during which there should be no host data changes. 
            </summary>
            <remarks>
            This value is used in triggering the NewScreenReady event.
            The value is not persisted.
            </remarks>
            <example>
            <code>
            IbmScreen screen;
            int settleTime = screen.ScreenSettleTime
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ShowHotSpots">
            <summary>
            Gets or sets a value indicating whether hotspots are visible in the terminal window. 
            </summary>
            <remarks>
            If this property is true, hotspots are visible and look like buttons. 
            If it is false, hotspots aren't visible, but the pointer changes
            from an I-beam to an arrow when placed over a hotspot.
            <para>The EnableHotspots property determines whether hotspots can be used. If EnableHotspots is true and ShowHotspots is false, hotspots can still be used, even though they are not displayed. 
            When EnableHotspots is false, hotspots are not displayed and are not available, regardless of the value of ShowHotspots.
            </para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.ShowHotSpots = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ShowOIA">
            <summary>
            <c>Gets</c> or <c>sets</c> a value indicating whether Reflection 
            shows operation and status messages in the Operator Information Area (OIA) 
            at the bottom of the terminal window. 
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.ShowOIA = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ShowSosi">
            <summary>
            <c>Gets</c> or <c>sets</c> a value indicating whether Reflection shows a shift out/shift in (SOSI) character
            or a space to show where double-byte characters and fields begin and end.
            </summary>
            <remarks>
            If this property is true, SOSI characters are shown on the host screen. If it is false,
            they are not shown. 
            <para>
            This property is applicable to double-byte ternimal sessions only.
            </para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.ShowSosi = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ShowBytesRemaining">
            <summary>
            Gets or sets a value indicating whether the host status line displays the Show Bytes Remaining
            indicator, which shows the number of bytes remaining in the current field.
            </summary>
            <remarks>
            When entering characters in host applications using a character set that
            doesn't utilize combiner characters, the number of bytes (characters)
            remaining in the current field equals the number of visible spaces.
            <para> When using a character set that utilizes combiner characters (Thai,
            for example), the number of bytes a character uses depends on whether or
            not it is composed with combiner characters. </para>
            Even though a combiner character that modifies a base character occupies no space, 
            it counts toward the maximum number of bytes allowed in an input field. This can
            create a situation where a host input field is full, although not visibly
            so.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.ShowBytesRemaining = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.UseTableFormat">
            <summary>
            Gets or sets a value indicating whether Reflection processes spaces when it copies text
            to the Clipboard. 
            </summary>
            <remarks> 
            If this property is true, Reflection determines whether screen text
            is laid out in columns and if spaces between the columns should be replaced with tabs. 
            <para>Use BlanksBetweenFields to specify the number of blank spaces in
            a row between columns of data in order for the data to be tab-delimited.
            </para>
            <para>This property is useful for copying tables from host applications and
            pasting them to Windows (or other host) applications.
            </para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.UseTableFormat = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.SelectionMode">
            <summary>
            Gets or sets options for selected text that either wrap it (Stream) 
            or form it into a rectangle (Block). 
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.SelectionMode = SelectionMode.Block;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteLineBreak">
            <summary>
            Gets or sets the character to insert in a
            field on the terminal screen when data that contains line breaks is
            copied from the Clipboard.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item>
                <term>EnterKey</term>
                <description>Inserts an Enter character.</description>
            </item>
            <item>
                <term>NewLineKey</term>
                <description>Inserts a NewLine character. (The default.)</description>
            </item>
            <item>
                <term>TabKey</term>
                <description>Inserts a Tab character.</description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.PasteLineBreak = PasteLineBreakOption.NewLineKey;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.KanaLockState">
            <summary>
            Gets or sets a value indicating whether the keyboard uses Kana Mode from the JIS-layout, which produces half-width Katakana characters. 
            </summary>
            <remarks>
            When this property is true, the keyboard uses Kana Mode. 
            <para>When it is false, the keyboard uses ANSI-layout for the keyboard mapping.</para>
            <para>This property is applicable to double-byte 3270 sessions only.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            IbmScreen screen;
            screen.KanaLockState = false;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CopyFormatText">
            <summary>
            Gets or sets a value indicating whether to copy from Reflection to the text Clipboard format
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CopyFormatUnicode">
            <summary>
            Gets or sets a value indicating whether to copy from Reflection to the Unicode text Clipboard format
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CopyFormatRTF">
            <summary>
            Gets or sets a value indicating whether to copy from Reflection to the RTF (Rich Text Format) Clipboard format
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CopyFormatBIFF">
            <summary>
            Gets or sets a value indicating whether to copy from Reflection to the BIFF (Binary Interchange File Format) Clipboard format
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CopyFormatRefMF">
            <summary>
            Gets or sets a value indicating whether to copy from Reflection to the Reflection proprietary Clipboard format
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CopyFormatDIB">
            <summary>
            Gets or sets a value indicating whether to copy from Reflection to the DIB (Device Independent Bitmap) Clipboard format
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CopyFormatRetainColor">
            <summary>
            Gets or sets a value indicating whether to retain host colors when copying to the RTF (Rich Text Format) Clipboard format
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CopyDataSeparation">
            <summary>
            Gets or sets a value specifying whether the data copied from Reflection should
            be separated by delimiters at field boundaries or at word boundaries. This option
            controls formatting for spreadsheet or other cell-based information and affects only
            the text and BIFF formats.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteMaskProtectedFields">
            <summary>
            Gets or sets a value indicating whether pasted text should be interpreted as a host screen image
            and overlaid onto the current screen starting at the current cursor position. If true, where the 
            current screen contains an unprotected field, the source image text is pasted; where the current
            screen contains a protected field, the source image text is skipped.
            If false, the text is interpreted as a linear stream that can contain new lines and delimiters,
            and is pasted accordingly.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteAlignText">
            <summary>
            Gets or sets a value indicating whether to align space separated data with fields on the screen.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteClearField">
            <summary>
            Gets or sets a value indicating whether to clear all of the previous data remaining in a field after pasting
            new data into it.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteMoveCursor">
            <summary>
            Gets or sets a value indicating whether to move the cursor to the end of the pasted text. 
            If False, the cursor is restored to the position it was in before text was pasted.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ConfigureHotSpots(System.String)">
            <summary>
            Load the hotspots file as the current hotspots definitions.
            </summary>
            <param name="hotSpotsFilePath">Hotspots file path.</param>
            <returns>Method return code.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CopyAppend">
            <summary>
            Appends the currently selected text to the end of the Clipboard.
            </summary> 
            <example>
            <code>
            private IbmScreen screen;
            screen.CopyAppend();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.Copy">
            <summary>
            Copies the current selection to the Clipboard.
            </summary>
            <example>
            <code>
            private IbmScreen screen;
            screen.Copy();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CopyToBuffer(System.Int32)">
            <summary>
            Copies selected text to one of 4 clipboard buffers.
            If an invalid bufferNum value is specified, the request is ignored.
            </summary>
            <param name="bufferNum">int value 1 through 4 indicating the clipboard buffer to which data is copied.</param> 
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.Cut">
            <summary>
            Cuts the current selection and copies it to the Clipboard.
            </summary>
            <example>
            <code>
            private IbmScreen screen;
            screen.Cut();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.Paste">
            <summary>
            Copies data from the Clipboard to the current cursor location.
            </summary>
            <example>
            <code>
            private IbmScreen screen;
            screen.Paste();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteContinue">
            <summary>
            Pastes any leftover text following a previous Paste command.
            </summary>
            <example>
            <code>
            private IbmScreen screen;
            screen.PasteContinue();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteFromBuffer(System.Int32)">
            <summary>
            Pastes data from a specified clipboard buffer, if the specified buffer contains data.
            Ignored if an invalid bufferNum value is specified, or if the specified clipboard buffer does not 
            contain data.
            </summary>
            <param name="bufferNum">int value 1 through 4 indicating the clipboard buffer to which data is copied.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.SelectAll">
            <summary>
            Selects all of the text on the screen.
            </summary>
            <example>
            <code>
            private IbmScreen screen;
            screen.SelectAll();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CancelSelection">
            <summary>
            Cancels the text selection in the terminal window.
            </summary>
            <remarks>
            If no text is selected, this method has no effect.
            </remarks>
            <example>
            <code>
            private IbmScreen screen;
            screen.CancelSelection();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.FindField(System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
            <summary>
            Locates a field starting from the specified row and column. 
            </summary>
            <param name="startRow">Field starting row.</param>
            <param name="startColumn">Field starting column.</param>
            <param name="findoption">Determines the search direction.</param>
            <returns>The host field if the field is found. It returns null if the field is not found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the startRow or startColumn parameters 
            are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
            <example>
            <code>
            private IbmScreen screen;
            screen.FindField(5, 5, FindOption.Forward);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.FindField(System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
            <summary>
            Locates a field that matches the specified field length, starting from the specified row and column. 
            </summary>
            <param name="startRow">Field starting row.</param>
            <param name="startColumn">Field starting column.</param>
            <param name="fieldLength">Field length.</param>
            <param name="findoption">Determines the search direction.</param>
            <returns>The host field if the field is found, or null if the field is not found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the startRow or startColumn parameters 
            are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
            <example>
            <code>
            private IbmScreen screen;
            screen.FindField(5, 5, 20, FindOption.Forward);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.FindField(System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FieldType,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
            <summary>
            Locates a field that matches the specified field attributes, starting from the specified row and column. 
            </summary>
            <param name="startRow">Field starting row.</param>
            <param name="startColumn">Field Starting column.</param>
            <param name="fieldtype">Field attributes.</param>
            <param name="findoption">Determines the search direction.</param>
            <returns>The host field if the field is found, or null if the field is not found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the startRow or startColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception> 
            <example>
            <code>
            private IbmScreen screen;
            screen.FindField(5, 5, FieldType.Protected, FindOption.Forward);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.FindField(System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FieldType,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
            <summary>
            Locates a field that matches the specified field length and 
            field attributes, starting from the specified row and column. 
            </summary>
            <param name="startRow">Field starting row.</param>
            <param name="startColumn">Field starting column.</param>
            <param name="fieldLength">Field length.</param>
            <param name="fieldtype">Field type.</param>
            <param name="findoption">Determines the search direction.</param>
            <returns>The host field if the field is found, or null if the field is not found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the startRow or startColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception> 
            <example>
            <code>
            private IbmScreen screen;
            screen.FindField(5, 5, 20, FieldType.Protected, FindOption.Forward);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.GetCharacterForegroundColor(System.Int32,System.Int32)">
            <summary>
            <c>Gets</c> the foreground color of the chararcter at the specified location.
            </summary>
            <param name="row">Field starting row.</param>
            <param name="column">Field starting column.</param>
            <returns>Screen color object which represent host screen color.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>  
            <example>
            <code>
            private IbmScreen screen;
            ScreenColor color = screen.GetCharacterForegroundColor(5, 10);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.GetCharacters(System.Int32,System.Int32,System.Int32)">
            <summary>
            <c>Gets</c> ScreenCharacter objects from the specified location.
            </summary>
            <remarks>Each represents one character at a screen location. 
            The length argument specifies the number of screen bytes to get. 
            <para>In SBCS, the number of screen bytes is the same as that of ScreenCharacter objects.</para>
            <para>In DBCS, the two numbers could be different. 
            If the last byte is half of a DBCS 
            character, the last byte won't be returned.</para></remarks>
            <param name="row">Row location.</param>
            <param name="column">Column location.</param>
            <param name="length">Characters length.</param>
            <returns>Array of ScreenCharacter on the host screen.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>       
            <example>
            <code>
            private IbmScreen screen;
            ScreenCharacter[] characters = screen.GetCharacters(5, 5, 20);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.GetCharacter(System.Int32,System.Int32)">
            <summary>
            <c>Gets</c> the ScreenCharacter at the specified location.
            </summary>
            <param name="row">Row location.</param>
            <param name="column">Column location.</param>
            <returns>Screen character value which represent one character on the host screen.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>    
            <example>
            <code>
            private IbmScreen screen;
            ScreenCharacter characters = screen.GetCharacters(5,5);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.GetField(System.Int32,System.Int32)">
            <summary>
            <c>Gets</c> the host field of which the specified row and column are a part.
            </summary>
            <param name="row">Field row location.</param>
            <param name="column">Field column location.</param>
            <returns>The Field on the host screen.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception> 
            <example>
            <code>
            private IbmScreen screen;
            HostField host = screen.GetField(5, 5);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.GetFields(Attachmate.Reflection.Emulation.IbmHosts.FieldType)">
            <summary>
            <c>Gets</c> a host field collection that matches specifed fieldAttributes.
            </summary>
            <param name="fieldType">FieldType enum selection.</param>
            <returns>Array of fields on host screen.</returns>
            <example>
            <code>
            private IbmScreen screen;
            HostField[] host = screen.GetFields(FieldType.Any);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.GetFieldColor(System.Int32,System.Int32)">
            <summary>
            <c>Gets</c> the foreground color of the host field of which the specified row and column are a part.
            </summary>
            <remarks>
            The foreground color can be different from the character foreground color at the specified screen location.
            </remarks>
            <param name="row">Field row location.</param>
            <param name="column">Field column location.</param>
            <returns>Host screen color.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>     
            <example>
            <code>
            private IbmScreen screen;
            ScreenColor color = screen.GetFieldColor(5, 5);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.GetFieldText(System.Int32,System.Int32)">
            <summary>
            <c>Gets</c> the text of the field of which the specified row and column are a part.
            </summary>
            <param name="row">Field row location.</param>
            <param name="column">Field column location.</param>
            <returns>The field's text on the host screen.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>  
            <example>
            <code>
            private IbmScreen screen;
            string fieldText = screen.GetFieldText(5, 5);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.GetText(System.Int32,System.Int32,System.Int32)">
             <summary>
             <c>Gets</c> the text from the specified location. 
             </summary>
             <remarks>The length argument specifies the number of screen bytes to get. In SBCS, 
             the number of screen bytes is the same as that of ScreenCharacter objects. In DBCS, 
             the two numbers can be different. If the last byte is half of a DBCS character, 
             it won't be returned.</remarks>
             <param name="row">Field row location.</param>
             <param name="column">Field column location.</param>
             <param name="length">Text length.</param>
             <returns>Text from specified location.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
             Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns), or if length is invalid.
             </exception>     
             <example>
             <code>
             private IIbmTerminal terminal;
             private IIbmScreen myScr;
            
             public void GetScreenText(int row, int cloumn, int length, int timeout, int settleTime)
             {
                if (terminal != null)
                {
                    terminal.Connect();
                    myScr = terminal.Screen;
                    myScr.WaitForHostSettle(timeout, settleTime);
                    string text = myScr.GetText(row, cloumn, length);
                    Console.WriteLine(text);
                }
                else
                    Console.WriteLine("No terminal exisists.");
            
             
             }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.GetTextEx(System.Int32,System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.GetTextArea,Attachmate.Reflection.Emulation.IbmHosts.GetTextWrap,Attachmate.Reflection.Emulation.IbmHosts.GetTextAttr,Attachmate.Reflection.Emulation.IbmHosts.GetTextFlags)">
            <summary>
            Gets the text from the specified screen area.  
            </summary>
            <remarks>
            The (startRow, startColumn, endRow, endColumn) 4-tuple allows data to be retrieved from one or more lines, as a
            continuous stream or as a block of characters. 
            </remarks>
            <param name="startRow">The first row from which to retrieve data.</param>
            <param name="startColumn">The first column from which to retrieve data.</param>
            <param name="endRow">The last row from which to retrieve data.</param>
            <param name="endColumn">The last column from which to retrieve data.</param>
            <param name="areaType">String data returned as a stream or block.</param>
            <param name="wrap">Screen wrapping characteristics.</param>
            <param name="attr">The field types to return.</param>
            <param name="flags">Formatting information.</param>
            <returns>The text in the specifed area.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.IsAttribute(System.Int32,System.Int32)">
             <summary>
             Tests whether the specified screen location is a field attribute position.
             </summary>
             <param name="row">Field row location.</param>
             <param name="column">Field column location.</param>
             <returns>The location is a field attribute position or not.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
             Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
             </exception>   
             <example>
             <code>
             private IIbmTerminal terminal;
             private IIbmScreen screen;
            
             public bool Attribute(int row, int cloumn, int timeout, int settleTime)
             {
                if (terminal != null)
                {
                    terminal.Connect();
                    screen = terminal.Screen;
                    screen.WaitForHostSettle(timeout, settleTime);
                    bool isAttribute = screen.IsAttribute(row,column);
                    return isAttribute;
                }
                else
                    return false;
            
             
             }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.LightPen(System.Int32,System.Int32)">
             <summary>
             Simulates a light pen selection at the specified location on the screen.
             </summary>
             <param name="row">Field row location.</param>
             <param name="column">Field column location.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">
             Thrown if the row or column parameters are outside the range of valid values: 
             (1 to Rows) or (1 to Columns).
             </exception>
             <example>
             <code>
             private IIbmTerminal terminal;
             private IIbmScreen screen;
            
             public void LightPenSelection(int row, int cloumn, int timeout, int settleTime)
             {
                if (terminal != null)
                {
                    terminal.Connect();
                    screen = terminal.Screen;
                    screen.WaitForHostSettle(timeout, settleTime);
                    screen.IsAttribute(row,column);        
                }
                else
                    Console.WriteLine("No terminal exists.");
             
             }
             </code>
             </example>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.LockInput">
             <summary>
             Locks up the screen and prevents users from providing input via the keyboard. 
             </summary>
             <remarks>
             Users can still provide input via macros and the application programming interface.
             <para> To release the lock, use <c>UnlockInput()</c>. </para>
             </remarks>
             <see cref="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.UnlockInput"/>
             <example>
             <code>
             private IIbmTerminal terminal;
             private IIbmScreen screen;
            
             public void LockScreen(int timeout, int settleTime))
             {
                if (terminal != null)
                {
                    terminal.Connect();
                    screen = terminal.Screen;
                    screen.WaitForHostSettle(timeout, settleTime);
                    screen.LockInput();        
                }
                else
                    Console.Writeline("No terminal exists."); 
             }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.MoveCursor(System.Int32,System.Int32)">
             <summary>
             Moves the cursor by the rows and columns. 
             </summary>
             <remarks>
             The resulting row and column are bound by the screen dimensions.
             Both arguments ("rows" and "columns") can be positive or negative numbers. 
             Negative numbers move the cursor back toward smaller rows and columns.
             Neither row or column wraps when it reaches the maximum or minimun value.
             </remarks>
             <param name="rows">The number of rows to move the cursor by.</param>
             <param name="columns">The number of columns to move the cursor by.</param>
             <returns>ReturnCode indicates success, failure, or a warning condition if the cursor position reaches the screen boundary.</returns>
             <example>
             <code>
             private IIbmTerminal terminal;
             private IIbmScreen screen;
             private ReturnCode code;
            
             public void MoveCursorByLocation(int row, int cloumn, int timeout, int settleTime)
             {
                if (terminal != null)
                {
                    terminal.Connect();
                    screen = terminal.Screen;
                    screen.WaitForHostSettle(timeout, settleTime);
                    code = screen.MoveCursor(row,column);
                }
                else
                    Console.Writeline("No terminal exists.");
             }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.MoveCursorTo(System.Int32,System.Int32)">
             <summary>
             Moves the cursor to the specified screen location. 
             </summary>
             <remarks>
             If either row or column is out of the screen bounds, 
             the method still moves the cursor, but within the screen's dimensions.
             </remarks>
             <param name="row">Row location.</param>
             <param name="column">Column location.</param>
             <returns>ReturnCode indicates success or a warning condition if one of the dimensions reach the screen boundary.</returns>
             <example>
             <code>
             private IIbmTerminal terminal;
             private IIbmScreen screen;
             private ReturnCode code;
            
             public void MoveCursorByLocationTo(int row, int cloumn, int timeout, int settleTime)
             {
                if (terminal != null)
                {
                    terminal.Connect();
                    screen = terminal.Screen;
                    screen.WaitForHostSettle(timeout, settleTime);
                    code = screen.MoveCursorTo(row,column);        
                }
                else
                    Console.Writeline("No terminal exists.");
             }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.MoveCursorTo(System.Int32)">
             <summary>
             Moves the cursor to the specified screen location.
             </summary>
             <param name="screenIndex">One-based screen index.</param>
             <returns>ReturnCode.Success if successful, or ReturnCode.Error if unsuccessful.</returns>
             <example>
             <code>
             private IIbmTerminal terminal;
             private IIbmScreen screen;
             private ReturnCode code;
            
             public void MoveCursorByIndex(int screenIndex, int timeout, int settleTime))
             {
                if (terminal != null)
                {
                    terminal.Connect();
                    screen = terminal.Screen;
                    screen.WaitForHostSettle(timeout, settleTime);
                    code = screen.MoveCursor(screenIndex);        
                }
                else
                    Console.Writeline("No terminal exists.");
             }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PutCharacter(Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter,System.Int32,System.Int32)">
             <summary>
             Puts a ScreenCharactor at the specified screen location. 
             </summary>
             <remarks>
             If the ScreenCharacter is a DBCS character, the character 
             takes up a two-byte space starting at the specified screen location.
             </remarks>
             <param name="character">The character.</param>
             <param name="row">Row location.</param>
             <param name="column">Column location.</param>
             <returns>ReturnCode value indicates success or error conditions.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
             Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
             </exception>
             <example>
             <code>
             private IIbmTerminal terminal;
             private IIbmScreen screen;
             private ReturnCode code;
            
             public void PutCharacterByLocation(ScreenCharacter char ,int row, int cloumn, int timeout, int settleTime)
             {
                if (terminal != null)
                {
                    terminal.Connect();
                    screen = terminal.Screen;
                    screen.WaitForHostSettle(timeout, settleTime);
                    code = screen.PutCharacter(char,row,column);        
                }
                else
                    Console.Writeline("No terminal exists.");
             }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PutText(System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Puts the text at the specified screen location, taking up the "length" number of byte positions.
             </summary>
             <remarks>
             If the text string is longer than "length", the text is truncated. The text may span over more than one field.
             </remarks>
             <param name="text">The text at the specified screen location.</param>
             <param name="row">Row location.</param>
             <param name="column">Column ocation.</param>
             <param name="length">The length of the text.</param>
             <returns>ReturnCode object.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
             Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
             </exception>                
             <example>
             <code>
             private IIbmTerminal terminal;
             private IIbmScreen screen;
             private ReturnCode code;
            
             public void PutTextByLocation(string text,int row, int cloumn,int length, int timeout, int settleTime)
             {
                if (terminal != null)
                {
                    terminal.Connect();
                    screen = terminal.Screen;
                    screen.WaitForHostSettle(timeout, settleTime);
                    code = screen.PutText(text,row,column,length);        
                }
                else
                    Console.Writeline("No terminal exists.");
             }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PutText(System.String,System.Int32,System.Int32)">
             <summary>
             Puts the text at the specified screen location, which may span over more than one field.
             </summary>
             <param name="text">The text at specified location.</param>
             <param name="row">Row location.</param>
             <param name="column">Column location.</param>
             <returns>One of the ReturnCode enum values</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
             Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
             </exception>  
             <example>
             <code>
             private IIbmTerminal terminal;
             private IIbmScreen screen;
             private ReturnCode code;
            
             public void PutTextByLocation(string text,int row, int cloumn, int timeout, int settleTime)
             {
                if (terminal != null)
                {
                    terminal.Connect();
                    screen = terminal.Screen;
                    screen.WaitForHostSettle(timeout, settleTime);
                    code = screen.PutText(text,row,column);        
                }
                else
                    Console.Writeline("No terminal exists.");
             }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ScreenCoordinateToIndex(System.Int32,System.Int32)">
            <summary>
            Converts a screen position (row and column) to the linear screen buffer index.
            </summary>
            <param name="row">Screen row.</param>
            <param name="column">Screen column.</param>
            <returns>One-based screen index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>   
            <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public int ScreenCoordinate(int row, int cloumn, int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   int cord = screen.ScreenCoordinateToIndex(row,column);        
                   return cord;
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ScreenIndexToRow(System.Int32)">
            <summary>
            <c>Gets</c> the row value of a screen location pointed to by screenIndex.
            </summary>
            <param name="screenIndex">One-based screen index location.  Range = 1 through (rows * columns).</param>
            <returns>Row that corresponds to the specified screen index location.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the screenIndex parameter is outside the range of valid values.
            </exception>
            <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public int ScreenIndex(int screenIndex, int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   int index = screen.ScreenIndexToRow(screenIndex);
                   retur index;
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ScreenIndexToColumn(System.Int32)">
             <summary>
             <c>Gets</c> the column value of a screen location pointed to by screenIndex.
             </summary>
             <param name="screenIndex">One-based screen index location.  Range = 1 through (rows * columns).</param>
             <returns>Column that corresponds to the specified screen index location.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
             Thrown if the screenIndex parameter is outside the range of valid values.
             </exception> 
             <example>
             <code>
             private IIbmTerminal terminal;
             private IIbmScreen screen;
            
             public int ScreenIndex(int scrIndex, int timeout, int settleTime)
             {
                if (terminal != null)
                {
                    terminal.Connect();
                    screen = terminal.Screen;
                    screen.WaitForHostSettle(timeout, settleTime);
                    int index = screen.ScreenIndexToColumn(scrIndex);        
                    return index;
                }
                else
                    Console.Writeline("No terminal exists.");
             }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ScreenIndexToCoordinate(System.Int32)">
             <summary>
             Gets the coordinates of a screen location pointed to by screenIndex.
             </summary>
             <param name="screenIndex">One-based screen index location.  Range = 1 through (rows * columns).</param>
             <returns>Screen coordinates that correspond to the specified index.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
             Thrown if the screenIndex parameter is outside the range of valid values.
             </exception> 
             <example>
             <code>
             private IIbmTerminal terminal;
             private IIbmScreen screen;
             private ReturnCode code;
            
             public ScreenPoint ScreenIndex(int scrIndex, int timeout, int settleTime)
             {
                if (terminal != null)
                {
                    terminal.Connect();
                    screen = terminal.Screen;
                    screen.WaitForHostSettle(timeout, settleTime);
                    ScreenPoint point = screen.ScreenIndexToCoordinate(scrIndex);        
                    return point;
                }
                else
                    Console.Writeline("No terminal exists.");
             }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.SendControlKey(Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode)">
            <summary>
            Sends a host control key to the host.
            </summary>
            <param name="keycode">ControlKeyCode object.</param>
            <returns>ReturnCode object.</returns>
            <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public ReturnCode SendKey( int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   ReturnCode code = screen.SendControlKey( ControlKeyCode.AltCursor);    
                   return code;
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.SendControlKeySync(Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode)">
            <summary>
            Sends a host control key to the host. 
            </summary>
            <remarks>
            The method does not return until the screen has settled 
            for the duration measured by the ScreenSettleTime property.
            </remarks>
            <param name="keycode">ControlSendKey object.</param>
            <returns>ReturnCode object.</returns>
            <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public ReturnCode SendKeySync( int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   ReturnCode code = screen.SendControlKeySync( ControlKeyCode.AltCursor);    
                   return code;
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.SendKeys(System.String)">
            <summary>
            Sends the text string to the host.
            </summary>
            <param name="text">The text to send.</param>
            <returns>ReturnCode object.</returns>
            <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public ReturnCode SendKey(string text, int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   ReturnCode code = screen.SendKeys(text);   
                   return code;
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.SearchText(System.String,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
             <summary>
             Searches the specified text, starting from the specified screen location with FindOption.
             </summary>
             <param name="text">The text to be searched.</param>
             <param name="startRow">Start row location.</param>
             <param name="startColumn">Start column location.</param>
             <param name="findoption">The direction of the search on the screen.</param>
             <returns>ScreenPoint object that represents the row and column coordinates on the host screen.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
             Thrown if the startRow or startColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
             </exception> 
             <example>
             <code>
             class MyScreen
             {
                 private IIbmTerminal terminal;
                 private IIbmScreen myScr;
             
                 public IIbmTerminal Terminal
                 {
                    set { terminal = value; }
                 }
             
                 public void SearchScreenText(string text, int startRow, int startColumn, FindOption findOption, int timeout, int settleTime)
                 {
                    if (terminal != null)
                    {
                       terminal.Connect();
            
                       myScr = terminal.Screen;
                       myScr.WaitForHostSettle(timeout, settleTime);
             
                       ScreenPoint sp = myScr.SearchText(text, startRow, startColumn, findOption);
                       Console.WriteLine("\"{0}\" is in row {1} and coloumn {2}", text, sp.Row, sp.Column);
                    }
                    else
                       Console.WriteLine("No terminal exsists.");
                 }
              }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.SearchText(System.String,System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
             <summary>
             Searches the specified text, starting from the specified screen location 
             for "searchRange" byte positions with FindOption.
             </summary>
             <param name="text">The text to be searched.</param>
             <param name="startRow">Screen row location.</param>
             <param name="startColumn">Screen column location.</param>
             <param name="searchRange">The number of byte positions to be searched.</param>
             <param name="findOption">Specifies the search direction.</param>
             <returns>The screen coordinate where the specified text begins, if found, or null if the text could not be found.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
             Thrown if the startRow or startColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
             </exception> 
             <example>
             <code>
             class MyScreen
             {
                 private IIbmTerminal terminal;
                 private IIbmScreen myScr;
             
                 public IIbmTerminal Terminal
                 {
                    set { terminal = value; }
                 }
             
                 public void SearchScreenText(string text, int startRow, int startColumn, int searchRange,FindOption findOption, int timeout, int settleTime)
                 {
                    if (terminal != null)
                    {
                       terminal.Connect();
            
                       myScr = terminal.Screen;
                       myScr.WaitForHostSettle(timeout, settleTime);
             
                       ScreenPoint sp = myScr.SearchText(text, startRow, startColumn, searchRange,findOption);
                       Console.WriteLine("\"{0}\" is in row {1} and coloumn {2}", text, sp.Row, sp.Column);
                    }
                    else
                       Console.WriteLine("No terminal exsists.");
                 }
              }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.SearchText(System.String,System.Int32,System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
             <summary>
             Searches for the specified text between the specified start and end locations.
             </summary>
             <param name="text">The specified text string.</param>
             <param name="startRow">Start row.</param>
             <param name="startColumn">Start column.</param>
             <param name="endRow">End row.</param>
             <param name="endColumn">End column.</param>
             <param name="findOption">Specifies the search direction.</param>
             <returns>The screen coordinate where the specified text begins, if found, or null if the text could not be found.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
             Thrown if the startRow, endRow, startColumn, or endColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
             </exception> 
             <example>
             <code>
             class MyScreen
             {
                 private IIbmTerminal terminal;
                 private IIbmScreen myScr;
             
                 public IIbmTerminal Terminal
                 {
                    set { terminal = value; }
                 }
             
                 public void SearchScreenText(string text, int startRow, int startColumn, int endRow,int endColumn,FindOption findOption, int timeout, int settleTime)
                 {
                    if (terminal != null)
                    {
                       terminal.Connect();
            
                       myScr = terminal.Screen;
                       myScr.WaitForHostSettle(timeout, settleTime);
             
                       ScreenPoint sp = myScr.SearchText(text, startRow, startColumn, endRow, endColumn, findOption);
                       Console.WriteLine("\"{0}\" is in row {1} and coloumn {2}", text, sp.Row, sp.Column);
                    }
                    else
                       Console.WriteLine("No terminal exsists.");
                 }
              }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.SearchText(System.String,System.Int32,System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FindOption,Attachmate.Reflection.Emulation.IbmHosts.TextComparisonOption)">
             <summary>
             Searches for the specified text between the specified start and end locations.
             </summary>
             <param name="text">The specified text string.</param>
             <param name="startRow">Start row.</param>
             <param name="startColumn">Start column.</param>
             <param name="endRow">End row.</param>
             <param name="endColumn">End column.</param>
             <param name="findOption">Specifies the search direction.</param>
             <param name="textComparison">Indicates how text is compared against the text on the host screen.</param>
             <returns>The screen coordinate where the specified text begins, if found, or null if the text could not be found.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
             Thrown if the startRow, endRow, startColumn, or endColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
             </exception> 
             <example>
             <code>
             class MyScreen
             {
                 private IIbmTerminal terminal;
                 private IIbmScreen myScr;
             
                 public IIbmTerminal Terminal
                 {
                    set { terminal = value; }
                 }
             
                 public void SearchScreenText(string text, int startRow, int startColumn, int endRow,int endColumn, FindOption findOption, int timeout, int settleTime)
                 {
                    if (terminal != null)
                    {
                       terminal.Connect();
            
                       myScr = terminal.Screen;
                       myScr.WaitForHostSettle(timeout, settleTime);
             
                       ScreenPoint sp = myScr.SearchText(text, startRow, startColumn, endRow, endColumn, findOption, TextComparisonOption.IgnoreCase);
                       Console.WriteLine("\"{0}\" is in row {1} and coloumn {2}", text, sp.Row, sp.Column);
                    }
                    else
                       Console.WriteLine("No terminal exsists.");
                 }
              }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.UnlockInput">
            <summary>
            Unlocks  the the screen.  <see cref="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.LockInput"/> method for more information.
            </summary>
            <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public void UnlockInputChar( int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   screen.UnlockInput();        
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.WaitForCursor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Waits for the cursor to be at the specified screen location.
            </summary>
            <param name="timeout">Wait time-out value.</param>
            <param name="row">Screen row position.</param>
            <param name="column">Screen column position.</param>
            <returns>ReturCode object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception> 
            <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public void WaitCursor(int row, int column, int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   ReturnCode code = screen.WaitForCursor(timeout,row,column);
                   
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.WaitForCursor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Waits for the cursor to be in the rectangular area specified by startRow, startColumn, endRow, and endColumn.
            </summary>
            <param name="timeout">Wait time-out value.</param>
            <param name="startRow">Start row.</param>
            <param name="startColumn">Start column.</param>
            <param name="endRow">End row.</param>
            <param name="endColumn">End column.</param>
            <returns>ReturnCode object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the startRow, endRow, startColumn, or endColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception> 
            <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public void WaitCursor(int startRow, int startColumn,int endRow, int endColumn, int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   ReturnCode code = screen.WaitForCursor(timeout,startRow,startColumn,endRow,endColumn);                
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.WaitForControlKey(System.Int32,Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode,System.Boolean)">
            <summary>
            Waits for the specified control key press.
            </summary>
            <param name="timeout">Wait time out value.</param>
            <param name="keycode">Control key code.</param>
            <param name="continueProcess">Value to indicate whether the program should continue processing other actions.</param>
            <returns>ReturnCode object.</returns>
            <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public void WaitCursor(int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   ReturnCode code = screen.WaitForControlKey(timeout,ControlKeyCode.BackSpace,true);
                   
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.WaitForText(System.Int32,System.String,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.TextComparisonOption)">
            <summary>
            Waits for the specified text to appear at the specified screen location. 
            </summary>
            <remarks>
            TextComparisonOption indicates desired text string comparison.
            </remarks>
            <param name="timeout">Wait time-out value.</param>
            <param name="text">Text string.</param>
            <param name="row">Row position.</param>
            <param name="column">Column position.</param>
            <param name="option">Text comparison option.</param>
            <returns>ReturnCode object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>  
            <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public void WaitText(string text, int row, int column, int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   ReturnCode code = screen.WaitForText(timeout,text,row,column,TextComparisonOption.IgnoreCase);
                   
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.WaitForText(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.TextComparisonOption)">
            <summary>
            Waits for the specified text to appear between the specified start and end locations.
            </summary> 
            <remarks>
            TextComparisonOption indicates the specified text string comparison.
            </remarks>
            <param name="timeout">Wait time-out value.</param>
            <param name="text">Text string.</param>
            <param name="startRow">Start row.</param>
            <param name="startColumn">Start column.</param>
            <param name="endRow">End row.</param>
            <param name="endColumn">End column.</param>
            <param name="option">Text comparison option.</param>
            <returns>ReturnCode object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the startRow, endRow, startColumn, or endColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception> 
            <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public void WaitText(string text, int startRow, int startColumn, int endRow,int endColumn, int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   ReturnCode code = screen.WaitForText(timeout,text,row,column,TextComparisonOption.IgnoreCase);
                   
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.WaitForHostSettle(System.Int32,System.Int32)">
             <summary>
             Waits for host screen data to settle. 
             </summary>
             <remarks>
             This method waits for the screen to be quiet without any changes for the time duration specified by settleTime.
             The wait timeout value should be greater than settleTime.
             </remarks>
             <param name="timeout">Wait time-out value.</param>
             <param name="settleTime">Settle time.</param>
             <returns>ReturnCode object.</returns>
             <example>
             <code>
             private IIbmTerminal terminal;
             private IIbmScreen myScr;
             
             public IIbmTerminal Terminal
             {
                set { terminal = value; }
             }
             
             public void WaitForSettle(int timeout, int settleTime)
             {
                if (terminal != null)
                {
                   terminal.Connect();
                   myScr = terminal.Screen;
                   ReturnCode result = myScr.WaitForHostSettle(timeout, settleTime);
                   Console.WriteLine(result);
                 }
                 else
                   Console.WriteLine("No terminal exsists.");
             }
            
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.WaitForKeyboardEnabled(System.Int32,System.Int32)">
            <summary>
            Wait for the keyboard to be enabled (unlocked and ready for additional input).
            </summary>
            <param name="timeout">Specifies how long to wait for the keyboard to become enabled (in seconds).</param>
            <param name="duration">Specifies how long the keyboard must remain enabled (in seconds).</param>
            <returns>ReturnCode object.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.Wait(System.Int32)">
            <summary>
            Waits for the specified duration.
            </summary>
            <param name="waitTime">Wait time (in milliseconds).</param>
            <returns>ReturnCode object.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.SetSelectionStartPos(System.Int32,System.Int32)">
            <summary>
            <c>Sets</c> the starting coordinates for selecting text. 
            </summary>
            <param name="row">The row in which the selection begins.</param>
            <param name="column">The column in which the selection begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>  
            <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public void WaitText(int32 row, int32 column, int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   screen.SetSelectionStartPos(row,column);
                   
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ExtendSelection(System.Int32,System.Int32)">
            <summary>
            Selects all text between the selection start position
            and the specified coordinates in the terminal window. 
            </summary>
            <remarks>
            Use the SetSelectionStartPos method to set
            the starting coordinates.
            </remarks>
            <see cref="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.SetSelectionStartPos(System.Int32,System.Int32)"/>
            <param name="row">The row in which the selection ends.</param>
            <param name="column">The column in which the selection ends.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception> 
             <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public void WaitText(int32 row, int32 column, int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   screen.ExtendSelection(row,column);
                   
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ExtendSelectionRect(System.Int32,System.Int32)">
            <summary>
            Selects all text from the starting row to the specified
            row in the terminal window. 
            </summary>
            <remarks>
            Use the SetSelectionStartPos method to set the starting coordinates.
            </remarks>
            <see cref="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.SetSelectionStartPos(System.Int32,System.Int32)"/>
            <param name="row">The row in which the selection ends.</param>
            <param name="column">The column in which the selection ends.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>  
            <example>
            <code>
            private IIbmTerminal terminal;
            private IIbmScreen screen;
            
            public void WaitText(int32 row, int32 column, int timeout, int settleTime)
            {
               if (terminal != null)
               {
                   terminal.Connect();
                   screen = terminal.Screen;
                   screen.WaitForHostSettle(timeout, settleTime);
                   screen.ExtendSelectionRect(row,column);
                   
               }
               else
                   Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.Undo">
            <summary>
            Undoes the last edit operation.
            </summary>
            <example>
            <code>
            private IbmScreen screen;
            screen.Undo();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.PasteRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode,System.Boolean,System.Boolean)">
             <summary>
             Pastes the contents of the Clipboard to the current screen and, if needed, multiple screens in the host application.
             The arguments define the region in the host screen(s) to be used for the paste operation, the terminal key used to
             scroll to subsequent screens, and how Reflection handles word wrap and field delimiters.
            
             Values for the position arguments(the first eight) can be positive, zero, or negative. Positive row values are counted down
             from the top of the screen, zero is the last row on the screen, and negative values are counted up from the last row.
             Positive column arguments are counted from the left edge of the screen, zero is the last column on the screen,
             and negative values are counted back from the last column. For example, to start pasting the first screen at the upper-left
             corner of the screen, set Top = 1 and Left = 1.To end pasting at the lower-right corner of the screen,
             set Bottom = 0 and Right = 0, as shown here:
             </summary>
             <param name="top">The starting row coordinate for the first screen.</param>
             <param name="left">The starting column coordinate for the first screen.</param>
             <param name="bottom">The ending row coordinate for the first screen.</param>
             <param name="right">The ending column coordinate for the first screen.</param>
             <param name="remTop">The starting row coordinate for the remaining screens.</param>
             <param name="remLeft">The starting column coordinate for the remaining screens.</param>
             <param name="remBottom">The ending row coordinate for the remaining screens.</param>
             <param name="remRight">The ending column coordinate for the remaining screens.</param>
             <param name="keycode">The terminal key to use to scroll to the second and remaining screens in the paste range.</param>
             <param name="wrapText">
             Determines what happens when text to be copied exceeds the current line length. If this value is true,
             the remaining text in the line will be pasted at the start of the next field. If false, the current line
             will be truncated and the remaining text will begin pasting at the next field with the beginning of a new line.
             </param>
             <param name="useFieldDelim">
             Controls where to try to paste text after reaching a new line in the clipboard. An attempt will be made to paste on the
             next row at the same column location where the paste began. UseFieldDelim controls what happens if the new location is protected.
             If false, pasting stops and any text remaining in the clipboard is placed into the PasteNext buffer. If true, the method
             continues to search for subsequent fields, searching first right and then down, until it finds another unprotected field.
             If an unprotected field is located, pasting starts in this field; if not, pasting stops and any remaining text is put into the PasteNext buffer.
             </param>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.AfterSendKeys">
            <summary>
            The event occurs after data keys are rendered on the terminal screen.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.BeforeSendControlKey">
            <summary>
            The event occurs before a control key is sent to the host.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.BeforeSendKeys">
            <summary>
            The event occurs before a data key is sent to the host. 
            </summary>
            <remarks>
            The data key can be triggered from the keyboard, the application programming interface, or a macro.
            <para>SendKeys method triggers a BeforeSendKeys event for each character in the text string.</para>
            </remarks>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CursorInNewField">
            <summary>
            The event occurs when the cursor moves into a different field.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.KeyboardLocked">
            <summary>
            The event occurs when the keyboard is locked.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.KeyboardUnlocked">
            <summary>
            The event occurs when the keyboard is unlocked.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.NewScreenReady">
            <summary>
            The event occurs when the screen has been quiet for the time duration specified by ScreenSettleTime property.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ScreenChanged">
            <summary>
            The event occurs when host data causes a change on the screen.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.MouseClick">
            <summary>This event occurs when a session window is clicked by the mouse.</summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.OnKeyboardLocked(System.EventArgs)">
            <summary>
            Fires the KeyboardLocked event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.OnKeyboardUnlocked(System.EventArgs)">
            <summary>
            Fires the KeyboardUnlocked event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.OnScreenChanged(System.EventArgs)">
            <summary>
            Fires the ScreenChanged event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.OnNewScreenReady(System.EventArgs)">
            <summary>
            Fires the NewScreenReady event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.OnCursorInNewField(Attachmate.Reflection.Emulation.IbmHosts.CursorInNewFieldEventArgs)">
            <summary>
            Fires the CursorInNewField event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.KeyboardLockedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.KeyboardUnlockedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raise the event.</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.ScreenChangedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raise the event.</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.NewScreenReadyEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raise the event.</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.CursorInNewFieldEventSink(System.Object,Attachmate.Reflection.Emulation.IbmHosts.CursorInNewFieldEventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raise the event.</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.BeforeSendKeysEventSink(System.Object,Attachmate.Reflection.Emulation.IbmHosts.BeforeSendKeysEventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raise the event.</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.BeforeSendControlKeyEventSink(System.Object,Attachmate.Reflection.Emulation.IbmHosts.BeforeSendControlKeyEventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raise the event.</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.AfterSendKeyEventSink(System.Object,Attachmate.Reflection.Emulation.IbmHosts.AfterSendKeysEventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raise the event.</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmScreen.MouseClickEventSink(System.Object,Attachmate.Reflection.UserInterface.MouseEventArgsEx)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal">
            <exclude/>
            <summary>
            IbmTerminal object represents an IBM 3270 or 5250 host emulation session object.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal"/> class. 
            </summary>
            <param name="terminalService">
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TerminalUserControlContext">
            <summary>
            This is an internal property used to determine the context of this terminal object usage. This is set to true
            if this terminal object is being used in a Terminal User Control context.
            </summary>
            <remarks>
            The default is false.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.AllowDBCSinSBCSField5250">
            <summary>
            Allows double-byte character sets in single-byte character set fields.
            </summary>
            <remarks>
            The default is false.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.AllowUnpairedSI">
            <summary>
            Allows an unpaired shift in (SI) with a matching shift out (SO) sequence.
            </summary>
            <remarks>
            The default is false.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.SubstituteDisplayCharacters">
            <summary>
            Controls whether zeros in a 3270 or 5250 display are shown with a slash through them.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.AutoConnect">
            <summary>
            <c>Gets</c> or <c>sets</c> a value indicating whether Reflection attempts a host connection
            after the current settings file is loaded.  
            </summary>
            <remarks>
            You must save the current settings file after changing the value of this property. 
            <para>This property causes an error if Reflection is already connected to a host. 
            Use the IsConnected property to determine if a connection exists.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            Class Program
            {
              IbmTerminal terminal;
            
              public Terminal
              {get{terminal = value;}
            
              public void AutoConnectToHost()
              {
                if(terminal != null)
                {
                  terminal.AutoConnect = true;       
                }
                else
                  throw new Exception("No terminal exists.");
              }
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.AutoReconnect">
            <summary>
            <c>Gets</c> or <c>sets</c> a value that indicates whether Reflection attempts 
            to reconnect after a disconnection that it did not initiate.
            </summary>
            <remarks>When this value is <c>True</c>, Reflection does attempt to reconnect.</remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            Class Program
            {
              IbmTerminal terminal;
            
              public Terminal
              {get{terminal = value;}
            
              public void AutoReconnectToHost()
              {
                if(terminal != null)
                {
                  terminal.AutoReconnect = true;       
                }
                else
                  throw new Exception("No terminal exists.");
              }
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.AutoSignOn">
            <summary>
            <c>Gets</c> or <c>sets</c> a value indicating whether Reflection tells the transport protocol to automatically log you on 
            to the host as soon as you establish a connection with Reflection. 
            </summary>
            <remarks>
            When this property is <c>True</c>, automatic sign on is used and Reflection signs on using the user and password values configured by the the UserName property and Password properties.
            This property applies only to 5250 sessions.
            The default is <c>False</c>.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            Class Program
            {
              IbmTerminal terminal;
            
              public Terminal
              {get{terminal = value;}
            
              public void ConnectToHost()
              {
                if(terminal != null)
                {
                  terminal.AutoSignOn = true; 
                  terminal.Connect();
                }
                throw new Exception("No terminal exists.");
              }
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.ConnectionError">
            <summary>
            Get the error number describing the specific cause of the most recent general connection failure (when the last returned error has
            the value ErrConnectionError). If no connection failure has occurred, this property returns zero. Use ConnectionErrorMessage to 
            retrieve the error message. Use this property to retrieve information only when the last returned error equals ErrConnectionError. 
            If you use ConnectionError for errors other than ErrConnectionError, you will be retrieving information that is not valid for the current error condition.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.ConnectionErrorMessage">
            <summary>
            Gets the text string describing the specific cause of the most recent general connection failure (when the last returned error has the value 
            ErrConnectionError). If no connection failure has occurred, this property returns an empty string. The connection error message strings are 
            stored internally in the connection library module of Reflection and cannot be changed. Use this property to retrieve information only when 
            the last returned error equals ErrConnectionError. If you use ConnectionErrorMessage for errors other than ErrConnectionError, you will be 
            retrieving information that is not valid for the current error condition.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.DeviceName">
             <summary>
             <c>Gets</c> or <c>sets</c> the device to connect to. 
             </summary>
             <remarks>
             If you do not specify a device name, Reflection creates a unique device name for the current session and provides it to the host when you log on. 
             If AutoConfig is not running on the host, the device name specified must match one of the device names stored on the host.
             This property causes an error when Reflection is connected to a host. Use the IsConnected property to determine if a connection already exists.
             
             This setting is only relevant to 5250 sessions or 3270 sessions using either Telnet or Telnet Extended.
            
             Values:
            
             The default is "".
             This string can be up to 10 characters long for 5250 sessions and up to 32 characters long for 3270 sessions.
             </remarks>
             <exception cref="T:System.ArgumentException">
             Thrown if the set parameter is too long for the current terminal type.
             </exception>
             <exception cref="T:Attachmate.Reflection.SecuredSettingException">
             This exception is thrown when you modify a property  
             that was secured via the Permissions Manager or 
             that can only be modified by an Administrator.
             </exception>
             <example>
             <code>
             IbmTerminal terminal;
             //Set the device name.
             terminal.DeviceName ="LocalHost";
             //Connect to the host server.
             terminal.Connect();
             </code>
             </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.FileTransfer">
            <summary>
            <c>Gets</c> the FileTransfer object.
            </summary>
            <example>
            <code>
            IbmTerminal terminal;
            //Gets the IFileTransfer object.
            IFileTransfer transfer =(IFileTransfer)terminal.FileTransfer;       
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.HostAddress">
            <summary>
            <c>Gets</c> or <c>sets</c> the host address.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            class Program
            {
               IbmTerminal terminal;
               
               public IbmTerminal Terminal
               {
                 set{ terminal = value; }
               }
             
               public void ConnectToHost()
               {
                 if(terminal != null)
                 {
                   //Gets the IFileTransfer object.
                   terminal.HostAddress = "211.77.20.1";      
                   //Connect to Host.
                   terminal.Connect();
                 }
                 else
                   throw new Exception("No terminal exists.");
               }
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.IsConnected">
            <summary>
            <c>Gets</c> a value indicating whether the session is connected.
            </summary>
            <example>
            <code>
            IbmTerminal terminal;
            //Gets whether the terminal is connected or not.
            bool connected = terminal.IsConnected;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.ContextMenus">
            <summary>
            <c>Gets</c> the ContextMenus object.
            </summary>
            <example>
            <code>
            /// class Program
            {
               private IbmTerminal terminal;
               private IContextMenus contextMenus;
               
               public IbmTerminal Terminal
               {
                  set { terminal = value; }
               }
            
               public IContextMenus GetContextMenus()
               {
                  if(terminal != null)
                  { 
                     contextMenus = terminal.ContextMenus;
                     return contextMenus;
                  }
                  else
                     throw new Exception("No terminal exists.");       
               }
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.KeyboardMapper">
            <summary>
            <c>Gets</c> the KeyboardMapper object.
            </summary>
            <example>
            <code>
            /// class Program
            {
               private IbmTerminal terminal;
               private IkeyboardMapper keyboardMapper
               
               public IbmTerminal Terminal
               {
                  set { terminal = value; }
               }
            
               public IKeyboardMapper GetKeyboardMapper()
               {
                  if(terminal != null)
                  { 
                     keyboardMapper = terminal.KeyboardMapper;
                     return keyboardMapper;
                  }
                  else
                     throw new Exception("No terminal exists.");       
               }
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.MouseMapper">
            <summary>
            <c>Gets</c> the MouseMapper object.
            </summary>
            <example>
            <code>
            class Program
            {
               private IbmTerminal terminal;
               private IMouseMapper mouseMapper;
               
               public IbmTerminal Terminal
               {
                  set { terminal = value; }
               }
            
               public IMouseMapper GetMouseMapper()
               {
                  if(terminal != null)
                  { 
                     mouseMapper = terminal.MouseMapper;
                     return mouseMapper;
                  }
                  else
                     throw new Exception("No terminal exists.");       
               }
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.UiControlActionMapper">
            <summary>
            Gets the object that allows mapping of actions to the user interface control and to retrieve action sequence from the user interface control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Macro">
            <summary>
            <c>Gets</c> the Macro object.
            </summary>
            <example>
            <code>
            class Program
            {
               private IbmTerminal terminal;
               private Imacro macro;
               
               public IbmTerminal Terminal
               {
                  set { terminal = value; }
               }
            
               public IMacro GetMacro()
               {
                  if(terminal != null)
                  { 
                     macro = terminal.Macro;
                     return macro;
                  }
                  else
                     throw new Exception("No terminal exists.");       
               }
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Model">
            <summary>
            <c>Gets</c> or <c>sets</c> the terminal model.       
            This property causes an error when Reflection is connected to a host. Use the Connected property to determine if a connection already exists.
            </summary>
            <seealso cref="T:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel"/>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.Model = TerminalModel.Model3179_2;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Modified">
            <summary>
            <c>Gets</c> a value indicating whether the session configuration has changed.
            </summary>
             <example>
            <code>
            IbmTerminal terminal;
            bool IsModified = terminal.Modified;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Screen">
             <summary>
             <c>Gets</c> the Screen object.
             </summary>
             <example>
             <code>
             class Program
             {
                private IIbmTerminal terminal;
                private IIbmScreen screen;
             
                public IIbmTerminal Terminal
                {
                   set { terminal = value; }
                }
            
                public IIbmScreen Screen
                {
                   get
                   {
                      if (terminal != null)
                      {
                         myScr = terminal.Screen;
                         return myScr;
                      }
                      else
                        throw new Exception("No terminal exsists.");
                   }
                }
                
             }
             </code>
             </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Productivity">
             <summary>
             <c>Gets</c> the Productivity object.
             </summary>
             <example>
             <code>
             class Program
             {
               private IbmTerminal terminal;
               private IProductivity product;
             
               public IbmTerminal Terminal
               {
                 set { terminal = value; }
               }
               
               public IProductivity GetProductivity()
               {
                 if(terminal != null)
                 {
                    product = terminal.Productivity;
                    return product;
                 }
                 else
                     throw new Exception("No terminal exists.");
               }
            
             }
             </code>
             </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TNAssociation">
             <summary>
             <c>Gets</c> or <c>sets</c> a string that identifies a 3270 terminal session on the host. 
             </summary>
             <remarks>
             Use this property to associate a 3270 terminal session with a specific 3270 printer session 
             for Telnet Extended sessions. Use TNAssociation to assign a unique TN Association string in the terminal session. 
             This string (maximum 260 characters) is used to link the two sessions when TN3287ConnectType is 
             set to 3287Associate in the printer session. 
             <para>For more information, see 
             "Associate a 3270 Printer Session with a Terminal Session" in the Reflection Help.
             </para>
             </remarks>
             <exception cref="T:System.ArgumentException">
             Thrown if the set parameter is longer than the maximum allowed.
             </exception>        
             <exception cref="T:Attachmate.Reflection.SecuredSettingException">
             This exception is thrown when you modify a property  
             that was secured via the Permissions Manager or 
             that can only be modified by an Administrator.
             </exception>
             <example>
             <code>
             class Program
             {
               private IbmTerminal terminal;
                
               public IbmTerminal Terminal
               {
                 set { terminal = value; }
               }
               
               public void SetTNAssociation()
               {
                 if(terminal != null)
                 {
                    terminal.TNAssociation = "TN3287ConnectType";
                   
                 }
                 else
                     throw new Exception("No terminal exists.");
               }
            
             }
             </code>
             </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TerminalType">
             <summary>
             <c>Gets</c> or <c>sets</c> the type of the terminal session.
             </summary>
             <example>
             <code>
             class Program
             {
               private IbmTerminal terminal;
                  
               public IbmTerminal Terminal
               {
                 set { terminal = value; }
               }
               
               public void SetTerminalType()
               {
                 if(terminal != null)
                 {
                    terminal.TerminalType = IbmTerminalType.Terminal3270;
                         
                 }
                 else
                     throw new Exception("No terminal exists.");
               }
            
             }
             </code>
             </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TypeAhead">
            <summary>
            <c>Gets</c> or <c>sets</c> a value indicating whether Reflection buffers characters
            that you type in the terminal window. 
            </summary>
            <remarks>
            When this property is true (the default), characters are buffered and sent to the host as soon as possible. 
            When it is <c>false</c>, characters are not buffered; anything you type while the host is not ready is lost.
            This setting is relevant to 5250 and 3270 terminal sessions.
            <para>
            If you're working with an AS/400 host, TypeAhead allows you to keep typing when the 
            keyboard is locked (for example, by a HLLAPI application). 
            Reflection does not buffer characters when input is inhibited.
            If you're working with a 3270 host, TypeAhead allows you to keep typing after you send data to the host. Without TypeAhead, characters 
            you type are ignored until the host is ready for more data (that is, until the X disappears from the Operator Information Area).
             </para></remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            //Set TypeAhead
            terminal.TypeAhead = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Version">
            <summary>
            <c>Gets</c> the version of terminal session control version.
            </summary>
            <example>
            <code>
            private IbmTerminal terminal;
            
            //get the terminal session version.
            public string GetTerminalVersion()
            {
              if(terminal != null)
               {
                  string version = terminal.Version;
                  return version;
               }
              else
                  throw new Exception("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.AidFieldExit">
            <summary>
            Gets or sets a value indicating whether to prevent or allow unrestricted sending of 
            aid key values (F1-F24 only) to the host from restricted input fields.
            </summary>
            <remarks>
            This property applies to 5250 sessions only.
            The default is False.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            terminal.AidFieldExit = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Apl">
            <summary>
            Gets or sets a value indicating whether APL mode is on (true) or off (false). 
            </summary>
            <remarks>
            This setting is valid for 3270 display sessions only.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            terminal.Apl = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.AsyncTransportEnabled">
            <summary>
            Gets or sets a value indicating whether the terminal reverts to polling mode for host interactions. 
            </summary>
            <remarks>
            This property is mainly used for diagnostic purposes.
            Setting this property causes an error when the terminal is connected to a host. Use the IsConnected property to determine if a connection already exists.
            The default is true.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            terminal.AsyncTransportEnabled = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.AutoIme">
            <summary>
            Gets or sets a value indicating whether IME (Input Method Editor) turns on or off automatically as the cursor
            moves. 
            </summary>
            <remarks>
            When this property is true (the default), IME automatically turns on when the cursor is
            in a double-byte input field and off when the cursor is in a single-byte input field.
            When it is false, the state of the IME does not change in response to the cursor's location. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            terminal.AutoIme = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.BDTIgnoreScrollLock">
            <summary>
            Gets or sets a value indicating whether or not the terminal ignores the state of scroll lock. 
            </summary>
            <remarks>
            When this value is true, the terminal ignores the scroll lock state.
            The default is false.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            terminal.BDTIgnoreScrollLock = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.BlinkRate">
            <summary>
            Gets or sets a value that specifies the blinking attribute 
            for text that the host displays in the terminal window.
            </summary>
            <remarks>
            This property applies to 3270 and 5250 terminal sessions.
            <list type="bullet"> 
            <listheader><term>Values</term></listheader>
            <item><term>NoBlink</term><description>The blinking attribute is ignored.</description></item>
            <item><term>Slow</term><description>Text blinks once every second.</description></item>
            <item><term>Medium</term><description>Text blinks twice every second. (The default.)</description></item>
            <item><term>Fast</term><description>Text blinks four times every second.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            class Pogram
            {
                private IbmTerminal terminal;
            
                public IbmTerminal Terminal
                {
                  set{ terminal = value; }
                }
                
                public void SetBlinkRate()
                {
                   if(terminal != null)
                   {
                     terminal.BlinkRate = TextBlinkRateOption.Fast;
                     terminal.Connect();
                   }
                   else
                     throw new Exception("No terminal exists.");
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.C370CharSet">
            <summary>
            Gets or sets a value indicating whether to use the C/370 code page, which
            provides support for square brackets ("[" and "]"). 
            </summary>
            <remarks>
            The default is false.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            terminal.C370CharSet = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Cegc">
            <summary>
            Gets or sets a value indicating whether additional characters (above character 128) in the
            configured National Character Set are available. 
            </summary>
            <remarks>
            When this property is set to <c>false</c> (the default), additional characters are not available. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            terminal.Cegc = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.CmdPrompt">
            <summary>
            Gets or sets the character or characters in the terminal window after
            which the terminal attempts to insert Quick Text when the WriteQuickText method
            is executed.
            </summary>
            <remarks>
            The default is ">" for 3270 sessions, and "===>" for 5250 sessions.
            This string can be up to 260 characters long.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            terminal.CmdPrompt = ">";
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.CmsFileListCommand">
            <summary>
            Gets or sets the file list command to issue on the CMS host to list files. 
            </summary>
            <remarks>
            When you click the Show Host Files button in the 
            Transfer dialog box, the terminal issues the file list command you specify.
            This property applies to 3270 sessions to CMS hosts only.
            The default value is "LISTFILE %s (EXEC".
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            terminal.CmsFileListCommand ="LISTFILE %s (EXEC";
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.ColumnSeparatorStyle">
            <summary>
            Gets or sets the character to use as the column separator in
            5250 terminal sessions.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>Dots</term><description>Terminal uses dots (.), or periods, 
            to separate columns. (The default.)</description></item>
            <item><term>VerticalLines</term><description>Terminal uses vertical lines (|) 
            to separate columns. (The default for the Japanese language version.)</description></item>
            </list>
            You can turn off the column separator display using the ShowDisplayAttribute method.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            terminal.ColumnSeparatorStyle = AS400ColumnSeperatorOption.Dots;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.CommandLineEnabled">
            <summary>
            Gets or sets a value indicating whether the terminal command line can be activated
            (for example, with the Alt-L keystroke). 
            </summary>
            <remarks>The default is true.</remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            terminal.CommandLineEnabled = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.RunMacroAtReconnect">
            <summary>
            Gets or sets a value indicating whether the ConnectAction sequence is re-run after a session is reconnected.
            </summary>
            <remarks>The default is false. This value cannot be set if no ConnectAction is currently configured.</remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.InvalidOperationException">This exception is thrown when attempting to set the value with no ConnectAction configured.</exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.BeforeConnectStartupAction">
            <summary>
            Gets or sets a sequence of action(s), such as running a macro, to run automatically before a
            connection is established. 
            </summary>
            <remarks>
            Before Connect Startup action sequences run before the terminal attempts to connect to the host.
            They should not include any actions that require a live host screen, such as sending keystrokes.       
            </remarks>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.ConnectAction">
            <summary>
            Gets or sets a sequence of action(s), such as running a macro, to run automatically after a
            connection is established. 
            </summary>
            <remarks>
            Connect action sequences run after the terminal has successfully made a connection to the host.
            They should not include session setup information.       
            </remarks>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.ConnectMacro">
            <summary>
            Gets or sets the name of a macro that is run automatically after a
            connection is established. 
            </summary>
            <remarks>
            You can use the ConnectMacroData property to
            specify information to be passed to this macro.
            The default value is "". The string can be up to 260 characters in length.
            Connect macros run after the terminal has successfully made a connection to the host.
            They should not include session setup information.       
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            class Program
            {
              private IbmTerminal terminal;
            
              public IbmTerminal Terminal
              {
                set{ terminal = value;}
              }
            
              public void SetConnectedMacro()
              {
                if(terminal != null)
                {
                  terminal.Connect();
                  terminal.ConnectMacro = terminal.ConnectMacroData;
                }
                else
                  throw new Exception("No terminal exists.");
              }
            }     
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.ConnectMacroData">
            <summary>
            Gets or sets a string that passes information to a connect macro.
            </summary>
            <remarks>
            When your connect macro runs, the value of MacroData is set equal to the value
            of ConnectMacroData.
            The default value is "".
            This string can be up to 260 characters long.
            <para>
            The value of the MacroData property changes whenever you pass macro data
            to a macro. (If you run a macro using the Macros dialog box, macro data is
            specified in the Macro data box. If you run a macro using the RunMacro method,
            macro data is specified with the second argument.) The ConnectMacroData
            property stores a fixed value that sets the value of MacroData whenever your
            connect macro runs. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            class Program
            {
              private IbmTerminal terminal;
            
              public IbmTerminal Terminal
              {
                set{ terminal = value;}
              }
            
              public void SetConnectedMacroData()
              {
                if(terminal != null)
                {
                  terminal.Connect();
                  terminal.ConnectMacroData = terminal.ConnectMacro;
                }
                else
                  throw new Exception("No terminal exists.");
              }
            }     
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.ConnectScript">
            <summary>
            Gets or sets a Reflection Basic script that runs automatically
            after a connection is established.
            </summary>
            <remarks>
            The default is "".
            This string can be up to 220 characters long.
            This property is ignored if you have specified a value for ConnectMacro.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            class Program
            {
              private IbmTerminal terminal;
            
              public IbmTerminal Terminal
              {
                set{ terminal = value;}
              }
            
              public string GetScript()
              {
                if(terminal != null)
                {
                  terminal.Connect();
                  string script = terminal.ConnectScript;
                  return script;
                }
                else
                  throw new Exception("No terminal exists.");
              }
            }     
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.ConnectScriptArguments">
            <summary>
            Gets or sets a parameter
            string to be passed to the connect script after a connection is established. 
            </summary>
            <remarks>
            Use the ConnectScript property to specify a connect script.
            The default is "".
            This string can be up to 220 characters long.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            class Program
            {
              private IbmTerminal terminal;
            
              public IbmTerminal Terminal
              {
                set{ terminal = value;}
              }
            
              public string GetConnectScriptArguments()
              {
                if(terminal != null)
                {
                  terminal.Connect();
                  string scriptArg  = terminal.ConnectScriptArguments;
                  return scriptArg;
                }
                else
                  throw new Exception("No terminal exists.");
              }
            }     
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.CursorMovementStyle">
            <summary>
            Gets or sets how the cursor moves between composed Thai characters.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>SkipCompositionElements</term>
            <description>The cursor moves over a composed Thai character as if it were a single character. (The default.)</description>
            </item>
            <item><term>IncludeAllCharacters</term>
            <description>The cursor treats the base character and combiner characters as single characters. </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
             
            terminal.CursorMovmentStyle = CursorMovementStyleOption.IncludeAllCharacters;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.CursorProgressionIndicator">
            <summary>
            Gets or sets a value indicating how the terminal responds to a host query to determine if the terminal
            supports End User Interface (EUI) enhancements. 
            </summary>
            <remarks>
            The terminal supports the cursor progression enhancement. Set this value to true only
            if you use a host application that uses cursor progression and queries to determine if EUI is supported. 
            <para>
            When this property is set to true, the terminal indicates to the host that
            it supports EUI enhancements, however cursor progression is the only EUI
            feature supported by the terminal. Do not change the value of this property to true unless 
            you're sure that the host uses only the cursor progression feature.</para>
            <para> 
            This property is only relevant for 5250 terminal sessions. The default value is false.
            </para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.CursorProgressionIndicator =true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.CustomColumns">
            <summary>
            Gets or sets the number of columns in the terminal window display
            when the terminal is configured to use the custom terminal model.
            </summary>
            <remarks>
            This property applies to 3270 terminal sessions only,The default is 132. 
            The range of values is 80-255.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.customColumns = 200;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.CustomRows">
            <summary>
            Gets or sets the number of rows in the terminal window display
            when the terminal is configured to use the custom terminal model.
            </summary>
            <remarks>
            This property applies to 3270 terminal sessions only.
            The default is 60. 
            The range of values is 24-255.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.CustomRows = 90;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.DbcsUnmappedChar">
            <summary>
            Gets or sets how the terminal translates double-byte host characters
            that are not available in the Shift-JIS double-byte character translation
            table. This property affects file transfers and printed output.
            This property is applicable to double-byte sessions only.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>DbcsBlank</term><description>Blank (DBCS 8140 character) The default.</description></item>
            <item><term>OutlineRect</term><description>Outline rectangle (DBCS 81A0 character)</description></item>
            <item><term>FilledRect</term><description>Filled rectangle (DBCS 81A1 character)</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.DbcsUnmappedChar = DbcsUnmappedCharOption.DbcsBlank;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.DbcsUserDefinedCharacterSource">
            <summary>
            Gets or sets whether user-defined character fonts are located on the host (HostImages) 
            or on the PC (PCEndUserDefinedImages). 
            </summary>
            <remarks>
            This property is applicable to 5250 sessions only.
            The default is HostImages. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.DbcsUserDefinedCharaterSource = DbcsUserDefinedCharacterSourceOption.PCEndUserDefinedImages;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.DefaultPorts">
            <summary>
            Gets or sets a value indicating whether the terminal attempts to communicate
            with the host transaction programs using the default port numbers
            (as defined by IBM). 
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Port Numbers:</term></listheader>
            <item><term>Server</term><description>Default Port</description></item>
            <item><term>Central server</term><description>8470</description></item>
            <item><term>Database server</term><description>8471</description></item>
            <item><term>Sign-on server</term><description>8476</description></item>  
            <item><term>File transfer server</term><description>8478</description></item>
            </list>
            If this property is set to false, the terminal attempts to discover the
            available ports, resulting in a small increase in connecting time.
            This property is relevant for 5250 file transfer over TCP/IP.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.DefaultPorts = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.DisplayMargins">
            <summary>
            Gets or sets a value indicating whether to display margins around the terminal window. 
            </summary>
            <remarks>
            When this property is set to false, no margins are displayed and
            the terminal attempts to make the text fill the terminal window. 
            Depending on the screen resolution, the current screen, and the size of
            your terminal window, you may not see an effect in the terminal window.
            The default is true.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.DisplayMargins = true; 
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.EnableHostAlarm">
            <summary>
            Gets or sets a value indicating whether to sound alarms (beeps) sent by the host.
            The default is true.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.EnabledHostAlarm = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.EnterKeyRepeat">
            <summary>
            Gets or sets a value indicating whether holding down the ENTER key is equivalent to
            pressing it multiple times. 
            </summary>
            <remarks>
            When this property is false, holding down
            the ENTER key is equivalent to pressing it one time.
            The default is true.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.EnterKeyRepeat = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.ExpressLogonFeatureApplid">
            <summary>
            Gets or sets the application ID to use for the Express Logon Feature (ELF) setting. 
            </summary>
            <remarks>
            This property applies to 3270 Telnet and Telnet Extended sessions only.
            The default is "".
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.FileSystem">
            <summary>
            Gets or sets whether the terminal uses the ANSI character set
            or the ASCII character set for ASCII transfers from the host.
            </summary>
            <remarks> 
            Do not change the value of this property from the default (rcWindows)
            if you're using the AS/400 data transfer feature.
            <list type="bullet">
            <listheader><term>Values:</term></listheader> 
            <item>
            <term>Windows</term>
            <description>Characters are assumed to be ANSI and are not translated.</description></item>
            <item><term>DOS</term>
            <description>Characters are translated to ASCII (also known as the OEM character set) 
            before being sent or after being received from the host.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.FileSystem = FileSystemOption.Windows;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.GenerateDeviceNames">
            <summary>
            Gets or sets a value indicating whether the terminal automatically generates device
            name values based on values you specify for the DeviceName property.
            </summary>
            <remarks>
            GenerateDeviceNames is only available for 5250 Telnet sessions.
            The default value is false.
            <list type="bullet">
            <listheader><term>DeviceName Characters</term>
            <description>In the DeviceName value, you can include any of the following characters:</description>
            </listheader>
            <item> <term>Character</term>
            <description>How this character is used.</description></item>
            <item><term>*</term>
            <description>Replaced by "A", "B", "C", and so on for each new session. If the entire alphabet is used,
             the generated device names continue with "AA", "AB", "AC", and so on. </description></item>
            <item><term>%</term>
            <description>Replaced by "P" for printer sessions and "S" for display sessions.</description></item>
            <item><term>=</term>
            <description>Replaced by "1", "2", "3", and so on.</description></item>
            <item><term>;ampCOMPN</term>
            <description>Replaced by the local workstation name. If the generated name exceeds 10 characters, 
            the excess characters are trimmed from the left (unless + is also used).  This character cannot
            be used with ";ampUSERN". </description></item>
            <item><term>;ampUSERN</term>
            <description>Replaced by the local user name, left-trimmed if the generated name exceeds 
            10 characters. If the generated name exceeds 10 characters, the excess characters are trimmed 
            from the left (unless + is also used). This character cannot be used with ";ampCOMPN".</description></item>
            <item><term>+</term>
            <description>Use this character with ";ampUSERN" or ";ampCOMPN" to specify trimming from the right
            instead of from the left. This can be placed anywhere in the string.</description></item>
            </list>
            You can use only one string literal in combination with these characters.
            If you use separated strings, the second string is dropped. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.GenerateDeviceNames = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.GraphicsDevice">
            <summary>
            Gets or sets the type of graphics device the terminal emulates for
            3179G terminal sessions. 
            </summary>
            <remarks> 
            You cannot change this property when you are
            connected to a host.
            This property is only relevant for 3270 terminal sessions.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>Gddmpcgx</term><description>Configure as a GDDM PCGX graphics terminal.</description></item>
            <item><term>Gddmpcg</term><description>Configure as a GDDM PCG graphics terminal.</description></item>   
            <item><term>Ibm3179G</term><description>Configure as an IBM 3179G graphics terminal.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.GraphicsDevice = GraphicsDeviceOption.Gddmpcgx;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.GraphicsExtendedColors">
            <summary>
            Gets or sets a value indicating whether the terminal uses the set of extended 
            graphics colors (black, white, dark blue, orange, purple, dark green, dark turquoise, mustard, gray, and brown). 
            </summary>
            <remarks>
            When this property is <c>false</c> (the default), the extended graphics colors are not used.
            This property is only relevant for 3270 terminal sessions. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.GraphicsExtendedColors = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.GraphicsEnabled">
            <summary>
            Gets or sets a value indicating whether the terminal is configured for a 3179G
            terminal session with the host.
            </summary>
            <remarks>
            This property is only relevant for 3270 terminal sessions.
            The default is <c>false</c>.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.GraphicsEnabled = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.HostCommTimeout">
            <summary>
            Gets or sets how many seconds the terminal waits for a host
            connection response. 
            </summary>
            <remarks> 
            If there is no response from the host in the allotted
            time, an error results.
            The default is 60. The range of values is 1-9999 seconds.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
             <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.HostCommTimeout = 500;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.HostControlsOutlineColor">
            <summary>
            Gets or sets a value indicating whether the host determines the color of field outline
            characters. 
            </summary>
            <remarks>
            When this property is false (the default), the color of field outline 
            characters can be configured in the Display Setup dialog box or using 
            SetColorMap.
            This property is only relevant for 5250 terminal sessions. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.HostControlsOutLineColor = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.HostCursorBlinkControl">
            <summary>
            Gets or sets a value indicating whether the host controls the cursor blink rate.
            </summary>
            <remarks>
            When this property is true, the host controls the cursor blink. When this
            property is false (the default), the host does not control the cursor blink rate. 
            Use the CursorBlinkRate property to control the blink rate from the terminal.
            This property is only relevant for 5250 terminal sessions. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.HostCursorBlinkControl = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.HostKeyboardType">
            <summary>
            Gets or sets which keys can be used in numeric fields. 
            </summary>
            <remarks>
            This property is only relevant for 3270 terminal sessions. 
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>DataEntry</term><description>Specifies that all keys can be used.</description></item>
            <item><term>NormalKbd</term><description>Specifies that only numeric keys 
            (either the number keys on the typewriter keyboard and those on the keypad) 
            and certain symbol keys (+ - . ,) can be used. (The default.)</description></item>
            <item><term>Typewriter</term><description>Specifies that uppercase letters (A-Z), shifted number keys 
            (producing symbols like !, @, and #), and the number keys on the keypad can be used.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.HostKeyboardType = HostKeyboardTypeOption.DataEntry;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.HostNumlockControl">
            <summary>
            Gets or sets a value indicating whether the host can turn NumLock on.
            </summary>
            <remarks>
            The default is <c>false</c>.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.HostNumLockControl = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.IgnoreEUICmdErr">
            <summary>
            Gets or sets a value indicating whether Enhanced User Interface command errors are ignored. 
            </summary>
            <remarks>
            This property is related to CursorProgressIndicator property and is only 
            applicable when CursorProcessIndicator is set to true.
            The default is false.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.IgnoreHostPrintReq">
            <summary>
            Gets or sets a value indicating whether a print command in a host data stream is 
            accepted. 
            </summary>
            <remarks>
            When this property is set to true (the default), a print command in a host 
            data stream is ignored.
            This property applies to 3270 terminal sessions only.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.IgnoreHostPrintReq = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.InputFieldUnderlines">
            <summary>
            Gets or sets how the terminal underlines input fields on host screens. 
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item>
            <term>UnderlineAlways</term><description>All input fields on host screens are underlined.</description>
            </item>
            <item>
            <term>UnderlineHostControl</term><description>The host determines which input fields are underlined. (The default.)</description>
            </item>
            <item>
            <term>UnderlineNever</term><description>Input fields on host screens are not underlined.</description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.InputFieldUnderlines = InputFieldUnderlinesOption.UnderlineAlways;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.InsertArena">
            <summary>
            Gets or sets the extent to which the terminal applies the logic for character
            insertion as described for the InsertProtocol property.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item> 
            <term>AllUnprotectedFields</term>
            <description>Changes are allowed to all unprotected fields in the partition.</description>
            </item>
            <item>
            <term>CurrentField</term>
            <description>No change is allowed to any field except the current field. (The default.)</description>
            </item>
            <item>
            <term>LocalUnprotectedFields</term>
            <description>Changes are allowed to the current field and to other local unprotected fields. 
            If two or more unprotected fields are contiguous (that is, not separated by any protected fields) they are local.</description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.InsertArena = InsertArenaOption.LocalUnprotectedFields;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.InsertProtocol">
            <summary>
            Gets or sets what the terminal should do if you attempt to 
            insert a character.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item>
            <term>FirstNull</term>
            <description>Makes room for the inserted character by moving all characters to the right 
            of the insertion point one character space until a null is encountered. 
            The null is replaced by a character and all subsequent characters are unchanged. 
            If no null is found, the insertion fails.</description>
            </item>
            <item>
            <term>FirstNullOrTrailingChar</term>
            <description>Replaces the last character in the insert arena on an insert if neither 
            a null nor a trailing space is found. </description>
            </item>
            <item>
            <term>FirstNullOrTrailingSpace</term>
            <description>Uses the same logic as rcFirstNull except that a trailing space can be used if no null is found.</description>
            </item>
            </list>
            The logic that the terminal applies can be over a single field, multiple local
            fields, or all unprotected fields. See the InsertArena property.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.InsertProtocol = InsertProtocolOption.FirstNullOrTrailingChar;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.KeyboardErrorAlarm">
            <summary>
            Gets or sets a value indicating whether to sound the alarm (a beep) when a keyboard
            error is detected.
            </summary>
            <remarks>
            This property applies to 5250 sessions only.
            The default is false.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.KeyboardErrorAlarm = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.KeyboardErrorReset">
            <summary>
            Gets or sets how keyboard errors are processed. 
            </summary>
            <remarks>
            Keyboard errors appear on the host status line 
            (in 5250 sessions) or operator information area (in 3270 sessions). 
            Standard terminal behavior requires that you press Reset to clear the 
            error before you can resume data entry.  
            <para>
            This option is only applicable in data processing (not Text Assist) mode.
            </para>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item>
            <term>AutoReset</term>
            <description>Any key you press (not just Reset) clears the error, restores the previous error line data, 
            and attempts to execute the keystroke as follows:
            If the cursor is in a valid input field and the key is a data key, the data is entered, provided the data is valid for that field.
            If the cursor is in a valid input field and the key is a function key, the key operation is executed.
            If the current cursor position is not in a valid input field and the key is a data key, the cursor is moved to the next valid input field where the data is entered, provided the data is valid fo that field. 
            If the current cursor position is not in a valid input field and the key is a function key, the cursor is moved to the next valid input field and the key is ignored.
            If the current AS/400 screen contains no valid input fields, an error appears with each keystroke you press, and no keystrokes are executed.
            </description>
            </item>
            <item>
            <term>AutoResetNoMessage</term>
            <description>No error is reported and Reflection attempts to execute the keystroke as follows:
            If the cursor is in a valid input field, the key (whether a data key or a function key) is ignored. 
            If the cursor is not in a valid input field and the key is a data key, the cursor is moved to the next valid input field where the data is entered, provided the data is valid for that field.
            If the cursor is not in a valid input field and the key is a function key, the cursor is moved to the next valid input field and the key is ignored.
            Use this value with caution, because it prevents you from being notified you of keyboard errors. If you use this value in 5250 sessions, 
            it's recommended that you also change the value of the KeyboardErrorAlarm to true, so you'll hear an alarm (a beep) when you encounter a keyboard error.
            </description>
            </item>
            <item>
            <term>NoAutoReset</term>
            <description>Standard terminal behavior (that is, you must press Reset to clear the error before resuming data entry).</description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.KeyboardErrorReset = KeyboardErrorResetOption.NoAutoReset;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.KeysDuringWait">
            <summary>
            Gets or sets a value indicating whether the user can use the keyboard during a 
            synchronous command. 
            </summary>
            <remarks>
            A synchronous command is one that causes a procedure to pause until a defined wait expires. 
            For example, Wait or WaitEvent.  
            The default is true.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.KeysDuringWait = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.KoreanEUCCIMEBehavior">
            <summary>
            Sets to mimic Korean EUCC Input Method Editor (IME) behavior.
            The default is false.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.MappedNumlockPreservesNumlock">
            <summary>
            Gets or sets how the terminal behaves when a user presses the PC 
            NUM LOCK key that is mapped to emulate the action of a terminal key.
            </summary>
            <remarks>
            When this property is true (the default) pressing the NUM LOCK key 
            sends the mapped keystroke to the host and also preserves the current 
            Num Lock state of the PC keyboard. 
            <para>
            When this property is false, pressing the NUM LOCK key sends the mapped 
            keystroke to the host and also toggles the PC Num Lock state. 
            The Num Lock indicator light will toggle each time you press the NUM LOCK key.
            </para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.MappedNumlockPreservesNumlock = false;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Port">
            <summary>
            Gets or sets the TCP port to connect to.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.Port =  8087;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.HostTypeAheadControl">
            <summary>
            Gets or sets whether the terminal honors the keyboard buffering
            control setting in the AS/400 user profile.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.HostTypeAheadControl = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Theme">
            <summary>
            Gets the theme object.
            </summary>
            <example>
            <code>
            class Program
            {
               private IbmTerminal terminal;
               private ITheme theme;
            
               public IbmTerminal Terminal
               {
                 set { terminal = value; }
               }
            
               public ITheme GetTheme()
               {
                  if(terminal != null)
                  {
                     theme = terminal.Theme;
                     return theme;
                  }
                  else
                     throw new Exception("No terminal exists");
               }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.SingleSignOn">
            <summary>
            This property returns or specifies whether Reflection enables the use of
            a single user name and password for multiple logon procedures. 
            </summary>
            <remarks>
            The effect of this property depends on how your system is configured:  
            If you connect to a 5250 host using an SNA server, this property
            determines whether your SNA Server user name and password are 
            used for your AS/400 sign-on. For terminal sessions, setting this value
            to true automatically signs you on to the AS/400. For AS/400 data
            transfers, setting this value to true satisfies your security
            requirements to the AS/400 and gives you access to your AS/400 files.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.SingleSignOn = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Support3270Partitions">
            <summary>
            Gets or sets a value indicating whether to send partition-related information from 
            the terminal to the host in response to a host query request. 
            </summary>
            <remarks>
            This property is relevant for host applications that are not designed to handle terminals
            that support partitions. When this property is true, the terminal includes partition-related 
            information in its response to a host query request. 
            You cannot change the value of this property while a connection exists.
            <para>
            This property is only relevant for 3270 terminal sessions.
            </para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.Support327Partitions = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.SupportDbcsFeatures">
            <summary>
            Gets or sets a value indicating whether double-byte character support is enabled. 
            </summary>
            <remarks>
            This property is applicable to double-byte 3270 sessions only.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.SupportDbcsFeatures = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TelnetAttn">
            <summary>
            Gets or sets what happens when you transmit the ATTN
            host key (the default keystroke for this function is Ctrl+F1).
            </summary>
            <remarks>
            The definition of this key and its values vary by host application.
            This property is only relevant for 3270 Telnet sessions.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item>
            <term>TelnetAbortOutput</term>><description>Sends a Telnet Abort Output to the host.</description>
            </item>
            <item>
            <term>TelnetBreak</term><description>Sends a Telnet Break to the host. (The default.)</description>
            </item>
            <item> 
            <term>TelnetIntProcess</term><description>Sends a Telnet Int Process to the host.</description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.TelnetAttn = TelnetAttnOption.TelnetAbortOutput;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TelnetEnvironment">
            <summary>
            Gets or sets a string that is passed to an "Exit program" 
            on an AS/400 host when Reflection makes a Telnet connection. 
            </summary>
            <remarks>
            Exit programs run when a Telnet session is either initiated or terminated 
            and use this format:
            <para>
            keyword=value; keyword=value; keyword=value
            </para>
            <para>When you use Auto SignOn (AutoSignon = True), Reflection
            automatically signs on to the host using the current values of the
            UserName and Password properties. You can set TelnetEnvironment to 
            specify additional, non-default sign on options using any of the 
            following keywords in the Exit program string:</para>
            <list type="bullet"> 
            <listheader><term>Keywords</term></listheader>
            <item>
            <term>IBMPROGRAM</term>
            <description>Sets the program to call (equivalent of the Sign On menu's Program/procedure option).</description>
            </item>
            <item>
            <term>IBMIMENU</term>
            <description>Sets the initial menu (equivalent of the Sign On menu).</description>
            </item>
            <item>
            <term>IBMCURLIB</term>
            <description>Sets the current library (equivalent of the Sign On menu's Current library option).</description>
            </item>
            </list>
            <para>
            You cannot change the value of this property while you are connected.
            This property applies only to 5250 terminal sessions using Telnet.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.TelnetEnvironment = "IBMIMENU";
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TelnetKeepAlive">
            <summary>
            Gets or sets whether Reflection periodically polls the host
            to determine if Telnet connections remain active during intervals 
            when you are not sending data to the host. 
            </summary>
            <remarks>
            Normally, Reflection
            becomes aware of Telnet communication problems only after a 
            significant delay, or when it attempts to send data to the host. 
            Because of this, you can lose your connection to the host and not 
            be immediately aware of it. This can cause problems if you enter a 
            large amount of data on one screen, or if you keep your connection open
            during periods of inactivity.
            <para>
            To become aware of connection problems as they occur, you can 
            configure Reflection to send Keep Alive packets. 
            </para>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item>
            <term>KeepAliveNone</term>
            <description>Reflection does not send any keep alive packets to the host. (The default.)</description>
            </item>
            <item>
            <term>KeepAliveNOP</term>
            <description>Reflection periodically sends a No Operation (NOP) command to the host. 
            The gateway and host are not required to respond to these commands, but
            the TCP/IP stack can detect if there was a problem delivering the packet.
            Use KeepAliveTimeout to control the interval between requests.</description> 
            </item>
            <item>
            <term>KeepAliveSystem</term>
            <description>The TCP/IP stack keeps track of the host connection. This value requires
            less system resources than rcKeepAliveTimingMark or rcKeepAliveNOP, but 
            most TCP/IP stacks send Keep Alive packets infrequently.</description>
            </item>
            <item>
            <term>KeepAliveTimingMark</term>
            <description>Reflection periodically sends a Timing Mark Command to the host to 
            determine if the connection is still active. The gateway or host should
            respond to these commands. If Reflection does not receive a response or
            there is an error sending the packet, it will shut down the connection. 
            Use KeepAliveTimeout to control the interval between requests. The 
            TelnetKeepAliveAverage property returns the average amount of time 
            Reflection has waited for a response to a Timing Mark Command.</description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.TelnetKeepAlive = KeepAlivePacketsOption.KeepAliveSystem;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TelnetKeepAliveTimeout">
            <summary>
            Gets or sets the interval, measured in seconds, between keep alive
            requests sent by Reflection. 
            </summary>
            <remarks>
            This property is relevant only if 
            TelnetKeepAlive is set to KeepAliveNOP or KeepAliveTimingMark.
            The default value is 600. The range of values is 1 to 9999.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.TelnetKeepAliveTimeout = 700;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TelnetSysReq">
            <summary>
            Gets or sets what happens when you transmit the SysReq function
            (mapped to the Alt-PrintScreen keystroke, by default). 
            </summary>
            <remarks>
            The definition of
            this key varies by host application.
            This property is only relevant when the SessionType property is set to
            3270Terminal.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>TelnetAbortOutput</term><description>Sends a Telnet Abort Output to the host.</description></item>
            <item><term>TelnetBreak</term><description>Sends a TelnetBreak to the host.</description></item>
            <item><term>TelnetIntProcess</term><description>Sends a Telnet Int Process to the host. (The default.)</description></item>
            <item><term>TestRequestRead</term><description>Sends a Test Request Read to the host.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.TelnetSysReq = TelnetSysReq.TestRequestRead;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TelnetXSystem">
            <summary>
            Gets or sets a value indicating whether X SYSTEM is supported in 3270 sessions. 
            </summary>
            <remarks>
            X SYSTEM is a keyboard locked state that occurs when the host ends a 
            transmission to the workstation without unlocking the keyboard. Some 
            applications use this to notify you of a message written to the display,
            which requires that you reset the keyboard before you can type again. Other
            applications rely on SNA to unlock the keyboard.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.TelnetXsystem = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.WordWrap3270">
            <summary>
            Gets or sets a value indicating whether text wraps to the next available field
            when entered text is too long to fit in a text entry field.
            </summary>
            <remarks>
            This property only applies to 3270 sessions.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.WordWrap3270 = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.WordWrap5250">
            <summary>
            Gets or sets whether text is truncated at the end of the 
            current field or wrapped to the next available field, and whether 
            the host controls this behavior.
            </summary>
            <remarks>
            This property only applies to 5250 sessions.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item>
            <term>Host</term>
            <description>Text wraps to the next available field as controlled by the host. (The default.)</description>
            </item>
            <item>
            <term>Local</term>
            <description>Text wraps to the next available field as controlled by Reflection.</description>
            </item>
            <item>
            <term>Off</term>
            <description>Text does not wrap to the next available field. Instead, it is truncated at the end of the current field.</description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.WordWrap5250 = AS400WordWrapOption.Local;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.WordWrap3270MinimumFieldLength">
            <summary>
            Gets or sets the minimum field length required for word wrap
            in 3270 terminal sessions. 
            </summary>
            <remarks>
            If a field is less than this length, text does not wrap to the next available field, 
            regardless of the current value of the WordWrap3270 property.
            This setting affects 3270 sessions only and is ignored if WordWrap3270
            is false.
            The default value is 10 for all templates except Legacy Reflection which has a default of 40.
            The range of values is 10 - 132.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.WordWrap3270MinimumFieldLength = 120;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.EnableTelnetEncryption">
            <summary>
            Gets or sets a value indicating whether Reflection uses Secure Sockets Layer/Transport
            Layer Security (SSL/TLS) datastream encryption. 
            </summary>
            <remarks>
            If TelnetEncryption is true, but your host does not support TLS, 
            Reflection will attempt to use SSL instead. If your host supports 
            neither SSL nor TLS, an error message will appear when you try to connect, 
            and your connection attempt will fail.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.EnableTelnetEncryption = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.EnableTelnetEncryptionUseStartTls">
            <summary>
            Gets or sets a value indicating whether SSL/TLS is negotiated via Telnet option STARTTLS
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TelnetEncryptionDisableCRLCheck">
            <summary>
            Gets or sets a value indicating whether Reflection checks for certificate revocation
            when validating host certificates in SSL/TLS Telnet sessions. 
            </summary>
            <remarks>
            When this property is true, Reflection does not perform CRL checking.
            Disabling CRL checking increases your security risk.
            The default is false, which enables CRL checking and reduces your 
            security risk.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.TelnetEncryptionDisableCRLCheck = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TelnetEncryptionStrength">
            <summary>
            Gets or sets the encryption strength for Secure Sockets 
            Layer/Transport Layer Security (SSL/TLS) datastream encryption. 
            </summary>
            <remarks>
            The value of this property is only relevant if EnableTelnetEncryption is enabled.
            <para>The available values are: Default, Bits40, Bits56, Bits128, Bits168, and Bits256.</para>
            <para>When set to Default, the encryption strength is established by the host 
            and Reflection during handshaking. If you set encryption strength to a specific value, 
            the server must support this encryption level. If the server does not support this level, 
            the connection will not be established. If you are running in FIPS mode 
            and specify Default, Reflection negotiates using only FIPS 
            compliant encryption levels.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.TelnetEncryptionStrength = TelnetEncryptionStrengthOption.Bits128;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TelnetEncryptionVerifyHostName">
            <summary>
            Gets or sets a value indicating how Reflection handles SSL/TLS Telnet 
            connections when the host name in the certificate does not 
            match the host being contacted. 
            </summary>
            <remarks>
            When this property is true (the default), the host name in the certificate must match 
            the host you are contacting. 
            This property is only relevant if EnableTelnetEncryption is true.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.TelnetEncryptionVerifyHostName = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TelnetUseReflectionSecurityProxy">
            <summary>
            Gets or sets a value indicating whether Reflection makes makes secure SSL 
            connections via the Reflection for the Web Security Proxy when
            EnableTelnetEncryption is true.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.TelnetUseReflectionSecurityProxy = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.HostCodePage">
            <summary>
            Gets or sets which character set Reflection uses for character translations.
            </summary>
            <remarks>
            The default is USEnglish.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.HostCodePage = HostCodePageOption.Arabic;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.UseIPV6">
            <summary>
            Gets or sets a value indicating whether Reflection uses version 6 of the Internet Protocol.
            </summary>
            <remarks>
            By default this value is False. Please contact technical support if you 
            need support for IP version 6. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.UseIPV6 = true;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.MouseShape">
            <summary>
            Gets or sets the appearance of the mouse pointer in the terminal window.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.MouseShape = MouseShapeOption.IBeam;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TsoFileListCommand">
            <summary>
            Gets or sets the name of the host exec to run when the Show Host 
            Files button in the Transfer dialog box is clicked.
            </summary>
            <remarks>
            This property applies to 3270 sessions to TSO hosts only.
            The default is "wrqlcat %s".
            This string can be up to 260 characters long.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.TsoFileListCommand = "wrqlcat %s";
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TsoMemberListCommand">
            <summary>
            Gets or sets the name of the host exec to run when when a 
            member is expanded in the Transfer dialog box is clicked.
            </summary>
            <remarks>
            This property applies to 3270 sessions on TSO hosts only.
            The default is "wrqlcat %s".
            This string can be up to 260 characters long.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.TsoMemberListCommand = "wrqlcat %s";
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.HllapiLongName">
            <summary>
            Identifies the HLLAPI application associated with a particular Reflection session. 
            </summary>
            <remarks>
            The default is "".
            This string can be up to eight characters long. This string is not used by the HLLAPI application.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.HllapiShortName">
            <summary>
            Gets or sets an identifier that a HLLAPI application uses to link 
            to a Reflection session.
            </summary>
            <remarks>
            The default is "".
            This is a one-character string. The character must be a capital letter (A-Z).
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.HllapiShortName = "M";
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.HllapiStyle">
            <summary>
            Gets or sets Reflection's HLLAPI configuration. This is a 
            numeric value. 
            </summary>
            <remarks>
            The possible numeric values for this style are "bit masks" that contain 
            separate bits of information about Reflection's HLLAPI configuration. 
            To derive a value, add the value for each of the bits you want to turn on. 
            For example, to turn on the first bit (decimal value = 1), the fourth bit 
            (decimal value = 8), and the 10th bit (decimal value = 512), add these 
            three numbers (1 + 8 + 512 = 521) and use the total as the numeric value.
            <para>
            The default value, RumbaStyle, is equivalent to decimal 297 (1+8+32+256) 
            and hexadecimal 0x0129. 
            </para>
            <para> You could set this value using any of these statements:</para>
            <para>RumbaStyle = 297</para>
            <para>RumbaStyle = 0x0129</para>
            <para>ExtraStyle = 21376</para>
            <para>ExtraStyle = 0x5380</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private IbmTerminal terminal;
            
            terminal.HllapiStayle = 21376;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TelnetTerminalID">
            <summary>
            This property allows you to override the Telnet terminal ID string that 
            Reflection generates and sends to the Telnet gateway, based on the Model ID 
            you select in the session settings. 
            </summary>
            <remarks>
            This allows you to specify a Telnet terminal ID
            that Reflection does not implicitly support (but might work with), such as FUJITSU.
            <para>If this property is set to a text string, that text string replaces the 
            Telnet terminal ID string that Reflection generates. Leave this setting 
            blank if you want to use the Model ID specified in the session settings.</para>
            <para>This property applies to Telnet sessions only.
            The default value is "".</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.DisableKeystrokeProductivity">
            <summary>
            When this property is set to true, all keystroke Productivity functionality 
            (such as Spell Check and Auto Complete) is disabled.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.DisableScreenHistory">
            <summary>
            When this property is set to true, Screen History is disabled.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.VBProject">
            <summary>
            VBA Use only.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.VBCommonProject">
            <summary>
            VBA Use only.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.UseIDManagement">
            <summary>
            Gets or sets a value indicating whether Reflection uses ID Management to obtain a device name.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.IDMServerURL">
            <summary>
            Gets or sets ID Management server URL. 
            </summary>
            <remarks> 
            The default value is "".
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.IDMCriteria">
            <summary>
            Gets or sets ID Management criteria flags. 
            </summary>
            <remarks>
            The default value is 0.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.IDMPoolName">
            <summary>
            Gets or sets ID Management pool name. 
            </summary>
            <remarks> 
            The default value is "".
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TelnetEncryptionUseOCSP">
            <summary>
            Gets or sets a value indicating whether  your client session checks for certificate revocation using 
            OCSP (Online Certificate Status Protocol) responders when validating host certificates. 
            The default is false.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TLS_SSLVersion">
            <summary>
            Gets or sets a value indicating which SSL or TLS version to use.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.SSLValidateCertChain">
            <summary>
            Gets or sets a value indicating whether certificates presented for host authentication are checked
            to determine if they are valid and signed by a trusted CA. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.TitleBarCaption">
            <summary>
            Gets or sets the string that appears in the Reflection title bar. This string
            is only relevant when the workspace user interface mode is set to Classic SDI. 
            
            The caption length maximum value is 260 characters.
            
            The default is &amp;f - &amp;r - &amp;s
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.ShowMenuBar">
            <summary>
            Gets or sets the Menu Bar visibility. This setting is 
            only relevant when the workspace user interface mode is set to Classic SDI. 
            The default is true
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.ShowClassicStatusBar">
            <summary>
            Gets or sets the Status Bar visibility. This setting is 
            only relevant when the workspace user interface mode is set to Classic SDI. 
            The default is true
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.StatusBarText">
            <summary>
            Gets or sets the status bar text . This setting is relevant for all UI modes
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Execute(Attachmate.Reflection.Emulation.IbmHosts.InputMapAction)">
            <summary>
            Execute a given action. Actions possible is defined in InputMapActionID.
            </summary>
            <seealso cref="T:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID"/>
            <param name="action">The action to be executed.</param>
            <returns>ReturnCode value indicates the success or error conditions.</returns>
            <example>
            <code>
            private IbmTerminal terminal;
            public ReturnCode ShowSettings()
            {
                // opens settings configuration
                return terminal.Execute(new InputMapAction(InputMapActionID.SettingsAction, new object[] {}));
            }
            </code>
            </example> 
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Close(Attachmate.Reflection.CloseOption)">
            <summary>
            This method closes the terminal session with the close option.
            </summary>
            <param name="option">Close option indicates how to handle the save action upon closing the control.</param>
            <returns>ReturnCode value indicates the success or error conditions.</returns>
            <example>
            <code>
            class Program
            {
               private IbmTerminal terminal;
               private ReturnCode code;
            
               public IbmTerminal Terminal
               {
                 set{terminal = value;}
               }
            
               public ReturnCode CloseTerminalSession()
               {
                 if(terminal !=null)
                 {
                   code = terminal.Close(CloseOption.CloseAskSave);
                   return code;
                 }
                 else
                   throw new Exception("No terminal exists.");
               }
            } 
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Connect">
             <summary>
             Connects to the host. 
             </summary>
             <remarks>
             This method returns an error if the connection cannot be made successfully. It is ignored if a connection already exists. 
             Use the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.IsConnected"/> property to determine if a connection already exists. 
             Use <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.HostCommTimeout"/> to specify how many seconds Reflection waits for a host response. 
             </remarks>
             <example>
             <code>
             class Program
             {
                private IIbmTerminal terminal;
            
                public IIbmTerminal Terminal
                {
                  set { terminal = value; }
                }
            
                public void GetConnected()
                {
                   if (terminal != null)
                   {
                      try
                      {
                          terminal.Connect();
                          Console.WriteLine("Connected!");
                      }
                      catch
                      {
                         Console.WriteLine("Fails to connect to host.");
                      }
                   }
                   else
                      Console.WriteLine("No terminal exsists.");
               }
             }
             </code>
             </example>
             <returns>Connection Status</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Disconnect">
             <summary>
             Disconnects from the host. 
             </summary>
             <remarks>
             If no connection currently exists, this method is ignored. 
             Use the IsConnected property to determine if a connection already exists.
             </remarks>
             <example>
             <code>
             class Program
             {
                private IIbmTerminal terminal;
            
                public IIbmTerminal Terminal
                {
                  set { terminal = value; }
                }
            
                public void GetConnected()
                {
                   if (terminal != null)
                   {
                      try
                      {
                          if(terminal.IsConnected == true)
                          {
                            terminal.Disconnect();
                            Console.WriteLine("Connected!");
                          }
                      }
                      catch
                      {
                         Console.WriteLine("Fails to connect to host.");
                      }
                   }
                   else
                      Console.WriteLine("No terminal exsists.");
               }
             }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Save">
            <summary>
            Saves all settings.
            </summary>
            <returns>ReturnCode value indicate success or error conditions.</returns>
            <example>
            <code>
            class Program
            {
               private IbmTerminal terminal;
               private ReturnCode code;
            
               public IbmTerminal Terminal
               {
                 set{terminal = value;}
               }
            
               public ReturnCode SaveSettings()
               {
                 if(terminal !=null)
                 {
                   code = terminal.Save
                   return code;
                 }
                 else
                   throw new Exception("No terminal exists.");
               }
            } 
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.SaveAs(System.String)">
            <summary>
            Saves all settings to the specified file.
            </summary>
            <param name="filePath">The fully qualified file path of the file you want to save. The file must be saved in a trusted location.</param>
            <returns>ReturnCode value indicates success or error conditions.</returns>
            <example>
            <code>
            class Program
            {
               private IbmTerminal terminal;
               private ReturnCode code;
            
               public IbmTerminal Terminal
               {
                 set{terminal = value;}
               }
            
               public ReturnCode SaveSettingsAs()
               {
                 if(terminal !=null)
                 {
                   code = terminal.Save("C:\");
                   return code;
                 }
                 else
                   throw new Exception("No terminal exists.");
               }
            } 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.DASOApplicationID">
             <summary>
             Gets or sets the application ID to use for DASO (Digital Certificate
             Access Server Automated Sign On) support.
             </summary>
             <remarks> 
             This property applies to 3270 Telnet and Telnet Extended sessions only. It is 
             required for DASO and can be set either via this property or in the call to 
             GetDASOPassTicket.
             The default is "".
            
             </remarks>
             <exception cref="T:Attachmate.Reflection.SecuredSettingException">
             This exception is thrown when you modify a property that was secured via 
             the Permissions Manager, or that can only be modified by an Administrator.
             </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.DASOUserID">
            <summary>
            Gets the RACF USERID for DASO (Digital Certificate Access Server Automated Sign On).
            This field will be empty until a successful call to GetDASOPassTicket is executed.
            </summary>
            <remarks> 
            This read-only property applies to 3270 Telnet and Telnet Extended sessions only.
            The default is "".
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.DASOPassTicket">
            <summary>
            Retrieves the pass ticket for DASO (Digital Certificate Access Server Automated Sign On).
            This field will be empty until a successful call to GetDASOPassTicket is executed.
            </summary>
            <remarks> 
            This read-only property applies to 3270 Telnet and Telnet Extended sessions only.
            The default is "".
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.DASOSessionName">
            <summary>
            Gets the session name that is used for DASO (Digital Certificate Access Server 
            Automated Sign On). The session name and DASO application ID are used by the DASO
            server when mapping the current user to RACF logon credentials for host access.
            </summary>
            <remarks> 
            This read-only property applies to 3270 Telnet and Telnet Extended sessions only.
            The default is "".
            </remarks>
            
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.GetDASOPassTicket(System.String)">
            <summary>
            Issues a request to the Reflection Security Gateway for a DASO pass ticket.
            On success, the DASOUserID and DASOPassTicket properties will be valid and can
            be used for automated sign on to the host.  The application ID can be preset
            using the DASOApplicationID property in which case the ApplicationID parameter
            on this call may be empty.
            </summary>
            <param name="ApplicationID">The host application ID.</param>
            <returns>ReturnCode value indicate success or error conditions.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.SaveAsCompound(System.String)">
            <summary>
            Saves a session as compound session.
            </summary>
            <param name="filePath"></param>
            <returns>ReturnCode value indicate success or error conditions.</returns>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.QuickPadsShowToolTips">
            <summary>
            Gets or sets a value indicating whether QuickPads show tooltips for child controls when hovered over with the mouse.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.AddVBAReference(System.String)">
            <summary>
            Adds a session filename to the SharedMacro settings that contains macros to be shared by the current session.
            </summary>
            <param name="sessionPath">Full path to the shared session.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.RemoveVBAReference(System.String)">
            <summary>
            Removes a session filename from the SharedMacro settings.
            </summary>
            <param name="sessionPath">Full path to the shared session.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.GetVBAReferences">
            <summary>
            Retrieves all shared macro session filenames from the settings
            </summary>
            <returns>List of all shared macro session filenames from the settings</returns>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.AfterConnect">
            <summary>
            Occurs after it connects to the host.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.AfterDisconnect">
            <summary>
            Occurs after it disconnects from the host.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Closed">
            <summary>
            Occurs before the session closes.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.BeforeConnect">
            <summary>
            Occurs before it connects to the host.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.BeforeDisconnect">
            <summary>
            Occurs before it disconnects from the host.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.Dispose(System.Boolean)">
            <summary>
            Disposes the terminal object.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.OnBeforeConnect(System.EventArgs)">
            <summary>
            Fires BeforeConnect event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.OnBeforeDisconnect(System.EventArgs)">
            <summary>
            Fires BeforeDisconnect event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.OnAfterConnect(System.EventArgs)">
            <summary>
            Fires AfterConnect event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.OnAfterDisconnect(System.EventArgs)">
            <summary>
            Fires AfterDisconnect event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.OnClosed(System.EventArgs)">
            <summary>
            Fires BeforeConnect event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.BeforeConnectEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.BeforeDisconnectEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.AfterConnectEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.AfterDisconnectEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminal.ClosedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption">
            <summary>
            Identifies a host terminal attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.Blue">
            <summary>
            Host blue attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.Red">
            <summary>
            Host red attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.Pink">
            <summary>
            Host pink attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.Green">
            <summary>
            Host green attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.Turquoise">
            <summary>
            Host turquoise attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.Yellow">
            <summary>
            Host yellow attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.White">
            <summary>
            Host white attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.StatusLine">
            <summary>
            Status line attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.ProtectedNormalAlpha">
            <summary>
            3270 protected normal alphanumeric attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.ProtectedNormalNumeric">
            <summary>
            3270 protected normal numeric attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.ProtectedHighAlpha">
            <summary>
            3270 protected intense alphanumeric attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.ProtectedHighNumeric">
            <summary>
            3270 protected intense numeric attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.UnprotectedNormalAlpha">
            <summary>
            3270 unprotected normal alphanumeric attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.UnprotectedNormalNumeric">
            <summary>
            3270 unprotected normal numeric attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.UnprotectedHighAlpha">
            <summary>
            3270 unprotected intense alphanumeric attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.UnprotectedHighNumeric">
            <summary>
            3270 unprotected intense numeric attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.MessageLine">
            <summary>
            5250 message line attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.ErrorLine">
            <summary>
            5250 error line attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.SysRequest">
            <summary>
            5250 sys request attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsWhite">
            <summary>
            3179G host graphics white attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsBlack">
            <summary>
            3179G host graphics black attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsBlue">
            <summary>
            3179G host graphics blue attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsRed">
            <summary>
            3179G host graphics red attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsPink">
            <summary>
            3179G host graphics pink attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsGreen">
            <summary>
            3179G host graphics green attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsTurquoise">
            <summary>
            3179G host graphics turquoise attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsYellow">
            <summary>
            3179G host graphics yellow attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsNeutral">
            <summary>
            3179G host graphics neutral attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsBackground">
            <summary>
            3179G host graphics background attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsDarkBlue">
            <summary>
            3179G host graphics dark blue attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsOrange">
            <summary>
            3179G host graphics orange attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsPurple">
            <summary>
            3179G host graphics purple attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsDarkGreen">
            <summary>
            3179G host graphics dark green attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsDarkTurquoise">
            <summary>
            3179G host graphics dark turquoise attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsMustard">
            <summary>
            3179G host graphics mustard attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsGrey">
            <summary>
            3179G host graphics grey attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.GraphicsBrown">
            <summary>
            3179G host graphics brown attribute.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption.FieldOutline">
            <summary>
            3270 field outline attribute.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalType">
            <summary>
            Defines the IBM Host/Terminal type.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalType.Terminal3270">
            <summary>
            3270 (IBM Mainframe / System z).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalType.Terminal5250">
            <summary>
            5250 (IBM AS/400 / System i).
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IThemeColor">
            <summary>
            Provides an interface to get and set terminal colors within a Reflection theme.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeColor.Parent">
            <summary>
            Gets the parent object (ITheme).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeColor.IsBackgroundSingleColor">
            <summary>
            Indicates whether the screen background color is a single 
            color or mapped per field attributes defined in IbmTerminalAttributeOption enum.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeColor.BackgroundColor">
            <summary>
            Gets text screen background color when IsBackgroundSingleColor is true.
            </summary>
            <remarks>
            The get throws an exception when IsBackgroundSingleColor is false.
            <para>Setting text screen background color also sets IsBackgroundSingleColor property to true.</para>
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IThemeColor.GetForegroundColor(Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption)">
            <summary>
            Returns the current mapped foreground color for a given terminal attribute.
            </summary>
            <remarks>
            Throws an exception when IsBackgroundSingleColor is false.
            </remarks>
            <param name="attr">The host color or attribute whose mapped color is returned.</param>
            <returns>The current foreground color mapping for the specified attribute.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IThemeColor.GetBackgroundColor(Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption)">
            <summary>
            Returns the current mapped background color for a given terminal attribute.
            </summary>
            <remarks>
            Throws an exception when IsBackgroundSingleColor is false.
            </remarks>
            <param name="attr">The host color or attribute whose mapped color is returned.</param>
            <returns>The current background color mapping for the specified attribute.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IThemeColor.SetForegroundColor(Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption,System.Drawing.Color)">
            <summary>
            Sets the current mapped foreground color for a given terminal attribute.
            </summary>
            <remarks>
            Throws an exception when IsBackgroundSingleColor is false.
            </remarks>
            <param name="attr">The host color or attribute whose mapped color is set.</param>
            <param name="newColor">The new foreground color mapping for the specified attribute.</param>        
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IThemeColor.SetBackgroundColor(Attachmate.Reflection.Emulation.IbmHosts.IbmTerminalAttributeOption,System.Drawing.Color)">
            <summary>
            Sets the current mapped background color for a given terminal attribute.
            </summary>
            <remarks>
            </remarks>
            <param name="attr">The host color or attribute whose mapped color is set.</param>
            <param name="newColor">The new background color mapping for the specified attribute.</param>        
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IContextMenu">
            <summary>
            Provides methods and properties for interacting with a terminal session's context menu
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IContextMenu.Count">
            <summary>
            Gets a value indicating how many menu items (including separators) are in this menu.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IContextMenu.MappingCollection">
            <summary>
            Gets a value indicating the set of menu items comprising this context menu.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IContextMenu.Name">
            <summary>
            Gets a value indicating the descriptive name of this menu.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IContextMenu.AddSeparator">
            <summary>
            Adds a new separator to the end of the menu.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IContextMenu.AddMenuItem(Attachmate.Reflection.Emulation.IbmHosts.ContextMenuItem)">
            <summary>
            Adds a new context menu item to the end of the menu.
            </summary>
            <param name="item">A new context menu item</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IContextMenu.RemoveItem(System.Int32)">
            <summary>
            Removes a specified context menu item at a given position within the menu
            </summary>
            <param name="index">Identifies the position within the menu at which to remove a menu item.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IContextMenu.ClearAllItems">
            <summary>
            Removes all items from the context menu, resulting in an empty menu.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IContextMenu.GetContextMenuItem(System.String)">
            <summary>
            Returns a context menu item with the specified name.
            </summary>
            <param name="name">The name of the menu item, as it is displayed within the menu. 
            This applies only to items of type ContextMenuItemType.MenuItem</param>
            <returns>A ContextMenuItem with the specified name, or null if no such item exists.</returns>
            <remarks>This method cannot be used to return separator menu items, as they cannot be uniquely identified.</remarks>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IContextMenus">
            <summary>
            Defines properties and operations on the collection of context menus currently defined in the session document
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IContextMenus.Parent">
            <summary>
            Gets a value indicating the parent object of this object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IContextMenus.Count">
            <summary>
            Gets a value indicating how many ContextMenus are defined for this session document
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IContextMenus.DefaultContextMenu">
            <summary>
            Gets or sets the default context menu for this session document
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IContextMenus.Add(Attachmate.Reflection.Emulation.IbmHosts.IContextMenu)">
            <summary>
            Adds (or updates an existing) context menu to this session document 
            </summary>
            <param name="menu">The context menu to add</param>
            <returns>True if the add or update was successful, false if an error occurred</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IContextMenus.Remove(System.String)">
            <summary>
            Removes a context menu from this session document
            </summary>
            <param name="name">The descriptive name of the menu to remove</param>
            <returns>True if the remove was successful, false if the menu name could not be found or an error occurred</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IContextMenus.Contains(System.String)">
            <summary>
            Returns a value indicating whether a context menu of a given name exists in this session document.
            </summary>
            <param name="name">The descriptive name of the menu</param>
            <returns>True if the menu exists, false if it does not</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IContextMenus.ItemByName(System.String)">
            <summary>
            Returns the context menu associated with the specified descriptive name.
            </summary>
            <param name="name">The descriptive name of the menu</param>
            <returns>The context menu associated with <b>name</b>, or null if it does not exist</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IContextMenus.ItemByIndex(System.Int32)">
            <summary>
            Returns the context menu at the specified index in the session document's context menu collection
            </summary>
            <param name="index">The position within the collection to return a menu for.</param>
            <returns>The context menu at the specified position</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index argument is invalid.</exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IContextMenus.Clear">
            <summary>
            Removes all non-default context menus from the session document
            </summary>
            <remarks>NOTE: the default menu is never removed.</remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IContextMenus.Items">
            <summary>
            Returns the collection of context menus currently defined for the session document
            </summary>
            <returns>An array of <b>ContextMenu</b> items currently defined in the session document</returns>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer">
            <summary>
            Provides properties for configuring host file transfer, and methods for
            executing a file transfer to or from the host.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Parent">
            <summary>
            Gets the parent object (IIbmTerminal).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.HostFileListMacro">
            <summary>
            Returns or specifies a macro to be executed when you click the Show
            Host Files button in the Transfer dialog box. 
            </summary>
            <remarks>
            You can use this macro to reposition the cursor or to go to a valid screen prior to executing
            the host file list command. 
            <para>This property is only relevant for 3270 terminal sessions.</para>
            <para>The default value is "".
            This string can be up to 260 characters long.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (or in Visual Basic is Nothing). Use an zero-length string to
            indicate an empty value.
            </exception>        
            /// <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.TransferType">
            <summary>
            Returns or specifies the transfer protocol Reflection is to use.
            </summary>
            <remarks>
            <list type="bullet"> 
            <listheader><term>Values</term></listheader>
            <item>
            <term>IndFile  </term><description> Specifies IND$FILE as the transfer protocol. (The default for 3270.)</description>
            </item>
            <item>
            <term>AS400Xfer  </term><description> Specifies AS/400 data transfer as the transfer protocol. (The default for 5250.)</description>
            </item>
            <item>
            <term>Ftp  </term><description> Specifies FTP as the transfer protocol. </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.DfltExistsAction">
            <summary>Returns or specifies during an IND$FILE transfer what happens when the destination file already exists.</summary>
            <remarks>
            	<para>This property only affects transfers done using the Transfer dialog box, since an "IfFileExists" option must be specified in transfer
            methods.</para>
            </remarks>
            <value>The default value (Overwrite) specifies to replace the destination file.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.ShowDISOSSStatusDialog">
            <summary>Returns or specifies whether to display the transfer-in-progress
            "thermometer" when receiving data from the host during DISOSS transfers.</summary>
            <remarks>This property is only valid for 3270 sessions connecting to a host that uses DISOSS file transfer.</remarks>
            <value>When this property is True, the thermometer is shown.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.INDReceiveFile(System.String,System.String,Attachmate.Reflection.Emulation.IbmHosts.INDFileTransferType,Attachmate.Reflection.Emulation.IbmHosts.FileExistsOption,System.Boolean)">
            <summary>Transfers a file from the host to the PC using the IND$FILE protocol.</summary>
            <param name="pcFile">Specifies a name for the PC file to receive the host data. Include complete 
            path information.</param>
            <param name="hostFile">Specifies a host file.</param>
            <param name="type">Specifies what type of file is being transferred.</param>
            <param name="fileExistsOption">Specifies what to do if the file specified in the pcFile argument already
            exists</param>
            <param name="showStatus">Use true to display the Transfer in Progress window while the transfer is in progress,
            or false to not display the Transfer in Progress window.</param>
            <remarks>
            	<para>If you're having trouble getting a transfer to work, make sure the XfrHostSys property is set to the appropriate value.</para>
            	<para></para>
            </remarks>
            <example>
            	<code title="Receive File Transfer" description="This sample gets a file from the host. Before you run the sample, make sure the cursor is on a TSO command line." lang="CS">
            void ReceiveFileTransfer()
            {
                Application app = MyReflection.ActiveApplication;
                IFrame frame = (IFrame)app.GetObject("Frame");
             
                IView view = (IView)frame.SelectedView;
             
                IIbmTerminal terminal = (IIbmTerminal)view.Control;
             
                Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer fTransfer = terminal.FileTransfer;
             
                fTransfer.XfrHostSys = HostSystem.Tso;
             
                fTransfer.INDReceiveFile(@"C:\Users\Public\Documents\countReceived.txt", "count.txt", INDFileTransferType.Ascii, FileExistsOption.Append, true);
             
            }</code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.INDSendFile(System.String,System.String,Attachmate.Reflection.Emulation.IbmHosts.INDFileTransferType,Attachmate.Reflection.Emulation.IbmHosts.FileExistsOption,System.Boolean)">
            <summary>Transfers a file from the PC to the host using the IND$FILE protocol.</summary>
            <param name="pcFile">Specifies a local file. Provide complete path information or the file can be found only if it's in the current directory to be found. 
            <para>You cannot use wildcard characters
            to send multiple files, as you can when you use the Transfer screen.</para></param>
            <param name="hostFile">Specifies a name for the file being transferred. This name must comply with naming conventions for host files. You cannot use an empty string.</param>
            <param name="type">Specifies what type of file is being transferred.</param>
            <param name="fileExistsOption">Specifies what to do if the file specified in the HostFile argument already exists.</param>
            <param name="showStatus">Use true to display the Transfer in Progress window while the transfer is in progress,
            or false to not display the Transfer in Progress window.</param>
            <remarks>If you're having trouble getting a transfer to work, make sure the XfrHostSys property is set to the appropriate value.</remarks>
            <example>
            	<code title="Example" description="This sample sends a file to the host. Before you run the sample, make sure the cursor is on a TSO command line." groupname="Send File Transfer" lang="CS">
            void SendFileTransfer()
            {
                Application app = MyReflection.ActiveApplication;
                IFrame frame = (IFrame)app.GetObject("Frame");
             
                IView view = (IView)frame.SelectedView;
             
                IIbmTerminal terminal = (IIbmTerminal)view.Control;
             
                Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer fTransfer = terminal.FileTransfer;
             
                fTransfer.XfrHostSys = HostSystem.Tso;
             
                fTransfer.INDSendFile(@"C:\Users\Public\Documents\test.txt", "bvtst02.test7.txt", INDFileTransferType.Ascii, FileExistsOption.Overwrite, true);
             
            }</code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.ShowFileTransferDialog">
            <summary>
            Opens the File Transfer dialog box.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.ShowFileTransferSetupDialog">
            <summary>
            Opens the Transfer Setup dialog box. This method returns an error if the user cancels the dialog box.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.AbortTransfer">
            <summary>
            Aborts an IND$FILE transfer. This method is more drastic than CancelTransfer
            and may leave the host session in an unpredictable state. 
            </summary>
            <remarks>
            Use CancelTransfer unless you think the host program has stopped responding.
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.CancelTransfer">
            <summary>
            Cancels an IND$FILE transfer or an AS/400 data transfer in progress. 
            </summary>
            <remarks>
            If the host has stopped responding, you may need to use the AbortTransfer
            method instead.
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.AS400ReceiveFile(System.String,System.Boolean)">
            <summary>
            Transfers data from the host to the PC, using the AS/400 data transfer 
            protocol.
            </summary>
            <remarks>
            This method is only relevant to 5250 sessions.
            </remarks>
            <param name="transferFile">
            The name of a transfer request file that provides all necessary information 
            about the transfer. Use an empty string if you are providing configuration 
            information using AS/400 Data Transfer keywords.
            </param>
            <param name="showStatus">
            Use true to display the Transfer in Progress window while the transfer is in
            progress, or false to not display the Transfer in Progress window.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.AS400SendFile(System.String,System.Boolean)">
            <summary>
            Transfers one or more PC files to the host, using the AS/400 data transfer 
            protocol.
            </summary>
            <remarks>
            This method is only relevant to 5250 sessions.
            </remarks>
            <param name="transferFile">
            The name of a transfer request file that provides all necessary information 
            about the transfer. Use an empty string if you are providing configuration 
            information using AS/400 Data Transfer keywords.
            </param>
            <param name="showStatus">
            Use true to display the Transfer in Progress window while the transfer is in
            progress, or false to not display the Transfer in Progress window.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Open(Attachmate.Reflection.Emulation.IbmHosts.FileTransferRequestType,System.String)">
            <summary>
            	<para>Opens a transfer request file. This is equivalent to opening a Transfer Request (.mto or .xto) file using the Open button in the File Transfer dialog.</para>
            </summary>
            <param name="transferFileType">
            The transfer request file type: AS400 or Mainframe
            </param>
            <param name="transferRequestFile">
            The name of the transfer request file.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400AssumePositiveNumerics">
            <summary>Returns or specifies whether Reflection looks for a negative 
            sign or a blank (positive) in the first byte of numeric fields in 
            fixed column ASCII database files.</summary>
            <remarks>This property affects AS/400 data transfer and is only relevant for 
            5250 terminal sessions.</remarks>
            <value>
            	<para>The default is False.</para>
            	<para>Change this value only if your database contains fields without leading negative signs or blanks.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400Authority">
            <summary>Returns or specifies the level of authority to associate with a 
            file that is transferred to the host.</summary>
            <remarks>This property affects AS/400 data transfer.
            <list type="bullet"><item>Allows other users to see the file in a list, read it, write to it, or delete it.</item><item>Prevents other users from seeing the file in a list, writing to it, or deleting it.</item><item>Allows other users to see the file in a list and read it, but prevents them from writing to the file or deleting it.</item></list></remarks>
            <value>
            	<para>The default value (ReadWrite) allows other users to see the file in a list, read it, and write to it, but not delete it.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400Charset">
            <summary>Returns or specifies which character set to use for transfers to and 
            from an AS/400.</summary>
            <remarks>This property is relevant for data that contains characters with decimal values above 127. (The ANSI and ASCII character sets have the same
            values for characters with decimal values from 32-126.) This property affects AS/400 data transfer.</remarks>
            <value>The default value is AS400Ansi.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400CompatibleAsciiFile">
            <summary>Returns or specifies whether Reflection uses the buffer length or the field length 
            of a packed decimal field to determine the size of fields on the PC.</summary>
            <remarks>This mimics the way that Micro Focus RUMBA and EXTRA! perform this operation. 
            When set to false, the extra byte in front of even length fields is eliminated.
            <para>This setting applies to 5250 sessions only.</para></remarks>
            <value>The default value is False for all versons of Reflection except Japanese versions. (The default for Japanese versions of Reflecton is True.)</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400CompatibleFDFFile">
            <summary>Returns or specifies whether Reflection denotes a number's digit/decimal 
            characteristics in file description files the same as Micro Focus RUMBA.</summary>
            <remarks>By default, Reflection counts the implied positive or negative sign 
            and any decimal point when denoting the digit/decimal characteristics of a number in file description files. 
            For example, Reflection denotes 123.45 as 7/2 (that is, seven total digits, 
            two of which fall to the right of the decimal point). 
            <para>The implied positive or negative sign represents the first digit, the numbers 123 
            represent the next three digits, the decimal point represents another digit, 
            and the two numbers on the right of the decimal point (45) represent the last two digits.</para><para>RUMBA denotes the same number (123.45) as 5/2 (that is, five total digits, 
            two of which fall to the right of the decimal point).</para></remarks>
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400DateFormat">
            <summary>Returns or specifies the date format for selected fields having an 
            AS/400 field type of date.</summary>
            <remarks>This property affects AS/400 data transfer.</remarks>
            <value>The default is AS/400 job default.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400DateSeparator">
            <summary>Returns or specifies a character to use as a date separator in selected
            fields having an AS/400 field type of Date.</summary>
            <remarks>This property affects AS/400 data transfer.</remarks>
            <value>The default is AS/400 job default.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400DecSep">
            <summary>Returns or specifies a character to use as a decimal separator in selected
            fields that have an AS/400 field type of packed decimal or zoned decimal.</summary>
            <remarks>This property affects AS/400 data transfer.</remarks>
            <value>The default is AS/400 job default.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400DeleteTrailingSpaces">
            <summary>Returns or specifies whether extra spaces at the end of a record are 
            deleted when the records are transferred to the PC.</summary>
            <remarks>This setting affects AS/400 data transfer and is only relevant for 
            5250 terminal sessions.</remarks>
            <value>
            	<para>Trailing spaces are required to ensure accurate data transfer of records containing double-byte characters.</para>
            	<para>The default value is True.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400ExistsAction">
            <summary>Returns or specifies what Reflection should do if it finds a PC file
            with the same name as the host file or member you are trying to receive.</summary>
            <remarks>The equivalent property for IND$FILE is DfltExistsAction.
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            <list type="bullet"><listheader><term>Values:</term></listheader><item><term>Append</term><description>Appends the host file or member to the existing PC file.</description></item><item><term>AskUser</term><description>Prompts the user for a decision if the PC file already exists. (The default.)</description></item><item><term>OpenError</term><description>Fails the transfer (and returns an error) if the PC file already exists.</description></item><item><term>Overwrite</term><description>Replaces the existing PC file.</description></item></list></remarks>
            <value>The default value is AskUser. This setting prompts the user for a decision if the PC file already exists.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400FileText">
            <summary>
            Returns or specifies a description for the host file you are creating.
            </summary>
            <remarks>
            This description will appear in various AS/400-generated lists such as 
            WRKOBJ displays and as a Tooltip in Reflection's Transfer dialog box.
            This property affects AS/400 data transfer and is only relevant to 5250 
            sessions.
            The default is "".This string can be up to 50 characters long.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>        
            /// <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400ForceHexConversion">
            <summary>Returns or specifies whether Reflection translates data that is in coded 
            character set ID (CCSID) 65535 from hexadecimal to EBCDIC when 
            transferring it to the host or from hexadecimal to ANSI when receiving it from the host.</summary>
            <remarks>
            	<para>Columns tagged with the 65535 CCSID are designed not to be converted when transferring to and from the PC. This property keeps Reflection from converting
            CCSID 65535 data into character data and should be set to True only when it is not possible to change the column or file CCSID from 65535. Every attempt should
            be made to appropriately tag the data with the correct CCSID.</para>
            	<para>This property is applicable to 5250 sessions only.</para>
            </remarks>
            <value>
            	<para>The default value is True.</para>
            	<para>Use the default value (True) only if you are sure that the data contained within columns tagged with the 65535 CCSID are in a defined CCSID that matches the
            user profile CCSID of the jobs that will access it. Accessing 65535 CCSID data from job CCSID that does not match the data may corrupt the database file.</para>
            	<para>When this property is False, Reflection sends and receives data in hexadecimal format instead of translating it.</para>
            	<para></para>
            	<para></para>
            	<para>
            		<br/>
            	</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400GroupByString">
            <summary>Gets or sets how to group returned data after a requested function is performed.</summary>
            <remarks>A Group By statement is necessary when a function and multiple fields are included in a the select statement specified by
            Xfr400SelectString.  This property affects AS/400 data transfer and is only relevant to 5250 sessions.</remarks>
            <value>The default value is "".</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400HavingString">
            <summary>Returns or specifies a string that imposes a condition on a function of
            the Select statement.</summary>
            <remarks>You can only create a Having statement after you create a select statement using Xfr400SelectString.
            <para></para>This property affects AS/400 data transfer and is only relevant to 5250 sessions. The default is "". This string can be up to 220 characters long and
            should use the following syntax:
            <para>[function](field name)[test][value]</para></remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>
            <exception caption="" cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400HostFileType">
            <summary>Returns or specifies which type of host file to create.
            This property affects AS/400 data transfer and is only relevant to 
            5250 sessions.</summary>
            <remarks>
            	<para></para>
            </remarks>
            <value>The default value (Data), creates an AS/400 physical data file and member.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400IgnoreDecErrors">
            <summary>Returns or specifies whether Reflection is to ignore any decimal data 
            errors found in a packed or zoned field during a transfer from the 
            AS/400.</summary>
            <remarks>When this property is True, decimal data errors are ignored. 
            Ignoring errors speeds up the transfer process.This property affects AS/400 data transfer and is only relevant to 
            5250 sessions.</remarks>
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400JoinByString">
            <summary>Returns or specifies how to combine data from multiple files.</summary>
            <remarks>You can only create a Join By statement if multiple files or members are selected. This property affects AS/400 data transfer and is only
            relevant to 5250 sessions. The default is "". This string can be up to 220 characters long and should use the following syntax:
            <para>[field name1](test)[field name2]</para></remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>
            <exception caption="" cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400LocalFile">
            <summary>Returns or specifies the name of a PC file to send to an AS/400 
            (for file transfers to the host), or to receive data from an AS/400 (for data transfer from the host).</summary>
            <remarks>When no path is given, Reflection uses the folder specified by XfrCurrentDirectory. For example, the following statements set the local transfer
            file to "C:\test\Payroll".
            <para></para>FileTransfer.XfrCurrentDirectory = "C:\Test"
            <para></para>FileTransfer.Xfr400LocalFile = "Payroll"
            <para></para><para>This property affects AS/400 data transfer and is only relevant for 5250 sessions. When you are receiving data to a local file, the value of the
            <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400OutputDest">Xfr400OutputDest</see> property should be set to File (the default value).</para><para>The value of this property is not saved when you save a Reflection settings file, but is saved when you save a transfer request file.</para></remarks>
            <value>
            	<para>The default is "". This string can be up to 260 characters long.</para>
            	<para></para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>
            <exception caption="" cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400MemberText">
            <summary>
            Returns or specifies a description for the new member being created. 
            </summary>
            <remarks>
            This description appears in various AS/400-generated lists such as 
            WRKMBRPDM; it also appears as a Tooltip in Reflection's Transfer dialog 
            box.
            This property affects AS/400 data transfer and is only relevant to 5250 sessions.
            The default is "".
            This string can be up to 50 characters long.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>        
            /// <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400NCS">
            <summary>Gets or sets which character set Reflection uses for character translations during AS/400 data transfers.</summary>
            <remarks>This property affects AS/400 data transfer and is only relevant to 5250 sessions.</remarks>
            <value>The default is the US English character set.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400NumDisplayRecords">
            <summary>Returns or specifies how many records are displayed in the Query Results
            window.</summary>
            <remarks>The Query Results window is displayed when you transfer host records to your display rather than to a file. To specify screen display, set the
            value of <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400OutputDest">Xfr400OutputDest</see> to Display. If you choose to display fewer records than the number of records that are received, click More in the
            Query Results window to view the rest.
            <para>This property affects AS/400 data transfer and is only relevant to 5250 sessions.</para></remarks>
            <value>The default value is 200. The range of values is 1 to 500.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400Objects">
            <summary>Returns or specifies whether data should be transferred to a new member 
            on the AS/400 or to an existing member, and whether the file that will contain the member already exists.</summary>
            <remarks>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</remarks>
            <value>The default value (RepMemberConf) specifies to send to an existing member in an existing file. Before overwriting the existing member,
            Reflection prompts to confirm the overwrite action.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400OrderByString">
            <summary>Gets or sets how to sort selected records.</summary>
            <remarks>This property affects AS/400 data transfer and is only relevant for 5250 sessions. The default is "". This string can be up to 220 characters
            long and should use the following syntax:
            <para>[field] [sequence]</para></remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>
            <exception caption="" cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400OutputDest">
            <summary>Returns or specifies whether host data should be received to a PC file
            or to your display.</summary>
            <remarks>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</remarks>
            <value>The default value (File) specifes to receive host data to the file specified by the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400LocalFile">Xfr400LocalFile</see> property.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400ReceiveConversion">
            <summary>Gets or sets a conversion format for a file being received from an AS/400.</summary>
            <remarks>This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            <list type="bullet"><listheader><term>Values:</term></listheader><item><term>Ascii</term><description>Appropriate for files with no special formatting and fixed record widths. (The default.)</description></item><item><term>BasicSeq</term><description>Separates all fields with commas and inserts quotation marks around character and hexadecimal fields.</description></item><item><term>CommaDelimiter</term><description>Separates all fields with commas and inserts quotation marks around character fields that contain a comma or quotation mark.</description></item><item><term>Dif</term><description>Use for files transferred to and from Microsoft Excel. DIF files contain the names of the fields.</description></item><item><term>DosRandom</term><description>Appropriate with host database applications that require data to be in this format.</description></item><item><term>NoConversion</term><description>Use for files that should not be translated.</description></item><item><term>TabDelimiter</term><description>Separates all fields with tabs and inserts quotation marks around character fields that contain a quotation mark.</description></item></list></remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400ReceiveDescFile">
            <summary>
            Returns or specifies a description file to receive during a transfer from
            an AS/400 to the PC.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            The default is "*.FDF".
            This string can be up to 260 characters long.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>        
            /// <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400RecordLength">
            <summary>
            Returns or specifies (second syntax line) the record size (in bytes) for files being created on the host.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            
            The default is 92.
            The range of values is 13-4105.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>                        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400RefFile">
             <summary>
             Returns or specifies the reference file that contains the definitions of fields for the AS/400 being created. 
             </summary>
             <remarks>
             This property is only relevant when
             Xfr400Objects is set to CreateFileAndMember and Xfr400UseDescriptionFile
             is True.
             The syntax for specifying a reference file is:
            
             [library name]/[filename]
            
             The [library name] indicates the library in which the reference file
             resides. The [filename] is the name of the AS/400 database file that 
             contains the field descriptions. For example:
            
             FileTransfer.Xfr400RefFile = "mylib/myfile"
            
             For more information on creating AS/400 files, see your AS/400 
             documentation.
             This property affects AS/400 data transfer and is only relevant for 5250 sessions.
             
             The default is "".
             This string can be up to 220 characters long.
             </remarks>
             <exception cref="T:Attachmate.Reflection.SecuredSettingException">
             This exception is thrown when you modify a Reflection property that has been secured
             via the Permissions Manager, or if such a modification requires Administrator privileges.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
             indicate an empty value.
             </exception>        
             <exception cref="T:System.ArgumentException">
             Thrown if the set parameter length is too long.
             </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400RemoteFile">
            <summary>Returns or specifies a host file for the PC to receive (for transfers
             from the host), or a host file to which data from the PC will be sent
             (for transfers to the host).</summary>
            <remarks>
            	<para>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</para>
            	<para>The value of this property is not saved when you save a Reflection settings file, but is saved when you save a transfer request file.</para>
            </remarks>
            <value>The default is "". This string can be up to 260 characters long.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
             This exception is thrown when you modify a Reflection property that has been secured
             via the Permissions Manager, or if such a modification requires Administrator privileges.
             </exception>
            <exception caption="" cref="T:System.ArgumentNullException">
             Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
             indicate an empty value.
             </exception>
            <exception caption="" cref="T:System.ArgumentException">
             Thrown if the set parameter length is too long.
             </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400ReturnMissing">
            <summary>Returns or specifies whether records that contain values for missing fields
            should be returned.</summary>
            <remarks>When this property is set to True, records with missing
            fields are returned.
            This property affects AS/400 data transfer and is only relevant for 5250 
            sessions.</remarks>
            <value>The default value is True.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400SaveDescriptionFile">
            <summary>
            Returns or specifies whether to save the description file during a 
            transfer from an AS/400 to a PC. 
            </summary>
            <remarks>
            When this property is set to True, the description file is saved.
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400SelectString">
            <summary>Gets or sets which fields to transfer.</summary>
            <remarks>
            	<para>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</para>
            	<para>To list particular fields, use this syntax:</para>
            	<para>&lt;field name1&gt;,&lt;field name2&gt;,&lt;field name3&gt;</para>
            	<para>To perform functions on the contents of a field, use this syntax:</para>
            	<para>&lt;function&gt;(&lt;field name&gt;)</para>
            	<para>The available functions are AVG, COUNT, MAX, MIN, and SUM.</para>
            </remarks>
            <value>
            	<para>The default is "".</para>
            	<para>This string can be up to 220 characters long.</para>
            	<para>If you don't enter any field names, all fields in the file are transferred.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>
            <exception caption="" cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400SendConversion">
            <summary>Returns or specifies a conversion format for a file being sent to an AS/400.</summary>
            <remarks>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</remarks>
            <value>The default value is Ascii, which is appropriate for files with no special formatting and fixed record widths.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400SendDescFile">
            <summary>
            Returns or specifies a description file to send during a transfer to an AS/400 from the PC.
            </summary>
            <remarks>
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.
            The default is "*.FDF".This string can be up to 260 characters long.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>        
            /// <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400ShowProgress">
            <summary>Returns or specifies whether or not to display the transfer-in-progress
            "thermometer" when receiving data from the host.</summary>
            <remarks>Transfers take less time when the thermometer is not shown because the AS/400 does not have to 
            count the number of selected records before transferring them.
            This property affects AS/400 data transfer and is only relevant for 5250 sessions.</remarks>
            <value>The default value is True.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400SortSeq">
            <summary>Gets or sets a sort sequence for the data being transferred. The specified sort sequence determines the order of characters in the alphabet
            when fields are alphabetized. s.</summary>
            <remarks>The sort sequence also affects any comparisons based on characters in the fields. For example, the following statement specifies use of the
            EBCDIC hexadecimal sort sequence:
            <para>FileTransfer.Xfr400SortSeq = "*HEX"</para><para>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</para></remarks>
            <value>
            	<para>The default is "*JOB". Possible values are:</para>
            	<para></para>
            	<list type="table">
            		<item>
            			<term width="97">Value</term>
            			<description>Description</description>
            		</item>
            		<item>
            			<term width="97">*HEX</term>
            			<description>Uses the EBCDIC hexadecimal sort sequence.</description>
            		</item>
            		<item>
            			<term width="97">*JOB</term>
            			<description>Uses the AS/400 job default.</description>
            		</item>
            		<item>
            			<term width="97">*LANGIDSHR</term>
            			<description>Uses a shared weight table.</description>
            		</item>
            		<item>
            			<term width="97">*LANGIDUNQ</term>
            			<description>Uses a unique weight table.</description>
            		</item>
            	</list>
            	<para></para>
            	<para>You can also specify a table name. Use this syntax:<br/>
            &lt;library name&gt;/&lt;file name&gt;</para>
            	<para>This string can be up to 220 characters long.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
             This exception is thrown when you modify a Reflection property that has been secured
             via the Permissions Manager, or if such a modification requires Administrator privileges.
             </exception>
            <exception caption="" cref="T:System.ArgumentNullException">
             Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
             indicate an empty value.
             </exception>
            <exception caption="" cref="T:System.ArgumentException">
             Thrown if the set parameter length is too long.
             </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400StartRecord">
            <summary>Use this property to skip a given number of records at the start of a file 
            before sending the file to the AS/400.</summary>
            <remarks>
            	<para>If you transfer a file to the AS/400 and then later attempt to transfer that same file to the AS/400 while specifying a start record greater than the number
            of records contained in it, the transfer will fail and the original file is preserved on the AS/400.</para>
            	<para>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</para>
            </remarks>
            <value>
            	<para>The range of values is 1-32768. The default is 1, which means the entire file is sent to the host. Specifying 2 means that the first record in the file will
            be skipped (not sent to the host), and so on.</para>
            	<para>For example, if you have an Excel spreadsheet that contains header information in the first line, you can skip this line before transferring this file.
            Changing this property from the default (1) is especially useful if this header information causes a problem for an AS/400 program that analyzes the uploaded
            data.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400TimeFormat">
            <summary>Returns or specifies the time format for selected fields having an
            AS/400 field type of Time.</summary>
            <remarks>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</remarks>
            <value>The default is AS/400 job default.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400TimeSeparator">
            <summary>Returns or specifies a character to use as a time separator in selected fields having an AS/400 field type of Time.</summary>
            <remarks>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</remarks>
            <value>The default is AS/400 job default.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400Transport">
             <summary>
             Returns or specifies the protocol to use for data transfers. 
             </summary>
             <remarks>
             For example, this statement specifies TCP/IP file transfers:
            
             <para>FileTransfer.Xfr400Transport = TCPIP</para>
             This property affects AS/400 data transfer and is only relevant for 5250 sessions.
             <list type="bullet"> 
             <listheader><term>Values:</term></listheader> 
             <item><term>CommServer</term><description>Uses IBM Comm Server.</description></item>
             <item><term>DLC8022</term><description>Uses 802.2.</description></item>
             <item><term>LIPITCP</term><description>Uses TCP/IP.</description></item>
             <item><term>MPTN</term><description>Uses MPTN. (The default.)</description></item>
             <item><term>MSSNAServer</term><description>Uses MS SNA Server.</description></item>
             <item><term>NetwareSAA</term><description>Uses NetWare SAA.</description></item>
             <item><term>SDLC</term><description>Uses SDLC.</description></item>
             <item><term>Twinax</term><description>Uses Twinax.</description></item>
             </list>
             </remarks>
             <exception cref="T:Attachmate.Reflection.SecuredSettingException">
             This exception is thrown when you modify a Reflection property that has been secured
             via the Permissions Manager, or if such a modification requires Administrator privileges.
             </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400UseDescriptionFile">
            <summary>Returns or specifies whether a description file should be used when
            sending a PC file to an AS/400.</summary>
            <remarks>This property affects AS/400 data transfer and is only relevant for 5250 sessions.</remarks>
            <value>The default value is True.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400WhereString">
            <summary>Returns or specifies one or more conditions that determine whether 
             a record is transferred.</summary>
            <remarks>This property affects AS/400 data transfer and is only relevant for 5250 sessions. The default is "". This string can be up to 220 characters
            long and should use the following syntax:
            <para>[field name] [test] [value]</para><para>The available tests are =, &lt;, &gt;, &lt;=, &gt;=, &lt;&gt;, NOT, LIKE, IN, BETWEEN, IS, ISNOT, and SUBSTR.</para></remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
             This exception is thrown when you modify a Reflection property that has been secured
             via the Permissions Manager, or if such a modification requires Administrator privileges.
             </exception>
            <exception caption="" cref="T:System.ArgumentNullException">
             Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
             indicate an empty value.
             </exception>
            <exception caption="" cref="T:System.ArgumentException">
             Thrown if the set parameter length is too long.
             </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr400HostTP">
            <summary>
            Returns or specifies which host transaction program (TP) Reflection should use. 
            </summary>
            <remarks>
            This property is only relevant for TCP/IP file transfers (XfrTransport is set
            to LipiTcp).
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>Ehntfw</term><description>Uses EHNTFW transaction program. (The default.)</description></item>
            <item><term>Lipi</term><description>Uses LIPI transaction program.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.DfltXfrType">
            <summary>Returns or specifies the default type for Mainframe transfers. 
            This property is only relevant for 3270 sessions using Mainframe transfer.</summary>
            <remarks>This property only affects transfers in the Transfer dialog box, since a transfer type must be specified in transfer commands.</remarks>
            <value>
            	<para>The default is Binary. (It is Jiscii if you are running a Japanese version of Reflection.)</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.IndAutoPositionCursor">
            <summary>Returns or specifies whether Reflection enters IND$FILE commands into 
            the last unprotected field on the screen.</summary>
            <remarks>This property affects file transfer done using the Transfer dialog box, and also using the <see cref="M:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.INDReceiveFile(System.String,System.String,Attachmate.Reflection.Emulation.IbmHosts.INDFileTransferType,Attachmate.Reflection.Emulation.IbmHosts.FileExistsOption,System.Boolean)">IndReceiveFile</see> and
            <see cref="M:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.INDSendFile(System.String,System.String,Attachmate.Reflection.Emulation.IbmHosts.INDFileTransferType,Attachmate.Reflection.Emulation.IbmHosts.FileExistsOption,System.Boolean)">IndSendFile</see> methods This property applies to 3270 terminal sessions only.</remarks>
            <value>The default value is True.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.Xfr8Dot3FilenameCase">
            <summary>Returns or specifies how the names of PC files created in 16-bit 
            applications are displayed in the Transfer dialog box.</summary>
            <remarks>Eight-dot-three describes DOS filenames which contain up to eight characters and have a three-character file extension.</remarks>
            <value>The default value (LowerCase) displays all 8.3 filenames in lowercase.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrAddParam">
            <summary>
            Returns or specifies any additional parameters that should be appended to IND$FILE commands that Reflection generates.
            </summary>
            <remarks>
            This property is applicable 3270 sessions only.
            
            The default is "".
            This string can be up to 220 characters long.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>        
            /// <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrApvUser">
            <summary>
            	<para>Gets or sets whether shift-out and shift-in (SO/SI) characters in the host file are left intact (not translated). This property is used for JISCII file
            translations from the host with the NOSO option selected.</para>
            	<para></para>
            </summary>
            <remarks>This property is applicable to double-byte 3270 sessions only.</remarks>
            <value>
            	<para>The default value is False.</para>
            	<para>When this value is True, characters are not translated.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrAsciiCrlf">
            <summary>Returns or specifies whether carriage returns and linefeed characters (CR/LF) at the end of lines in ASCII files
            are removed (when sent to the host) or added (when received from the host).</summary>
            <remarks>CR/LF processing is typically appropriate for ASCII files, but not for binary files. This property affects IND$FILE transfer and is applicable to
            3270 sessions only.</remarks>
            <value>The default (Convert) specifies that carriage return and line-feed characters are added or removed.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrBinaryCRLF">
            <summary>Returns or specifies whether carriage returns and linefeed characters (CR/LF) at the end of lines in ASCII files
            are removed (when you send the file to the host) or added (when you receive the file from the host).</summary>
            <remarks>CR/LF processing is typically appropriate for ASCII files, but not for binary files. This property affects IND$FILE transfer and is applicable to
            3270 sessions only.</remarks>
            <value>The default value (Ignore) specifies that carriage return and line-feed characters are not added or removed.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrCloseDlgAfterTransfer">
            <summary>Returns or specifies whether Reflection closes the File Transfer
            dialog box upon completion of a file transfer.</summary>
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrCurrentDirectory">
            <summary>
            Returns or specifies the current local working folder for file transfer.
            </summary>
            <remarks>
            This folder is displayed by default in the Transfer dialog box and is 
            used by default for opening and saving transfer request files. 
            The value of this property changes if you navigate to a new folder 
            using the Transfer dialog box.
            
            The default is "".
            This string can be up to 220 characters long.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>        
            /// <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrEnableTemplates">
            <summary>Returns or specifies whether file transfer templates are enabled 
            in 3270 terminal sessions.</summary>
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrFtpLocalFile">
            <summary>Returns or specifies a file on the PC.</summary>
            <remarks>
            	<para>This specifies the file for the PC to receive (for transfers to the PC using FtpReceiveFile), or the file to be sent to the host (for transfers to the host
            using FtpSendFile). When no path is given, Reflection uses the folder specified by <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrCurrentDirectory">XfrCurrentDirectory</see>.</para>
            	<para>The value of this property is not saved when you save a Reflection settings file, but is saved when you save a transfer request file.</para>
            </remarks>
            <value>The default is "". This string can be up to 260 characters long.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>
            <exception caption="" cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrFtpRemoteFile">
            <summary>Returns or specifies a host file. This specifies the file for the host to 
            receive (for transfers to the host using FtpSendFile), or the file to be 
            sent to the PC (for transfers to the PC using FtpReceiveFile).</summary>
            <remarks>
            	<para></para>
            	<para>The value of this property is not saved when you save a Reflection settings file, but is saved when you save a transfer request file.</para>
            </remarks>
            <value>The default value is "". This string can be up to 260 characters long.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>
            <exception caption="" cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrHostCmd">
            <summary>
            Returns or specifies the name of the host program to be run by 
            Reflection to initiate a file transfer.
            </summary>
            <remarks>
             The default value, "IND$FILE", is generally appropriate for CMS and TSO hosts; for CICS hosts "IND$FILE" 
            may be appropriate or you may need to specify your site's CICS 
            transaction (for example, "CFTR"). 
            This property affects IND$FILE transfer and is applicable to 3270
            sessions only.
            
            The default is "IND$FILE". (APVUFILE if you are running a Japanese 
            version of Reflection.)
            This string can be up to 9 characters long.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>        
            /// <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrHostMessage">
             <summary>
             Returns or specifies any message returned to Reflection by the host 
             file transfer program after a transfer completes.
             </summary>
             <remarks>
             The default is "".
             This string can be up to 255 characters long.
             </remarks>
             <exception cref="T:Attachmate.Reflection.SecuredSettingException">
             This exception is thrown when you modify a Reflection property that has been secured
             via the Permissions Manager, or if such a modification requires Administrator privileges.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
             indicate an empty value.
             </exception>        
            <exception cref="T:System.ArgumentException">
             Thrown if the set parameter length is too long.
             </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrHostSys">
            <summary>Gets or sets which 3270 operating environment the host is running.</summary>
            <remarks>This property determines which Advanced Options are available from the Transfer dialog box in 3270 sessions.</remarks>
            <value>The default value is Cms.<br/></value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndAllocUnit">
            <summary>Returns or specifies the unit of disk space for your primary and
            secondary space allocations.</summary>
            <remarks>This property affects IND$FILE transfer and is applicable only to 3270 sessions when the host is running TSO. (This property is only relevant
            when  the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrHostSys">XfrHostSys</see> property is set to Tso.)
            <para><br/></para></remarks>
            <value>
            	<para>The default specifies that the unit is determined by the host.</para>
            	<para>If you set the value to Block, use the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndAvgBlk">XfrIndAvgBlk</see> property to specify the size for an average block.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndAvgBlk">
            <summary>Specifies the size (in bytes) for an average block.</summary>
            <remarks>
            	<para>This property affects IND$FILE transfer and is applicable only to 3270 sessions when the host is running TSO.</para>
            	<para>This property is only relevant if the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrHostSys">XfrHostSys</see> property is set to Tso and if you are using blocks as your allocation unit (that is, if the
            <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndAllocUnit">XfrIndAllocUnit</see> property is set to Block).</para>
            	<para></para>
            </remarks>
            <value>The default is 0. The range of values is 0-32768.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndBlkSize">
            <summary>Returns or specifies the block size (in bytes) for the file being created on the host as the result of a transfer.</summary>
            <remarks>
            	<para>For files with fixed-length records, this value must be a multiple of the Logical Record Length, which is controlled by the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndLRecl">XfrIndLRecl</see>
            property.</para>
            	<para>Reflection lets you set any value between 0 and 32768 to accommodate any range accepted by your host.</para>
            	<para>This property affects IND$FILE transfer and is applicable to 3270 sessions only.</para>
            	<para>This property is only relevant if the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrHostSys">XfrHostSys</see> property is set to Tso.</para>
            </remarks>
            <value>
            	<para>The default is 0. The range of values is 0-32768.</para>
            	<para></para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndLRecl">
            <summary>Returns or specifies the record size (in bytes) for files being created on the host as the result of a transfer.</summary>
            <remarks>
            	<para>This property affects IND$FILE transfer and is applicable to 3270 sessions when the host is running TSO or CMS.</para>
            	<para>This property is only relevant if the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrHostSys">XfrHostSys</see> property is set to Tso or Cms.</para>
            	<para></para>
            </remarks>
            <value>
            	<para>The default is 0. The range of values is 0-32768.</para>
            	<para>If you do not specify a record size, it is determined by the host.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndNOSO">
            <summary>Returns or specifies whether to strip the shift-out/shift-in 
            (SO/SI) characters from files sent to the host.</summary>
            <remarks>
            	<para>In general, this setting is meant for files made up entirely of double-byte characters or files containing both single and double-byte characters.</para>
            	<para>This property is applicable to double-byte 3270 sessions only.</para>
            	<para></para>
            	<para></para>
            </remarks>
            <value>
            	<para>The default value is False.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndPrimAlloc">
            <summary>Returns or specifies the size (in Allocation Units, as specified by the 
            XfrIndAllocUnit property) of the primary allocation for the host file 
            being created by an IND$FILE transfer.</summary>
            <remarks>
            	<para>This property affects IND$FILE transfer and is applicable to 3270 sessions only.</para>
            	<para>This property is only relevant if the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrHostSys">XfrHostSys</see> property is set to Tso.</para>
            </remarks>
            <value>The default is 0. The range of values is 0-32768.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndRecFm">
            <summary>Returns or specifies the record format for files being created on the host
            by an IND$FILE transfer.</summary>
            <remarks>
            	<para>This property affects IND$FILE transfer and is applicable to TSO or CMS 3270 sessions.</para>
            	<para>This property is only relevant if the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrHostSys">XfrHostSys</see> property is set to Tso or Cms.</para>
            </remarks>
            <value>The default value (Variable) forces the host to create variable-length records and preserves the format of a binary file.<br/><br/></value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndSecAlloc">
            <summary>Gets or sets the size of any additional allocations (in Allocation Units, as specified by the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndAllocUnit">XfrIndAllocUnit</see>) property in
            the event that the primary allocation is not sufficient.</summary>
            <remarks>
            	<para>Multiple secondary allocations (known as "extents") are allowed, up to a host-specified limit (generally 15). This property affects IND$FILE transfer and is
            applicable to 3270 sessions only. The default is 0. The range of values is 0-32768.</para>
            	<para>This property is only relevant if the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrHostSys">XfrHostSys</see> property is set to Tso.</para>
            </remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndSO">
            <summary>Returns or specifies whether to convert shift-in (SI) characters 
            to US (hex 1F) and shift-out (SO) characters to RS (hex 1E) in 
            JISCII files received from the host.</summary>
            <remarks>This property applies to JISCII file transfers only.
            This property is applicable to double-byte 3270 sessions only.</remarks>
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrIndStrucFldSz">
            <summary>Returns or specifies whether Reflection should use the Write 
            Structured Field protocol for IND$FILE transfers and, if so, which 
            size buffer to use.</summary>
            <remarks>This property affects IND$FILE transfer and is applicable to 3270 sessions only.</remarks>
            <value>
            	<para>For the English version, the default value (SF4K) uses the Write Structured Field protocol with a 4K buffer.</para>
            	<para>For the Japanese version, the default value (SF2K) uses the Write Structured Field protocol with a 2K buffer.<br/></para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrJisciiCrlf">
            <summary>Returns or specifies whether carriage returns and line-feed characters (CR/LF)  
            at the end of lines in JISCII files are removed (from files you send to the host) 
            or added (to files you receive from the host).</summary>
            <remarks>
            	<para>CR/LF processing is typically appropriate for JISCII files, but not for binary files.</para>
            	<para>This property is applicable to double-byte 3270 sessions only.</para>
            	<para>If you specify a value that is too large for your host, it will disconnect your session when you first attempt to send a file big enough to fill the buffer.
            Most systems support values up to 8K.</para>
            </remarks>
            <value>The default is Convert, which specifies that carriage return and line-feed characters are added and removed.<br/></value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrLocalFile">
             <summary>
             Returns or specifies a default PC file or files for the PC to 
             receive (for transfers from the host), or for the host to receive 
             (for transfers to the host).
             </summary>
             <remarks>
              When no path is given, Reflection 
             uses the folder specified by XfrCurrentDirectory. Note: 
             This property only affects file transfer done using the File 
             Transfer dialog box. If you are transferring files programmatically 
             using IndReceiveFile method or IndSendFile method, you must specify 
             the local file name using the LocalFile argument.
            
             Use commas to separate multiple file names, for example:
            
             <para>FileTransfer.XfrRemoteFile = "test1.txt, test2.txt"</para>
            
             This property affects IND$FILE data transfer and and is applicable 
             to 3270 sessions only.
             
             The default value is "".
             This string can be up to 260 characters long.
             </remarks>
             <exception cref="T:Attachmate.Reflection.SecuredSettingException">
             This exception is thrown when you modify a Reflection property that has been secured
             via the Permissions Manager, or if such a modification requires Administrator privileges.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
             indicate an empty value.
             </exception>        
             /// <exception cref="T:System.ArgumentException">
             Thrown if the set parameter length is too long.
             </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrReceive8Dot3">
            <summary>Returns or specifies whether or not long file names received from an 
            IBM mainframe are truncated.</summary>
            <remarks>When this property is True, Host files with long names are truncated to the "8.3" format (file names have 
            up to eight characters plus a three-digit extension) when received 
            on the PC.</remarks>
            <value>The default value is True.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrRemoteFile">
             <summary>
             Returns or specifies a host file or files for the PC to receive 
             (for transfers from the host), or for the host to receive 
             (for transfers to the host). 
             </summary>
             <remarks>
             This property only affects file 
             transfer done using the File Transfer dialog box. If you are 
             transferring files programmatically using IndReceiveFile method or 
             IndSendFile method, you must specify the local file name using the 
             HostFile argument.
             <para></para>
             Use commas to separate multiple file names, for example:
            
             <para>FileTransfer.XfrRemoteFile = "test1 data, test2 data"</para>
             This property affects IND$FILE data transfer and is only for 3270 sessions.
             The default value is "".
             This string can be up to 260 characters long.
             </remarks>
             <exception cref="T:Attachmate.Reflection.SecuredSettingException">
             This exception is thrown when you modify a Reflection property that has been secured
             via the Permissions Manager, or if such a modification requires Administrator privileges.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
             indicate an empty value.
             </exception>        
             /// <exception cref="T:System.ArgumentException">
             Thrown if the set parameter length is too long.
             </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrHostReturnCode">
            <summary>This property returns a numeric value which indicates success or failure 
            by the transfer program after a transfer is completed.</summary>
            <value>
            	<para></para>
            	<list type="table">
            		<item>
            			<term width="78">
            				<strong>Value</strong>
            			</term>
            			<description>
            				<strong>Description</strong>
            			</description>
            		</item>
            		<item>
            			<term width="78">0</term>
            			<description>The transfer was successful.</description>
            		</item>
            		<item>
            			<term width="78">12208</term>
            			<description>An error was detected by AS/400. Additional explanation is available in the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrHostMessage">XfrHostMessage</see> property.</description>
            		</item>
            		<item>
            			<term width="78">28929</term>
            			<description>The command was cancelled.</description>
            		</item>
            	</list>
            	<para></para>
            	<para>Other values may be returned by the PC communication subsystem. Refer to your router's documentation to interpret the values.</para>
            </value>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrStartTimeout">
            <summary>
            Returns or specifies how many seconds Reflection should wait for a 
            host response when attempting to connect to a host. 
            </summary>
            <remarks>
            If the specified 
            amount of time elapses with no response from the host, Reflection 
            times out and returns an error.
            This property affects IND$FILE transfer and is applicable to 
            3270 sessions only.
            
            The default is 25.
            The range of values is 1-9999.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>                        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrTimeout">
            <summary>
            Returns or specifies how many seconds Reflection should wait for a 
            host response before timing out and returning an error. 
            </summary>
            <remarks>
            (Most timeouts occur during file transfers, though this value is 
            also used in other situations.) 
            This property affects IND$FILE transfer and is applicable to 
            3270 sessions only.
            
            The default is 60.
            The range of values is 1-9999.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>                        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrSpacesToUnderscores">
            <summary>
            	<para>Gets or sets whether to translate spaces in a file name to underscores during a transfer to a mainframe or AS/400.</para>
            	<para>
            		<br/>
            	</para>
            </summary>
            <value>When this property is set to True (the default), spaces in PC file names are changed to underscores when sent to a mainframe or AS/400. For
            example, a PC file named "No way" is translated to "No_way" when sent to the host.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IFileTransfer.XfrUnderscoresToSpaces">
            <summary>Returns or specifies whether underscores in file names are converted to 
            spaces when receiving files from an IBM mainframe or AS/400 system.</summary>
            <value>The default is True.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that has been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots">
            <summary>
            Defines methods to configure hotspots and properties to 
            get and set hotspot visibility, position, and other attributes.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.HotSpotsEnabled">
            <summary>
            Gets or sets a value indicating whether hotspots are enabled.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.HotSpotsVisible">
            <summary>
            Gets or sets a value indicating whether hotspots are visible.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.MRUHotSpotColumn">
            <summary>
            Gets the most recently used hotspot column position.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.MRUHotSpotLength">
            <summary>
            Gets the most recently used hotspot length.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.MRUHotSpotRow">
            <summary>
            Gets the most recently used hotspot row position.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.MRUHotSpotText">
            <summary>
            Gets the most recently used hotspot text.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.HotSpotStyle">
            <summary>
            Gets or sets a value indicating the way that hotspots should appear on the screen.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.HotspotsMouseButton">
            <summary>Gets or sets a value indicating the mouse button used to invoke hotspots.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.HotspotsDoubleClick">
            <summary>Gets or sets a value indicating whether a double click is required to activate the hotspot.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.HotspotsShiftKey">
            <summary>Gets or sets a value indicating whether the Shift key must be used in conjunction with the mouse to activate the hotspot.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.HotspotsCtrlKey">
            <summary>Gets or sets a value indicating whether the Ctrl key must be used in conjunction with the mouse to activate the hotspot.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.HotspotsAltKey">
            <summary>Gets or sets a value indicating whether the Alt key must be used in conjunction with the mouse to activate the hotspot.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.MatchCase">
            <summary>Gets or sets a value indicating whether hotspots are case sensitive.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.SpaceDelimiter">
            <summary>Gets or sets a value indicating whether the whitespace created by pressing the spacebar is to be used as a hotspots delimiter.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.UseOtherDelimiters">
            <summary>
            Gets or sets a value indicating whether the contents of the OtherDelimiters property are to be used as additional hotspots delimiters.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.OtherDelimiters">
            <summary>
            Gets or sets a value indicating other character(s) to use as hotspot delimiters when the UseOtherDelimiters property is set to true.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.HotspotsMap">
            <summary>Gets or sets the current hotspots definition file.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.MappingCollection">
            <summary>
            Gets a set of all the hotspots that have been mapped in the current hotspot map.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.DefaultHotspotMapName">
            <summary>Gets the path and filename that the Save method saves a hotspot to when the location defined by the HotspotsMap property is read-only.</summary>
            <remarks>The Save method saves the in-memory hotspot collection to the hotspot file defined by the HotspotsMap property. However, if that location points at a read-only
            location such as the built-ins folder underneath program files\Micro Focus\reflection where files cannot be written to, then the Save method saves the file in
            the user's documents area (e.g. Documents\Micro Focus\Reflection\Hotspots Maps) under the name of the active session.</remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.UnprotectedFieldHotSpots">
            <summary>
            Gets or sets a value indicating whether hotspots are enabled in unprotected fields on the host screen.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.ConfigureHotSpots(System.String)">
            <summary>
            Load the hotspots file as the current hotspots definitions.
            </summary>
            <param name="hotSpotsFilePath">Hotspots file path</param>
            <returns>Method return code</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.Clear">
            <summary>
            Removes all items from the hotspots map, resulting in an empty map.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.AddHotspot(Attachmate.Reflection.Emulation.IbmHosts.Hotspot)">
            <summary>
            Adds a new hotspot to the current hotspot map. If a hotspot with the specified text already
            exists, subject to the existing hotspot's case sensitivity property, it is removed prior to the new hotspot being added.
            </summary>
            <param name="hs">The hotspot to be added</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.RemoveHotspot(Attachmate.Reflection.Emulation.IbmHosts.Hotspot)">
            <summary>
            Removes a hotspot with the specified characteristics from the currrent hotspot map. 
            </summary>
            <param name="hotspot">The hotspot to remove</param>
            <remarks>Does nothing if no match is found.</remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.RemoveHotspotByText(System.String,System.Boolean)">
            <summary>
            Removes all hotspots with the specified text from the currrent hotspot map. 
            </summary>
            <param name="hotspotText">Remove all hotspots with this text value</param>
            <param name="caseSensitive">Whether to remove hotspots with the specified text, regardless of case</param>
            <remarks>Does nothing if no match is found.</remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.Contains(System.String,System.Boolean)">
            <summary>
            Gets a value indicating whether there is a hotspot with the specified text in the current hotspot map.
            </summary>
            <param name="hotspotText">The hotspot text</param>
            <param name="caseSensitive">Whether to look for hotspots with the specified text, regardless of case</param>
            <returns>True if there is a hotspot with the specified text in the current hotspot map, false if not</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.Save">
            <summary>
            Saves changes to current hotspots map. If the current hotspots map (identified by the HotspotsMap property)
            resides in the installation directory and cannot be written to, the map is saved to the current user's Hotspots Maps subfolder
            underneath the Reflection folder, using the terminal session name as the hotspot map filename. 
            </summary>
            <returns>One of the ReturnCode enumerated values, unless an exception has been thrown</returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while trying to save the hotspots map.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to save the hotspots map.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.SaveAs(System.String)">
            <summary>
            Saves current hotspots map contents to a file.
            </summary>
            <param name="pathName">The path to the new hotspots map file</param>
            <returns>One of the ReturnCode enumerated values, unless an exception has been thrown.</returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while trying to save the hotspots map.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to save the hotspots map.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IHotSpots.ApplyCurrentHotspots">
            <summary>Sends and applies the current hotspot map contents to the host session.</summary>
            <returns>One of the ReturnCode enumeration values</returns>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen">
            <summary>
            IIbmScreen defines an interface to host the emulation screen object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.AutoCopyOnSelect">
            <summary>Gets or sets a value indicating whether the terminal automatically copies selected text
            to the Clipboard.</summary>
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.BlanksBetweenFields">
            <summary>
            Gets or sets the number of consecutive blank spaces between columns of data
            that are required for the data to be tab delimited. 
            </summary>
            <remarks>
            This setting works in conjunction
            with the UseTableFormat property to determine where columns exist in 
            tab-delimited information on the Clipboard.
            <para>The default value is 2. The range of values is 1 - 16.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ClearSelectionOnCopy">
            <summary>Gets or sets a value indicating whether text remains selected after it
            is copied to the Clipboard.</summary>
            <remarks>If this setting is enabled, the terminal automatically
            deselects text after it is copied to the Clipboard.</remarks>
            <value>The default is True.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CopyInputFieldsOnly">
            <summary>Gets or sets a value indicating whether a copy (cut or append) operation
            puts values in unprotected input fields on the Clipboard.</summary>
            <remarks>This property is useful for working with form-oriented host applications.
            <para></para><para>If this property is True and <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.UseTableFormat">UseTableFormat</see> is also True, Reflection is more likely to interpret text as containing columns, because there
            will be more spaces.</para></remarks>
            <value>
            	<para>The default value is False.</para>
            	<para>If this property is True, the terminal replaces protected characters with spaces. If it is false, protected and unprotected characters are treated
            identically.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CopyTrailingSpaces">
            <summary>
            Gets or sets a value indicating whether the terminal copies the character
            spaces that trail a selection when text is copied to the Clipboard.
            </summary>
            <remarks>
            When this property is true, the terminal includes trailing spaces
            in text copied to the Clipboard. When it is false, the terminal does not include them.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CutFillCharacter">
            <summary>Gets or sets a value indicating whether Cut and Clear actions replace characters
            with nulls or spaces.</summary>
            <remarks>
            	<para>The value of this property determines how data is transmitted to the host, but does not influence the current screen display. All cut or cleared characters
            appear as spaces in the current screen display.</para>
            </remarks>
            <value>For the default value (SpaceCharacter), cut and cleared characters are replaced with spaces.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator.  
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteReplaceTabs">
            <summary>Gets or sets a value indicating whether to replace tabs in the Clipboard's contents
            with a specified string before pasting the selection within a host application.</summary>
            <remarks>The PasteTabReplacement property defines the string.</remarks>
            <value>The default value is True.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteTabReplacement">
            <summary>Gets or sets the string that replaces tabs if the PasteReplaceTabs
             setting is set to true.</summary>
            <remarks>Any random set of characters is acceptable, including character spaces. 
             The PasteReplaceTabs property must be set to true.
             The string can be up to 260 characters long.</remarks>
            <value>The default value  is "".</value>
            <exception caption="" cref="T:System.ArgumentException">
             This exception is thrown if the set parameter length exceeds the maximum allowed length.
             </exception>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
             with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteUsingFieldDelimiters">
            <summary>Gets or sets a value indicating what happens if the terminal reaches a 
            protected field while pasting text in the following row at the same column location 
            where the paste began.</summary>
            <remarks>When the value is true, the terminal searches to the right and then down until it finds an 
            unprotected field in which to paste text. If no unprotected fields are found, pasting stops 
            and any remaining text is placed into the PasteNext buffer.
            <para>
            When the value is false, pasting stops, and any text remaining in the Clipboard
            is placed into the PasteNext buffer. 
            </para></remarks>
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteWrapText">
            <summary>Gets or sets a value indicating whether text that exceeds the current
            line length is pasted in the next field or truncated.</summary>
            <remarks>If this value is true, remaining text is pasted at the start of the next field. 
            If it is false, the terminal truncates the current line and begins pasting at the next field with
            the beginning of a new line.</remarks>
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteWrapDown">
            <summary>Gets or sets a value indicating whether pasted text should be wrapped
            to the field below (instead of to the field to the right).</summary>
            <remarks>If this value is true, the text is wrapped to the field below the current field.
            If it is false, the text is wrapped to the next input field to the right.</remarks> 
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteIgnoreFieldType">
            <summary>Gets or sets a value that controls how text is pasted on a screen that has restricted locations. When true, pasting into a restricted field is skipped if the
            text contains an invalid entry for that field and the remaining text is pasted into subsequent fields. When false, pasting stops and the screen is locked when
            an attempt is made to paste an invalid entry into a restricted field. This property applies only to IBM 5250 terminal sessions.<br /></summary>
            <value>The default value is true.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
            <exception caption="System.NotSupportedException" cref="T:System.NotSupportedException">This exception is thrown when attempting to access or set this property on an IBM 3270 session.</exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CursorColumn">
            <summary>
            Gets or sets the cursor's column location relative to the left edge of the terminal window. 
            </summary>
            <remarks>
            CursorRow returns the row location. The value of this property can be changed with the 
            MoveCursor or MoveCursorTo methods as well as by keyboard and mouse actions.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CursorRow">
            <summary>
            Gets or sets the cursor's row location relative to the top edge of the terminal window. 
            </summary>
            <remarks>
            CursorColumn returns the column location. The value of this property can be changed 
            with the MoveCursor or MoveCursorTo methods as well as by keyboard and mouse actions.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.Columns">
            <summary>
            Gets the number of columns in the screen.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.EnableHotSpots">
            <summary>
            Gets or sets a value indicating whether hotspots can be used. 
            </summary>
            <remarks>
            The default value is true.
            When EnableHotspots is set to false, hotspots are not displayed, regardless of 
            the value of the ShowHotspots property.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.HotSpots">
            <summary>
            Gets the HotSpots object which is used to obtain/specify information pertaining to HotSpots behavior.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.IsKeyboardLocked">
            <summary>
            Gets a value indicating whether the keyboard is locked.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.Oia">
            <summary>
            Gets the OIA object. OIA represents the status line on the screen.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.Selection">
            <summary>
            Gets the area of the screen that's currently selected.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PrintOptions">
            <summary>
            Gets the PrintOptions object. PrintOptions holds configuration options for print 
            emulation and print screen.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.Parent">
            <summary>
            Gets the parent object (IIbmTerminal).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.Rows">
            <summary>
            Gets the number of rows of the screen.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ScreenSettleTime">
            <summary>
            Gets or sets time duration during which there should be no host data changes. 
            </summary>
            <remarks>
            This value is used in triggering the NewScreenReady event. The value is not persisted.
            </remarks>>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ShowHotSpots">
            <summary>Gets or sets a value indicating whether hotspots are visible in the terminal window.</summary>
            <remarks>When this value is true (the default), hotspots are visible and look like buttons. 
            When it is false, hotspots are not visible, but can be recognized by the cursor's change in appearance
            when placed over them. The cursor changes from an I-beam to an arrow.
            <para>
            The EnableHotspots property determines whether hotspots can be used. 
            If EnableHotspots is true and ShowHotspots is false, hotspots can still be used, even though they are not displayed. 
            When EnableHotspots is false, hotspots are not available or displayed, regardless of the value of ShowHotspots.</para></remarks>
            <value>The default value is True.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ShowOIA">
            <summary>
            Gets or sets a value indicating whether operation and status messages are displayed
            in the Operator Information Area (OIA) at the bottom of the terminal window.
            </summary>
            <remarks>This value is true, by default.</remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ShowSosi">
            <summary>
            Gets or sets a value indicating whether to show shift-out and shift-in (SO/SI)
            control characters on the terminal screen. 
            </summary>
            <remarks>
            This value helps you determine where double-byte characters or fields begin and end. When this property
            is true, SO/SI characters are shown on the host screen. When it is false,
            they are not shown. This property is applicable to double-byte terminal sessions only.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ShowBytesRemaining">
            <summary>Gets or sets a value indicating whether the Show Bytes Remaining
            indicator is displayed on the host status line.</summary>
            <remarks>This indicator tells you the number of bytes remaining in the current field.
            <para>
            The number of remaining bytes (characters) in the current field of a host application 
            depends on whether the typed characters use combiner characters (for example, Thai). 
            If you use a character set that doesn't use combiner characters, 
            the remaining bytes equal the number of visible spaces.
            </para>
            Some combiner characters occupy no space, such as those that modify a base character.  
            However, they count toward the maximum number of bytes allowed in an input field. 
            Therefore, the host input field can be full without appearing full.</remarks>
            <value>
            	<para>The default value is False.<br/></para>
            	<para>If you will be entering composed characters in host screens, set this property to True.</para>
            	<para>
            		<br/>
            	</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.UseTableFormat">
            <summary>Gets or sets a value that specifies how spaces are processed when text is copied
            to the Clipboard.</summary>
            <remarks>If this property is true, Reflection determines whether
            the text on the screen is laid out in columns, and if so, uses this
            setting to determine whether to replace spaces between the columns with tabs. 
            <para>Use BlanksBetweenFields to specify the number of blank spaces in
            a row between columns of data in order for the data to be tab delimited. </para>
            This property is useful for copying tables from host applications and
            pasting them in other applications.</remarks>
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.SelectionMode">
            <summary>
            Gets or sets options (Block or Stream) that determine the shape of a selected region.
            </summary>
            <remarks>
            Block causes selected text to form a rectangular shape. 
            <para>
            Stream causes selected text to wrap along rows.
            </para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteLineBreak">
            <summary>Gets or sets the character that is inserted in a field on the terminal screen when data
            containing line breaks is copied from the Clipboard.</summary>
            <remarks>
            	<para></para>
            </remarks>
            <value>The default value is NewLineKey, which inserts a newline character at line breaks.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.KanaLockState">
            <summary>Gets or sets a value that specifies Kana Mode from the JIS-layout, which produces
            half-width Katakana characters.</summary>
            <remarks>
            	<para></para>
            	<para>This property is applicable to double-byte 3270 sessions only.</para>
            </remarks>
            <value>
            	<para>When this property is True (the default), the keyboard uses Kana Mode.</para>
            	<para>When it is False, the keyboard uses ANSI-layout for the keyboard mapping.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a property that has been secured 
            with the Permissions Manager or that can only be modified by an Administrator. 
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CopyFormatText">
            <summary>
            Gets or sets a value indicating whether to copy from Reflection to the text Clipboard format
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CopyFormatUnicode">
            <summary>
            Gets or sets a value indicating whether to copy from Reflection to the Unicode text Clipboard format
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CopyFormatRTF">
            <summary>
            Gets or sets a value indicating whether to copy from Reflection to the RTF (Rich Text Format) Clipboard format
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CopyFormatBIFF">
            <summary>
            Gets or sets a value indicating whether to copy from Reflection to the BIFF (Binary Interchange File Format) Clipboard format
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CopyFormatRefMF">
            <summary>
            Gets or sets a value indicating whether to copy from Reflection to the Reflection proprietary Clipboard format
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CopyFormatDIB">
            <summary>
            Gets or sets a value indicating whether to copy from Reflection to the DIB (Device Independent Bitmap) Clipboard format
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CopyFormatRetainColor">
            <summary>
            Gets or sets a value indicating whether to retain host colors when copying to the RTF (Rich Text Format) Clipboard format
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode,System.Boolean,System.Boolean)">
            <summary>
              <para>Pastes the contents of the Clipboard to a defined region of the current screen and, if needed, regions of subsequent screens in the host application.</para>
            </summary>
            <param name="top">The starting row coordinate for the first screen.</param>
            <param name="left">The starting column coordinate for the first screen.</param>
            <param name="bottom">The ending row coordinate for the first screen.</param>
            <param name="right">The ending column coordinate for the first screen.</param>
            <param name="remTop">The starting row coordinate for the remaining screens.</param>
            <param name="remLeft">The starting column coordinate for the remaining screens.</param>
            <param name="remBottom">The ending row coordinate for the remaining screens.</param>
            <param name="remRight">The ending column coordinate for the remaining screens.</param>
            <param name="keycode">The <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode">ControlKeyCode</see> value that specifies the terminal key to use to scroll to the second and remaining screens in the paste range.</param>
            <param name="wrapText">Determines what happens when a line of text being copied exceeds the current line length. If this value is true, the remaining text in the line is pasted at
            the start of the next field. If it is false, the current line is truncated and the next line is pasted at the start of the next field.</param>
            <param name="useFieldDelim">Controls how text is pasted when the screen contains protected locations. If false, pasting stops if the first field on a row is protected. If true, the method
            continues to search for subsequent fields, searching first right and then down, until it finds another unprotected field. If an unprotected field is located,
            pasting starts in this field; if not, pasting stops. When pasting is stopped, any remaining text is put into the PasteNext buffer.</param>
            <remarks>
              <para>A paste range defines a screen region in which you can paste text across multiple screens after you cut, copy, or append a selection on the Clipboard.</para>
              <para>Users can define and use paste ranges with the Paste Range dialog box but the screen positions and other settings are not saved when they close their
            sessions. Creating a macro with the PasteRange method allows you to define and save a custom paste range that is tailored for an application.</para>
              <para>Before you create a paste range macro, consider defining and testing a range with the Paste range dialog box first. Then use the settings in the dialog box
            for your macro. After you create a Paste Range macro, users can run it to paste into the custom screen region without needing to configure the paste range
            every time they open their session.</para>
              <para>
                <strong>More about the parameters...</strong>
              </para>
              <para>The parameters define the region in the host screen(s) to be used for the paste operation, the terminal key used to scroll to subsequent screens, and how
            word wrap and field delimiters are handled.</para>
              <para>Values for the screen position arguments that define text regions can be positive, zero, or negative. Positive row values are counted down from the top of
            the screen, zero is the last row on the screen, and negative values are counted up from the last row. Positive column arguments are counted from the left edge
            of the screen, zero is the last column on the screen, and negative values are counted back from the last column. For example, to start pasting on the first
            screen at the upper-left corner of the screen, set <em>top</em> = 1 and <em>left</em> = 1. To end pasting at the lower-right corner of the screen, set
            <em>bottom</em> = 0 and <em>right</em> = 0.</para>
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CopyDataSeparation">
            <summary>
            Gets or sets a value specifying whether the data copied from Reflection should
            be separated by delimiters at field boundaries or at word boundaries. This option
            controls formatting for spreadsheet or other cell-based information and affects only
            the text and BIFF formats.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteMaskProtectedFields">
            <summary>
            Gets or sets a value indicating whether pasted text should be interpreted as a host screen image
            and overlaid onto the current screen starting at the current cursor position. If true, where the 
            current screen contains an unprotected field, the source image text is pasted; where the current
            screen contains a protected field, the source image text is skipped.
            If false, the text is interpreted as a linear stream that can contain new lines and delimiters,
            and is pasted accordingly.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteAlignText">
            <summary>
            Gets or sets a value indicating whether to align space separated data with fields on the screen.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteClearField">
            <summary>
            Gets or sets a value indicating whether to clear all of the previous data remaining in a field after pasting
            new data into it.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteMoveCursor">
            <summary>
            Gets or sets a value indicating whether to move the cursor to the end of the pasted text. 
            If False, the cursor is restored to the position it was in before text was pasted.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ConfigureHotSpots(System.String)">
            <summary>
            Load the hotspots file as the current hotspots definitions.
            </summary>
            <param name="hotSpotsFilePath">Hotspots file path.</param>
            <returns>Method return code.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CopyAppend">
            <summary>
            Appends selected text to the end of the Clipboard.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.Copy">
            <summary>
            Copies selected text to the Clipboard.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CopyToBuffer(System.Int32)">
            <summary>
            	<para>Copies selected text to one of four clipboard buffers. If an invalid bufferNum value is specified, the request is ignored.</para>
            	<para>Note: This property is supported only by the InfoConnect Desktop product. It is not supported by other Micro Focus products.</para>
            </summary>
            <param name="bufferNum">int value 1 through 4 indicating which clipboard buffer to copy data to.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.Cut">
            <summary>
            Cuts selected text and copies it to the Clipboard.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.Paste">
            <summary>
            Copies data from the Clipboard to the current cursor location.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteContinue">
            <summary>
            Pastes remaining text from a previous Paste command.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PasteFromBuffer(System.Int32)">
            <summary>
            	<para>Pastes data from one of four clipboard buffers.  If an invalid bufferNum value is specified, or if the specified clipboard buffer does not contain
            data, the request is ignored.</para>
            	<para>Note: This property is supported only by the InfoConnect Desktop product. It is not supported by other Micro Focus products.</para>
            </summary>
            <param name="bufferNum">int value 1 through 4 indicating which clipboard buffer to paste data from.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.SelectAll">
            <summary>Selects all of the text on the terminal window.</summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CancelSelection">
            <summary>
            Cancels the text selection in the terminal window. 
            If no text is selected, this method has no effect.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.FindField(System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
            <summary>
            Locates a field starting from the specified row and column.
            </summary>
            <param name="startRow">Start row position.</param>
            <param name="startColumn">Start column position.</param>
            <param name="findoption">The direction of the search.</param>
            <returns>A host field that is found, or null if it is not found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the startRow or startColumn parameters 
            are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.FindField(System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
            <summary>
            Locates a field that matches the specified field length, starting from the specified row and column. 
            </summary>
            <param name="startRow">Start row position.</param>
            <param name="startColumn">Start column position.</param>
            <param name="fieldLength">Length of the field.</param>
            <param name="findoption">The direction of the search.</param>
            <returns>A host field that matches the specified field length, or null if it is not found.  </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the startRow or startColumn parameters are outside 
            the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.FindField(System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FieldType,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
            <summary>
            Locates a field that matches the specified field attributes, starting from the specified row and column. 
            </summary>
            <param name="startRow">Start row position.</param>
            <param name="startColumn">Start column position.</param>
            <param name="fieldtype">Length of the field.</param>
            <param name="findoption">The direction of the search.</param>
            <returns>A host field that is found, or null if it is not found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the startRow or startColumn parameters are 
            outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.FindField(System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FieldType,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
            <summary>
            Locates a field that matches the specified field length and field attributes, starting from the specified row and column. 
            </summary>
            <param name="startRow">Start row position.</param>
            <param name="startColumn">Start column position.</param>
            <param name="fieldLength">Leng of the field.</param>
            <param name="fieldtype">Type of the field. </param>
            <param name="findoption">The direction of the search.</param>
            <returns>A host field that matches the specified field length and attributes, or null if it is not found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the startRow or startColumn parameters are outside the range of valid values (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.GetCharacterForegroundColor(System.Int32,System.Int32)">
            <summary>
            Gets the foreground color of the character at the specified location.
            </summary>
            <param name="row">The character row position.</param>
            <param name="column">The character column position.</param>
            <returns>Foreground color of the character.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.GetCharacters(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets ScreenCharacter objects from the specified screen location. Each object represents one character. 
            </summary>
            <remarks>
            The length argument specifies the number of screen bytes to get. In SBCS, the number of screen bytes 
            is equal to the number of ScreenCharacter objects. In DBCS, the two numbers may differ. 
            If the last byte is half of a DBCS character, it is not returned.
            </remarks>
            <param name="row">The character row position.</param>
            <param name="column">The character column position.</param>
            <param name="length">The character length.</param>
            <returns>ScreenCharacter object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are 
            outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.GetCharacter(System.Int32,System.Int32)">
            <summary>
            Gets the ScreenCharacter at the specified location.
            </summary>
            <param name="row">The character row position.</param>
            <param name="column">The character column position.</param>
            <returns>The character.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are outside 
            the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.GetField(System.Int32,System.Int32)">
            <summary>
            Gets the host field that the specified row and column are part of.
            </summary>
            <param name="row">Host field row position.</param>
            <param name="column">Host field column position.</param>
            <returns>The host field.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are outside 
            the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.GetFields(Attachmate.Reflection.Emulation.IbmHosts.FieldType)">
            <summary>
            Gets a host field collection that matches specifed fieldAttributes.
            </summary>
            <param name="fieldType">FieldType enum selection.</param>
            <returns>Host field collection.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.GetFieldColor(System.Int32,System.Int32)">
            <summary>
            Gets the foreground color of the host field that the specified row and column are part of.
            </summary>
            <remarks>
            This color can differ from the character foreground color at the specified screen location.
            </remarks>
            <param name="row">Host field row position.</param>
            <param name="column">Host field column position.</param>
            <returns>Foreground color of the host field.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are 
            outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.GetFieldText(System.Int32,System.Int32)">
            <summary>Gets the text of the field contained within the specified row and column.</summary>
            <param name="row">Field row position.</param>
            <param name="column">Field column position.</param>
            <remarks>
            	<span style="LINE-HEIGHT: 115%; FONT-FAMILY: 'Calibri','sans-serif'; FONT-SIZE: 8pt; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: Calibri; mso-fareast-theme-font: minor-latin; mso-hansi-theme-font: minor-latin; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA">
            Coordinates are based on 1,1 for the upper-left corner of the terminal window (as they appear on the status line if you move the cursor to the field you want
            to retrieve). The coordinates can be located anywhere within the field.</span>
            </remarks>
            <returns>Text of the field.</returns>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are
            outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.GetText(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the text from the specified location. 
            </summary>
            <remarks>
            The length argument specifies the number of screen bytes to get. 
            In SBCS, the number of screen bytes is the same as that of the ScreenCharacter objects.
            In DBCS, the two numbers can differ. If the last byte is half 
            of a DBCS character, it is not returned.
            </remarks>
            <param name="row">Text row position.</param>
            <param name="column">Text column position.</param>
            <param name="length">Length of the text.</param>
            <returns>The text.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are 
            outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.GetTextEx(System.Int32,System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.GetTextArea,Attachmate.Reflection.Emulation.IbmHosts.GetTextWrap,Attachmate.Reflection.Emulation.IbmHosts.GetTextAttr,Attachmate.Reflection.Emulation.IbmHosts.GetTextFlags)">
            <summary>
            Gets the text from the specified screen area.
            </summary>
            <remarks>
            The (startRow, startColumn, endRow, endColumn) 4-tuple allows data to be retrieved from one or more lines, as a
            continuous stream or as a block of characters. 
            </remarks>
            <param name="startRow">The first row from which to retrieve data.</param>
            <param name="startColumn">The first column from which to retrieve data.</param>
            <param name="endRow">The last row from which to retrieve data.</param>
            <param name="endColumn">The last column from which to retrieve data.</param>
            <param name="areaType">String data returned as a stream or block.</param>
            <param name="wrap">Screen wrapping characteristics.</param>
            <param name="attr">The field types to return.</param>
            <param name="flags">Formatting information.</param>
            <returns>The text in the specifed area.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.IsAttribute(System.Int32,System.Int32)">
            <summary>
            Tests whether the specified screen location is a field attribute position.
            </summary>
            <param name="row">Screen row position.</param>
            <param name="column">Screen column position.</param>
            <returns>The boolean value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are
            outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.LightPen(System.Int32,System.Int32)">
            <summary>Simulates a light pen selection at the specified location in the terminal window.</summary>
            <param name="row">Specifies a row in the host screen.</param>
            <param name="column">Specifies a column in the host screen.</param>
            <remarks>This method is available only during 3270 sessions.</remarks>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are 
            outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.LockInput">
            <summary>
            Locks the screen so that users cannot use the keyboard to provide input.
            </summary>
            <remarks>
            Other means of input (such as, macros or the application programming interface) are still available.
            <para>To release the lock, use UnlockInput().</para>
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.MoveCursor(System.Int32,System.Int32)">
            <summary>Moves the cursor forward or back.</summary>
            <param name="rows">The number of rows to move the cursor. The minimum and maximum values vary according to the number of rows supported by the terminal model Reflection is
            emulating.</param>
            <param name="columns">The number of columns to move the cursor. The minimum and maximum values vary according to the number of columns supported by the terminal model Reflection is
            emulating.</param>
            <remarks>
            	<para>Use the CursorRow and CursorColumn properties to verify the cursor location.</para>
            	<para>Both "rows" and "columns" arguments can be positive or negative numbers. Negative numbers move the cursor back toward smaller rows and columns. The
            resulting row and column position is bound by the screen's dimensions. Rows and columns do not wrap when they reach the maximum or minimum row or column
            values.</para>
            	<para>To move the cursor to a specific location, use the <see cref="O:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.MoveCursorTo">MoveCursorTo Method</see>.</para>
            </remarks>
            <returns>ReturnCode indicates success, failure, or an error if the cursor position reaches the screen boundary.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.MoveCursorTo(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to the specified screen location.
            </summary>
            <remarks>
            If either row or column is out of screen bounds, 
            the method moves the cursor but within the screen's dimensions.
            </remarks>
            <param name="row">Row position to move the cursor to.</param>
            <param name="column">Column position to move the cursor to.</param>
            <returns>ReturnCode indicates success, failure, or a warning condition 
            if the cursor position reaches the screen boundary.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.MoveCursorTo(System.Int32)">
            <summary>
            Moves the cursor to the specified screen location.
            </summary>
            <param name="screenIndex">One-based screen index.</param>
            <returns>ReturnCode.Success if successful or ReturnCode.Error if unsuccessful.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PutCharacter(Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter,System.Int32,System.Int32)">
            <summary>
            Puts a ScreenCharacter at the specified screen location. 
            </summary>
            <remarks>
            If the ScreenCharacter is a DBCS character, the character takes a two-byte space starting 
            at the specified screen location.
            </remarks>
            <param name="character">Screen character to put at the screen.</param>
            <param name="row">Row position on the screen.</param>
            <param name="column">Column position on the screen.</param>
            <returns>ReturnCode indicates success, failure, or a 
            warning condition if the cursor position reaches the screen boundary.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are 
            outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PutText(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Puts text at the specified screen location.
            </summary>
            <remarks>
            If the text string is longer than "length", the text is truncated. Text can span more than one field.
            </remarks>
            <param name="text">Text to put on screen.</param>
            <param name="row">Row position on which to put the text.</param>
            <param name="column">Column position on which to put the text.</param>
            <param name="length">Number of byte positions available for the text.</param>
            <returns>ReturnCode indicates success, failure, or a 
            warning condition if the cursor position reaches the screen boundary.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are 
            outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.PutText(System.String,System.Int32,System.Int32)">
            <summary>
            Puts the text at the specified screen location. Text can span more than one field.
            </summary>
            <param name="text">Text to put on screen.</param>
            <param name="row">Row position on which to put the text.</param>
            <param name="column">Column position on which to put the text.</param>
            <returns>ReturnCode indicates success, failure, or a warning condition 
            if the cursor position reaches the screen boundary.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters 
            are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ScreenCoordinateToIndex(System.Int32,System.Int32)">
            <summary>
            Converts screen position in row and column to linear screen buffer index.
            </summary>
            <param name="row">Screen row.</param>
            <param name="column">Screen column.</param>
            <returns>One-based screen index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are 
            outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>                
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ScreenIndexToRow(System.Int32)">
            <summary>
            Gets the row value of a screen location pointed to by screenIndex.
            </summary>
            <param name="screenIndex">One-based screen index location.  Range = 1 through (rows * columns).</param>
            <returns>Row corresponding to the specified screen index location.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the screenIndex parameter is outside the range of valid values.
            </exception>        
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ScreenIndexToColumn(System.Int32)">
            <summary>
            Gets the column value of a screen location pointed to by screenIndex.
            </summary>
            <param name="screenIndex">One-based screen index location.  Range = 1 through (rows * columns).</param>
            <returns>A column value corresponding to the specified screen index location.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the screenIndex parameter is outside the range of valid values.
            </exception>        
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ScreenIndexToCoordinate(System.Int32)">
            <summary>
            Gets the screen coordinate of a screen location pointed to by screenIndex.
            </summary>
            <param name="screenIndex">One-based screen index location.  Range = 1 through (rows * columns).</param>
            <returns>A screen coordinate corresponding to a specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the screenIndex parameter is outside the range of valid values.
            </exception>        
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.SendControlKey(Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode)">
            <summary>
            Sends a host control key to the host.
            </summary>
            <param name="keycode">ControlKeyCode object.</param>
            <returns>ReturnCode indicates success, failure, or a warning condition 
            if the cursor position reaches the screen boundary.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.SendControlKeySync(Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode)">
            <summary>
            Sends a host control key to the host. 
            </summary>
            <remarks>
            The method does not return until the screen has settled
            for the time duration measured by the ScreenSettleTime property.
            </remarks>
            <param name="keycode">ControlKeyCode object.</param>
            <returns>ReturnCode indicates success, failure, or a warning condition if 
            the cursor position reaches the screen boundary.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.SendKeys(System.String)">
            <summary>
            Sends the text string to the host.
            </summary>
            <param name="text">Text to be sent to the host.</param>
            <returns>ReturnCode indicates success, failure, or a warning condition 
            if the cursor position reaches the screen boundary.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.SearchText(System.String,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
            <summary>
            Searches the specified text starting from the specified screen location.
            </summary>
            <param name="text">Text to be searched on the screen.</param>
            <param name="startRow">Row position from which to start search.</param>
            <param name="startColumn">Column position from which to start search.</param>
            <param name="findoption">Specifies the direction in which text is searched.</param>
            <returns>Screen Point object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the startRow or startColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception> 
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.SearchText(System.String,System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
            <summary>
            Searches the specified text starting from the specified screen location for "searchRange" byte positions.
            </summary>
            <param name="text">Text to be searched on the screen.</param>
            <param name="startRow">Row position from which to start search.</param>
            <param name="startColumn">Column position from which to start search.</param>
            <param name="searchRange">Text range of byte positions.</param>
            <param name="findOption">Specifies the direction in which text is searched.</param>
            <returns>Screen point object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the startRow or startColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception> 
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.SearchText(System.String,System.Int32,System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FindOption)">
            <summary>
            Searches the specified text, starting from the specified screen location and ending at the specified end screen location.
            </summary>
            <param name="text">Text to be searched on the screen.</param>
            <param name="startRow">Row position from which to start search.</param>
            <param name="startColumn">Column position from which to start search.</param>
            <param name="endRow">Row position at which to end search.</param>
            <param name="endColumn">Column position at which to end search.</param>
            <param name="findOption">Specifies the direction in which text is searched.</param>
            <returns>Screen point object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the startRow, endRow, startColumn, or endColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception> 
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.SearchText(System.String,System.Int32,System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FindOption,Attachmate.Reflection.Emulation.IbmHosts.TextComparisonOption)">
            <summary>
            Searches the specified text, starting from the specified screen location and ending at the specified end screen location.
            </summary>
            <param name="text">Text to be searched on the screen.</param>
            <param name="startRow">Row position from which to start search.</param>
            <param name="startColumn">Column position from which to start search.</param>
            <param name="endRow">Row position at which to end search.</param>
            <param name="endColumn">Column position at which to end search.</param>
            <param name="findOption">Specifies the direction in which text is searched.</param>
            <param name="textComparison">TextComparisonOption indicates how text is compared against the text on the host screen.</param>
            <returns>Screen point object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the startRow, endRow, startColumn, or endColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception> 
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.SetSelectionStartPos(System.Int32,System.Int32)">
            <summary>Sets starting coordinates for selecting text. The default start position is the current cursor position.</summary>
            <param name="row">The row in which the selection begins.</param>
            <param name="column">The column in which the selection begins.</param>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ExtendSelection(System.Int32,System.Int32)">
            <summary>Selects all text in the terminal window between the selection start position and the specified coordinates.</summary>
            <param name="row">The row in which the selection should end.</param>
            <param name="column">The column in which the selection should end.</param>
            <remarks>
            	<para>Use the SetSelectionStartPos method to set the starting coordinates. (The default starting position is row 1, column 1.)</para>
            	<para>The ExtendSelection method selects the stream from the starting position coordinates to the extended position coordinates and returns a text selection
            shaped like this:</para>
            	<blockquote style="MARGIN-RIGHT: 0px" dir="ltr">
            		<para>xxxxxxxxxxxxxx</para>
            	</blockquote>
            	<para>xxxxxxxxxxxxxxxxxxxx</para>
            	<para>xxxxxxxxxxxxxxx</para>
            	<para>The ExtendSelectionRect method selects a rectangular block of text between the starting and ending row. The starting and the ending coordinate columns
            define the vertical edges of the block. The resulting block of text is shaped like this:</para>
            	<para>xxxxxxxxxxxxxxxxxxxx</para>
            	<para>xxxxxxxxxxxxxxxxxxxx</para>
            	<para>xxxxxxxxxxxxxxxxxxxx</para>
            	<para></para>
            	<para></para>
            	<para></para>
            	<para>If the ending coordinates are smaller than the starting coordinates, the ExtendSelectionRect and ExtendSelection methods select text backwards (from right
            to left or bottom to top).</para>
            	<para>These methods do not return the selected area. To get the selected region and its properties, use the ScreenRegion object.</para>
            </remarks>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>
            <example>
            	<code title="Select text area" description="This sample selects a text area when the screen is ready. It also gets the selected screen region. " lang="CS">
            void screen_NewScreenReady(object sender, EventArgs e)
            {
                IIbmScreen screen = (IIbmScreen)sender;
             
                //Select text
                screen.SetSelectionStartPos(5, 5);
                screen.ExtendSelection(21, 21);
             
                //get the selected screen region object.
                Attachmate.Reflection.Emulation.IbmHosts.IScreenRegion screenRegionIBM;       
                screenRegionIBM = screen.Selection;
                Console.WriteLine("start row = " + screenRegionIBM.StartRow + ", end row = " + screenRegionIBM.EndRow + 
                    ", selection mode = " + screenRegionIBM.CurrentSelectionMode );
            }
            ............
            //Attach the event handler to the IbmScreen object's NewScreenReady event,
            //where ibmScreen is an instance of IbmScreen.
              screen.NewScreenReady += new EventHandler(screen_NewScreenReady);
            ...........</code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ExtendSelectionRect(System.Int32,System.Int32)">
            <summary>Selects a block of text in the terminal window that includes all rows between the starting row and the specified row.</summary>
            <param name="row">The row in which the selection should end.</param>
            <param name="column">The column in which the selection should end.</param>
            <remarks>
            	<para>Use the SetSelectionStartPos method to set the starting coordinates. (The default is row 1, column 1.)</para>
            	<para>The ExtendSelectionRect method returns a rectangular block of text between the starting and ending row, resulting in a block of text shaped like this:</para>
            	<para>xxxxxxxxxxxxxxxxxxxx</para>
            	<para>xxxxxxxxxxxxxxxxxxxx</para>
            	<para>xxxxxxxxxxxxxxxxxxxx</para>
            	<para></para>
            	<para>The ExtendSelection method returns all text in the terminal window between the selection start position and the specified coordinates, resulting in a block
            of text shaped like this:</para>
            	<blockquote style="MARGIN-RIGHT: 0px" dir="ltr">
            		<para>xxxxxxxxxxxxxx</para>
            	</blockquote>
            	<para>xxxxxxxxxxxxxxxxxxxx</para>
            	<para>xxxxxxxxxxxxxxx</para>
            	<para></para>
            	<para>If the ending coordinates are smaller than the starting coordinates, the ExtendSelectionRect and ExtendSelection methods select text backwards (from right
            to left or bottom to top).</para>
            	<para>These methods select text but do not return the selected area. To get the selected region and its properties, use the ScreenRegion object.</para>
            </remarks>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>
            <example>
            	<code title="Select a block of text" description="This sample selects a block of text when a new screen is ready. It also gets the selected screen region." lang="CS">
            static void screen_NewScreenReady(object sender, EventArgs e)
            {
                IIbmScreen screen = (IIbmScreen)sender;
             
                //Select a block of text
                screen.SetSelectionStartPos(5, 5);
                screen.ExtendSelectionRect(21, 21);
             
                //get the selected screen region object.
                Attachmate.Reflection.Emulation.IbmHosts.IScreenRegion screenRegionIBM;       
                screenRegionIBM = screen.Selection;
                Console.WriteLine("start row = " + screenRegionIBM.StartRow + ", end row = " + screenRegionIBM.EndRow + 
                    ", selection mode = " + screenRegionIBM.CurrentSelectionMode );
            }
             
            //Attach the event handler to the IbmScreen object's NewScreenReady event,
            //where ibmScreen is an instance of IbmScreen.
            screen.NewScreenReady += new EventHandler(screen_NewScreenReady);</code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.UnlockInput">
            <summary>
            Unlocks the screen. See the LockInput() method for more information.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.WaitForCursor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Waits for the cursor to be at the specified screen location.
            </summary>
            <param name="timeout">Wait timeout value (milliseconds).</param>
            <param name="row">Screen row position.</param>
            <param name="column">Screen column position.</param>
            <returns>ReturnCode indicates success, failure, or a warning condition if the cursor position reaches the screen boundary.</returns>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.WaitForCursor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Waits for the cursor to be in the rectangle area specified by startRow, startColumn, endRow and endColumn.
            </summary>
            <param name="timeout">Wait timeout value (milliseconds).</param>
            <param name="startRow">Start row.</param>
            <param name="startColumn">Start column.</param>
            <param name="endRow">End row.</param>
            <param name="endColumn">End column.</param>
            <returns>ReturnCode indicates success, failure, or a warning condition.</returns>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            Thrown if the startRow, endRow, startColumn, or endColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.WaitForControlKey(System.Int32,Attachmate.Reflection.Emulation.IbmHosts.ControlKeyCode,System.Boolean)">
            <summary>
            Waits for the specified control key press.
            </summary>
            <param name="timeout">Wait timeout value (milliseconds).</param>
            <param name="keycode">Control key code.</param>
            <param name="continueProcess">Value to indicate whether the program can continue to process other actions.</param>
            <returns>ReturnCode indicates success, failure, or a warning condition.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.WaitForKeyboardEnabled(System.Int32,System.Int32)">
            <summary>
            Wait for the keyboard to be enabled (unlocked and ready for additional input).
            </summary>
            <param name="timeout">Specifies how long to wait for the keyboard to become enabled (in seconds).</param>
            <param name="duration">Specifies how long the keyboard must remain enabled (in seconds).</param>
            <returns>ReturnCode object.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.WaitForText(System.Int32,System.String,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.TextComparisonOption)">
            <summary>
            Waits for the specified text to appear at the specified screen location. 
            </summary>
            <param name="timeout">Wait timeout value (milliseconds).</param>
            <param name="text">Text string.</param>
            <param name="row">Row position.</param>
            <param name="column">Column position.</param>
            <param name="options">TextComparisonOption indicates the desired text string comparison.</param>
            <returns>ReturnCode indicates success, failure, or a warning condition.</returns>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the row or column parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.WaitForText(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.TextComparisonOption)">
            <summary>
            Waits for the specified text to appear in the specified location.
            </summary>
            <param name="timeout">Wait timeout value (milliseconds).</param>
            <param name="text">Text string.</param>
            <param name="startRow">Start row.</param>
            <param name="startColumn">Start column.</param>
            <param name="endRow">End row.</param>
            <param name="endColumn">End column.</param>
            <param name="option">TextComparisonOption indicates the desired text string comparison.</param>
            <returns>ReturnCode indicates success, failure, or a warning condition.</returns>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            Thrown if the startRow, endRow, startColumn, or endColumn parameters are outside the range of valid values: (1 to Rows) or (1 to Columns).
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.WaitForHostSettle(System.Int32,System.Int32)">
            <summary>
            Waits for host screen data to settle. 
            </summary>
            <param name="timeout">Wait timeout value (milliseconds).</param>
            <param name="settleTime">Settle time (milliseconds).</param>
            <remarks>
            The screen must be quiet without changes for the time duration specified by settleTime.
            <para>The wait timeout value should be greater than settleTime.</para></remarks>
            <returns>ReturnCode indicates success, failure, or a warning condition.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.Wait(System.Int32)">
            <summary>Waits for the specified duration.</summary>
            <param name="waitTime">Wait time in milliseconds.</param>
            <returns>ReturnCode indicates success, failure, or a warning condition.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.Undo">
            <summary>
            Undoes the last edit operation.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.AfterSendKeys">
            <summary>
            Occurs after data keys are rendered on the terminal screen.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.BeforeSendControlKey">
            <summary>
            Occurs before a control key is sent to the host.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.BeforeSendKeys">
            <summary>
            Occurs before a data key is sent to the host. 
            </summary>
            <remarks>
            The data key can be triggered from the keyboard, an application programming interface, or a macro.
            <para>SendKeys method triggers a BeforeSendKeys event for each SendKeys method invocation.</para>
            </remarks>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.CursorInNewField">
            <summary>
            Occurs when the cursor moves into a different field.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.KeyboardLocked">
            <summary>
            Occurs when the keyboard is locked.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.KeyboardUnlocked">
            <summary>
            Occurs when as the keyboard is unlocked.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.NewScreenReady">
            <summary>
            Occurs when the screen has been quiet for the time duration specified by the ScreenSettleTime property.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.ScreenChanged">
            <summary>
            Occurs when host data causes the data on the screen to change.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen.MouseClick">
            <summary>
            This event occurs when a session window is clicked by the mouse. 
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.DefinedEventHandler">
            <summary>
            Handles legacy Reflection for IBM events
            </summary>
            <param name="EventNumber">Event number</param>
            <param name="EventType">The event type</param>
            <param name="TheString">string event argument</param>
            <param name="Row">row event argument</param>
            <param name="Column">column event argument</param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IScreenPrivateAPI">
            <summary>
            An extension to the IScreen interface specifically for elements that we wish to implement in VBA/COM that we
            do not want to make available via the .Net API.
            </summary>
            <exclude/>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IScreenPrivateAPI.RWINDefinedEvent">
            <summary>
            A legacy Reflection defined event.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IScreenPrivateAPI.DefineEvent(System.Int32,Attachmate.Reflection.Emulation.IbmHosts.DefinedEventType,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Defines a specific event.
            </summary>
            <param name="eventNumber">Integer value to be used as an identifier for this event.  If the value is set to
            0 then a value will be automatically assigned.</param>
            <param name="eventType">The event type being defined.</param>
            <param name="duration">Specifies an interval of time in HH:MM:SS format. The specified event must last this long to satisfy the 
            definition. This argument is only relevant when the value you use for the EventType argument requires a duration—that is, when EventType 
            is DefinedEventType_Silence or DefinedEventType_KeyboardEnabled. The interval begins when the DefineEvent method is executed. </param>
            <param name="stringParam">Specifies the string that defines string-oriented events. This argument is only relevant when the value 
            you use for EventType requires a string—that is, when EventType is DefinedEventType_DisplayString, DefinedEventType_TimeOfDay, or 
            DefinedEventType_TimeElapsed.</param>
            <param name="row">Specifies the row location for screen events. Use a row number to specify a particular row. When EventType is 
            DefinedEventType_DisplayString, you can use 0 to indicate that the event can occur at any row location. This argument is relevant when 
            EventType is DefinedEventType_CursorEnterField, DefinedEventType_CursorExitField, DefinedEventType_CursorEnterPosition, 
            DefinedEventType_CursorExitPosition, or DefinedEventType_DisplayString.</param>
            <param name="column">Specifies the column location for screen events. Use a column number to specify a particular column. When 
            EventType is DefinedEventType_DisplayString, you can use 0 to indicate that the event can occur at any column location. This argument 
            is relevant when EventType is DefinedEventType_CursorEnterField, DefinedEventType_CursorExitField, DefinedEventType_CursorEnterPosition, 
            DefinedEventType_CursorExitPosition, or DefinedEventType_DisplayString.</param>
            <returns>Assigned event number</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IScreenPrivateAPI.RemoveEvent(System.Int32)">
            <summary>Removes a specific event that was defined via the DefineEvent method.</summary>
            <param name="eventNumber">The integer that designates the event to remove. This number is defined with the DefineEvent method.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IScreenPrivateAPI.ClearEvents">
            <summary>
            Removes all events defined via DefineEvent.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IScreenPrivateAPI.EnableDefineEvent(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="EventNumber"></param>
            <param name="Enabled"></param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IScreenPrivateAPI.IsEnableDefineEvent(System.Int32)">
            <summary>
            
            </summary>
            <param name="EventNumber"></param>
            <returns></returns>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IScreenPrivateAPI.DefineEventList">
            <summary>
            
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal">
            <summary>
            The IIbmTerminal interface is an interface to access an IBM 3270 or 5250 host emulation session object.
            </summary>
            <remarks>
            The control Guid is the input parameter for CreateControl( Guid controlType) in Application object.
            <para>The control Guid for 3270 IbmTerminal control is {09E5A1B4-0BA6-4546-A27D-FE4762B7ACE1}.</para>
            <para>The control Guid for 5250 IbmTerminal control is {AF03A446-F278-4624-B9EF-C896DF2CA1CA}.</para>
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TerminalUserControlContext">
            <summary>
            Gets or sets a value indicating whether this terminal object is being used in a Terminal User Control context.
            This is an internal property used to determine the context of this terminal object usage. This is set to true
            </summary>
            <remarks>
            The default is false.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.AllowDBCSinSBCSField5250">
            <summary>
            Gets or sets a value indicating whether double-byte character sets in single-byte character set fields are allowed.
            </summary>
            <remarks>
            The default is false.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.AllowUnpairedSI">
            <summary>
            Gets or sets a value indicating whether to allow an unpaired shift in (SI) with a matching shift out (SO) sequence.
            </summary>
            <remarks>This property applies only to IBM 3270 terminal controls. It is not supported for IBM 5250 terminal controls.</remarks>
            <value>The default is false.</value>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.SubstituteDisplayCharacters">
            <summary>
            Gets or sets a value indicating whether zeros in a 3270 or a 5250 display are shown with a slash through them.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.AutoConnect">
            <summary>Gets or sets a value indicating whether to attempt to establish a host connection 
            as soon as the current settings file is loaded.</summary>
            <remarks>You must save the current settings file after changing the value of this property. 
            This property causes an error when Reflection is connected to a host. 
            Use the IsConnected property to determine if a connection already exists.</remarks>
            <value>The default value is True.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.AutoReconnect">
            <summary>Gets or sets a value indicating whether to attempt to reconnect after a disconnection that is not initiated by the emulator.</summary>
            <remarks>
            	<para>This property is valid for both 3270 and 5250 connections using Telnet, IBM Comm Server, MS SNA Server, Netware SNA, or 802.2DLC. It is also valid for 3270
            connections using Coax DFT or Telnet Extended.</para>
            </remarks>
            <value>When this value is true, Reflection attempts to reconnect.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager, or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.AutoSignOn">
            <summary>Gets or sets a value indicating whether Reflection tells the transport protocol
            to automatically log you on to the host as soon as you establish a connection.</summary>
            <remarks>
            	<para></para>
            	<para>If you are connecting using Telnet, you can use the TelnetEnvironment property to specify additional, non-default sign-on information. This property applies
            only to 5250 sessions.</para>
            </remarks>
            <value>
            	<para>The default  value is False.</para>
            	<para>When this property is True, automatic sign on is used. That means Reflection signs on using the user and password values configured by the the UserName
            property and Password properties.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ConnectionError">
            <summary>
            Gets the error number that describes the cause of the most recent connection failure
            (when the last returned error has the value ErrConnectionError). 
            </summary>
            <remarks>
            If no connection failure occurred, this property returns zero. 
            Use ConnectionErrorMessage to retrieve the error message. 
            Use this property to retrieve information only when the last returned error 
            equals ErrConnectionError. If you use ConnectionError for errors other than 
            ErrConnectionError, you will be retrieving information that is not valid 
            for the current error condition.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ConnectionErrorMessage">
            <summary>
            Gets the text string that describes the cause of the most recent connection failure 
            (when the last returned error has the value ErrConnectionError). 
            </summary>
            <remarks>
            If no connection failure occurred, this property returns an empty string. 
            The connection error message strings are stored internally in the connection library module 
            of Reflection and cannot be changed. Use this property to retrieve information only when 
            the last returned error equals ErrConnectionError. If you use ConnectionErrorMessage for errors other than ErrConnectionError, you will be 
            retrieving information that is not valid for the current error condition.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.DeviceName">
            <summary>
            Gets or sets the device to connect to. 
            </summary>
            <remarks>
            If you do not specify a device name, Reflection 
            creates a unique device name for the current session and provides it to the host when 
            you log on. If AutoConfig is not running on the host, the device name specified must match
            one of the device names stored on the host. This property causes an error when Reflection
            is connected to a host. Use the IsConnected property to determine if a connection already exists.
            <para>
            This setting is only relevant to 5250 sessions or 3270 sessions using either Telnet or Telnet Extended.
            </para>
            <para>The default is "".
            This string can be up to 10 characters long for 5250 sessions and up to 32 characters long
            for 3270 sessions.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is too long for the current terminal type.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.FileTransfer">
            <summary>
            Gets the FileTransfer object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.HostAddress">
            <summary>
            Gets or sets the host address.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.IsConnected">
            <summary>
            Gets a value indicating whether the session is connected.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.KeyboardMapper">
            <summary>
            Gets the KeyboardMapper object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ContextMenus">
            <summary>
            Gets the ContextMenus object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.UiControlActionMapper">
            <summary>Gets the object used to map actions to the user interface control and to retrieve the action sequence from the user interface control.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.KoreanEUCCIMEBehavior">
            <summary>
            Gets or sets a value indicating whether to mimic Korean EUCC IME behavior. The default is false.
            </summary>
            <remarks>This property applies only to IBM 3270 terminal controls. It is not supported for IBM 5250  terminal controls.</remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.MouseMapper">
            <summary>
            Gets the MouseMapper object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Macro">
            <summary>
            Gets the Macro object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Model">
            <summary>
            Gets or sets the terminal model.
            This property causes an error when Reflection is connected to a host. Use the Connected property to determine if a connection already exists.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Modified">
            <summary>
            Gets a value indicating whether the session configuration has changed.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Screen">
            <summary>
            Gets the Screen object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Productivity">
            <summary>
            Gets the Productivity object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TNAssociation">
            <summary>Gets or sets a string that identifies a 3270 terminal session on the host.</summary>
            <remarks>Use this property to associate a 3270 terminal session with a specific 3270 printer session. This property applies to Telnet Extended sessions.
            <para>When associating a 3270 terminal session with a 3270 printer session, use TNAssociation to assign a unique TN Association string in the terminal
            session.</para><para></para></remarks>
            <value>
            	<para>The default is "". This string can be up to 260 characters long.</para>
            </value>
            <exception caption="" cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TerminalType">
            <summary>
            Gets or sets the type of the terminal session.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TypeAhead">
            <summary>Gets or sets a value indicating whether Reflection buffers characters 
            that you type in the terminal window.</summary>
            <remarks>
            	<para>This setting is relevant to 5250 and 3270 terminal sessions.</para>
            	<para>If you are working with an AS/400 host, TypeAhead allows you to keep typing when the keyboard is locked (for example, by a HLLAPI application). Reflection
            does not buffer characters when input is inhibited. If you are working with a 3270 host, TypeAhead allows you to keep typing after you send data to the host.
            Without TypeAhead, characters you type are ignored until the host is ready for more data (that is, when the X disappears from the Operator Information
            Area).</para>
            	<para>The following 3270 functions are processed immediately and are not buffered, even when TypeAhead is True:</para>
            	<para></para>
            	<list type="table">
            		<item>
            			<term width="98">
            				<strong>Function</strong>
            			</term>
            			<description>
            				<strong>Default Keystroke</strong>
            			</description>
            		</item>
            		<item>
            			<term width="98">Alt Cursor</term>
            			<description>Alt-6</description>
            		</item>
            		<item>
            			<term width="98">Cursor Select</term>
            			<description>Ctrl-F3</description>
            		</item>
            		<item>
            			<term width="98">Next Window</term>
            			<description> Alt-N</description>
            		</item>
            		<item>
            			<term width="98">Pan Left</term>
            			<description>Ctrl-Left arrow</description>
            		</item>
            		<item>
            			<term width="98">Pan Right</term>
            			<description> Ctrl-Right arrow</description>
            		</item>
            		<item>
            			<term width="98">Reset</term>
            			<description>Esc<br/></description>
            		</item>
            		<item>
            			<term width="98">Scroll Up</term>
            			<description>Ctrl-Up arrow</description>
            		</item>
            	</list>
            	<para></para>
            	<para>
            		<br/>
            		<br/>
            		<br/>
            	</para>
            </remarks>
            <value>When this property is True (the default), characters are buffered and sent to the host as soon as possible. When it is False, characters are not
            buffered, and anything you type while the host is not ready is lost.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Version">
            <summary>
            Gets the version of the terminal session control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.AidFieldExit">
            <summary>
            Gets or sets a value indicating whether to prevent or allow unrestricted sending of aid key values (F1-F24 only)
            to the host from restricted input fields.
            </summary>
            <remarks>
            This property applies to 5250 sessions only. The default is false.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Apl">
            <summary>
            Gets or sets a value indicating whether APL mode is on (true) or off (false). 
            </summary>
            <remarks>
            This setting is valid for 3270 display sessions only.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.AsyncTransportEnabled">
            <summary>
            Gets or sets a value indicating whether the terminal reverts to 
            polling mode for host interactions. 
            </summary>
            <remarks>
            This property is mainly used for diagnostic purposes.
            Setting this property causes an error when the terminal is connected to a host. Use the IsConnected property to determine if a connection already exists.
            The default is true.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.AutoIme">
            <summary>
            Gets or sets a value indicating whether IME (Input Method Editor) turns on or off automatically as the cursor
            moves. 
            </summary>
            <remarks>
            When this property is true, IME automatically turns on when the cursor is
            in a double-byte input field and turns off when the cursor is in a single-byte input field.
            When it is false, the state of the IME does not change in response to the cursor's location.
            The default value is true.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.BDTIgnoreScrollLock">
            <summary>
            Gets or sets a value indicating whether the terminal ignores the scroll lock state. 
            </summary>
            <remarks>When this value is true, the terminal ignores the scroll lock state.</remarks>
            <value>The default value is true.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.BlinkRate">
            <summary>Gets or sets a value that specifies the blinking attribute 
            for text that the host displays in the terminal window.</summary>
            <remarks>This property applies to 3270 and 5250 terminal sessions.</remarks>
            <value>If the default template is used to create a session, the default blink rate default is <see cref="F:Attachmate.Reflection.Emulation.IbmHosts.CursorBlinkRateOption.NoBlink">NoBlink</see> for 3270
            terminals, and <see cref="F:Attachmate.Reflection.Emulation.IbmHosts.CursorBlinkRateOption.Slow">Slow</see> for 5250 terminals. If the Legacy Reflection template is used to create a 3270 or 5250 session, the
            default value for BlinkRate is <see cref="F:Attachmate.Reflection.Emulation.IbmHosts.CursorBlinkRateOption.Medium">Medium</see>.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.C370CharSet">
            <summary>
            Gets or sets a value indicating whether to use the C/370 code page, which
            provides support for square brackets ("[" and "]"). 
            </summary>
            <remarks>
            The default is false.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Cegc">
            <summary>
            Gets or sets a value indicating whether additional characters (above character 128) in the
            configured National Character Set are available. 
            </summary>
            <remarks>
            When this property is set to false (the default), additional characters are not available.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.CmdPrompt">
            <summary>Gets or sets the character or characters in the terminal window.</summary>
            <remarks>The default is "===&gt;" for both 3270 and 5250 sessions. This string can be up to 260 characters long.</remarks>
            <exception caption="" cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.CmsFileListCommand">
            <summary>
            Gets or sets the file list command to issue on the CMS host to list files. 
            </summary>
            <remarks>
            When you click the Show Host Files button in the 
            Transfer dialog box, the terminal issues the file list command you specify.
            This property applies only to 3270 sessions for CMS hosts.
            The default value is "LISTFILE %s (EXEC".
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager, or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ColumnSeparatorStyle">
            <summary>Gets or sets the character to use as the column separator in
            5250 terminal sessions.</summary>
            <remarks>
            	<para></para>
            </remarks>
            <value>
            	<para></para>
            	<list type="table">
            		<item>
            			<term width="119">Value</term>
            			<description>Description</description>
            		</item>
            		<item>
            			<term width="119">Dots</term>
            			<description>Dots (.) or periods are used to render separate columns. (This is the default for all versions except the Japanese language version.)</description>
            		</item>
            		<item>
            			<term width="119">VerticalLines</term>
            			<description>Vertical lines (|) are used to render separate columns. (This is the defalut for the Japaese language version.)</description>
            		</item>
            	</list>
            	<para></para>
            	<para></para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.CommandLineEnabled">
            <summary>
            Gets or sets a value indicating whether the terminal command line can be activated
            (for example, with the Alt-L keystroke). 
            </summary>
            <remarks>The default is true.</remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.RunMacroAtReconnect">
            <summary>
            Gets or sets a value indicating whether the ConnectAction sequence is re-run after a session is reconnected.
            </summary>
            <remarks>The default is false. This value cannot be set if no ConnectAction is currently configured.</remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.InvalidOperationException">This exception is thrown when attempting to set the value with no ConnectAction configured.</exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.BeforeConnectStartupAction">
            <summary>
            Gets or sets a sequence of action(s), such as running a macro, to run automatically before a
            connection is established. 
            </summary>
            <remarks>
            Before Connect Startup action sequences run before the terminal attempts to connect to the host.
            They should not include any actions that require a live host screen, such as sending keystrokes.       
            </remarks>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ConnectAction">
            <summary>
            Gets or sets a sequence of action(s), such as running a macro, to run automatically after a
            connection is established. 
            </summary>
            <remarks>
            Connect action sequences run after the terminal has successfully made a connection to the host.
            They should not include session setup information.       
            </remarks>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ConnectMacro">
            <summary>
            	<para>Gets or sets the name of a macro that is run automatically after a connection is established.</para>
            	<para>Note: This property is deprecated. Please use the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ConnectAction">ConnectAction Property</see> instead.</para>
            </summary>
            <remarks>
            You can use the ConnectMacroData property to specify information to be passed to this macro.
            The default value is "". The string can be up to 260 characters in length.
            Connect macros run after the terminal has successfully made a connection to the host.
            They should not include session setup information.       
            </remarks>
            <exception caption="" cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ConnectMacroData">
            <summary>
            	<para>Gets or sets a string that passes information to a connect macro.</para>
            	<para>Note: This property is deprecated. Please use the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ConnectAction">ConnectAction Property</see> instead.</para>
            </summary>
            <remarks>
            	<para></para>
            	<para></para>
            </remarks>
            <value>
            	<para>The default value is "". This string can be up to 260 characters long.</para>
            	<para></para>
            	<para></para>
            </value>
            <exception caption="" cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ConnectScript">
            <summary>
            Gets or sets a Reflection Basic script that runs automatically 
            after a connection is established.
            </summary>
            <remarks>
            The default is "".
            This string can be up to 220 characters long. 
            This property is ignored if you have specified a value for ConnectMacro.
            </remarks>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ConnectScriptArguments">
            <summary>
            Gets or sets a parameter
            string to be passed to the connect script after a connection is established. 
            </summary>
            <remarks>
            Use the ConnectScript property to specify a connect script.
            The default is "".
            This string can be up to 220 characters long.
            </remarks>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.CursorMovementStyle">
            <summary>
            Gets or sets a value that specifies how the cursor moves between composed Thai characters.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values</term></listheader>
            <item><term>SkipCompositionElements  </term>
            <description> The cursor moves over a composed Thai character as if it were a single character. (The default.)</description>
            </item>
            <item><term>IncludeAllCharacters  </term>
            <description> The cursor treats the base character and combiner characters as single characters. </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.CursorProgressionIndicator">
            <summary>
            Gets or sets a value that specifies how the terminal responds to a host 
            query to determine if the terminal supports End User Interface (EUI) enhancement. 
            </summary>
            <remarks>
            The terminal supports the cursor progression enhancement. Set this value to true only
            if you use a host application that uses cursor progression and
            queries to determine if EUI is supported. 
            <para> 
            When this property is set to true, the terminal indicates to the host that
            it supports EUI enhancements, however cursor progression is the only EUI
            feature supported by the terminal. Do not change the value of this property
            to true unless you are sure that the host uses only the cursor progression
            feature. </para>
            <para>
            This property is only relevant for 5250 terminal sessions. The default value is false.
            </para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.CustomColumns">
            <summary>
            Gets or sets the number of columns in the terminal window display
            when the terminal is configured to use the custom terminal model.
            </summary>
            <remarks>
            This property applies to 3270 terminal sessions only.
            The default is 132. 
            The range of values is 80-255.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.CustomRows">
            <summary>
            Gets or sets the number of rows in the terminal window display
            when the terminal is configured to use the custom terminal model.
            </summary>
            <remarks>
            This property applies to 3270 terminal sessions only.
            The default is 60. 
            The range of values is 24-255.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.DbcsUnmappedChar">
            <summary>Gets or sets a value that specifies how the terminal translates double-byte host characters
            that are not available in the Shift-JIS double-byte character translation
            table.</summary>
            <remarks>This property affects file transfers and printed output. This property is applicable to double-byte sessions only.</remarks>
            <value>The default value (DbcsBlank) specifies a blank (DBCS 8140 character).</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.DbcsUserDefinedCharacterSource">
            <summary>
            Gets or sets whether user-defined character fonts are located on the host (HostImages) 
            or on the PC (PCEndUserDefinedImages). 
            </summary>
            <remarks>
            This property is applicable to 5250 sessions only.
            The default is HostImages. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.DefaultPorts">
            <summary>Gets or sets a value indicating whether the terminal attempts to communicate
            with the host transaction programs using the default port numbers
            (as defined by IBM).</summary>
            <remarks>
            	<para>This property is relevant for 5250 file transfer over TCP/IP.</para>
            	<para>The default port numbers as defined by IBM are shown below:</para>
            	<list type="table">
            		<item>
            			<term width="110">
            				<strong>Server</strong>
            			</term>
            			<description>
            				<strong>Default Port</strong>
            			</description>
            		</item>
            		<item>
            			<term width="110">Central server</term>
            			<description>8470</description>
            		</item>
            		<item>
            			<term width="110">Database server</term>
            			<description>8471</description>
            		</item>
            		<item>
            			<term width="110">Sign-on server</term>
            			<description>8476</description>
            		</item>
            		<item>
            			<term width="110">File transfer server</term>
            			<description>8478</description>
            		</item>
            	</list>
            </remarks>
            <value>
            	<para>If this property is set to false, the terminal attempts to discover the available ports, resulting in a small increase in connecting time.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.DisplayMargins">
            <summary>
            Gets or sets a value indicating whether to display margins around the terminal window. 
            </summary>
            <remarks>When this property is set to false, no margins are displayed and the terminal attempts to make the text fill the terminal window. Depending on the screen
            resolution, the current screen, and the size of your terminal window, you may not see an effect in the terminal window. The default is false.</remarks>
            <value>The default value is false.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.EnableHostAlarm">
            <summary>
            Gets or sets a value indicating whether to sound alarms (beeps) sent by the host.
            The default is true.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.EnterKeyRepeat">
            <summary>
            Gets or sets a value indicating whether holding down the Enter key is equivalent to
            pressing it multiple times.
            </summary>
            <remarks>
            When this property is false, holding down
            the Enter key is equivalent to pressing it one time.
            The default is true.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ExpressLogonFeatureApplid">
            <summary>
            Gets or sets the application ID to use for Express Logon Feature (ELF) support.
            </summary>
            <remarks>
            This property applies to 3270 Telnet and Telnet Extended sessions only.
            The default is "".
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.FileSystem">
            <summary>Gets or sets a value indicating whether the terminal uses the ANSI character set
            or the ASCII character set for ASCII transfers from the host.</summary>
            <remarks>Do not change the default value of this property (Windows) if you use the AS/400 data transfer feature.</remarks>
            <value>The default value is Windows.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.GenerateDeviceNames">
            <summary>Gets or sets a value indicating whether the terminal automatically generates device
            name values based on values you specify for the DeviceName property.</summary>
            <remarks>
            	<para></para>
            	<para>GenerateDeviceNames is only available for 5250 Telnet sessions.</para>
            	<para>You can include any of the following characters as part of the value you specify for DeviceName:</para>
            	<para></para>
            	<list type="table">
            		<item>
            			<term width="76">Character</term>
            			<description>How this value is used</description>
            		</item>
            		<item>
            			<term width="76">*</term>
            			<description>Replaced by "A", "B", "C", and so on for each new session. If the entire alphabet is used, the generated device names continue with "AA", "AB",
                        "AC", and so on.</description>
            		</item>
            		<item>
            			<term width="76">%</term>
            			<description>Replaced by "P" for printer sessions and "S" for display sessions.</description>
            		</item>
            		<item>
            			<term width="76">=</term>
            			<description>Replaced by "1", "2", "3", and so on.</description>
            		</item>
            		<item>
            			<term width="76">&amp;COMPN</term>
            			<description>Replaced by the local workstation name. If the generated name exceeds 10 characters, the excess characters are trimmed from the left (unless +
                        is also used). This character cannot be used with ";ampUSERN".</description>
            		</item>
            		<item>
            			<term width="76">&amp;USERN</term>
            			<description>Replaced by the local user name, left-trimmed if the generated name exceeds 10 characters. If the generated name exceeds 10 characters, the
                        excess characters are trimmed from the left (unless + is also used). This character cannot be used with ";ampCOMPN".</description>
            		</item>
            		<item>
            			<term width="76">+</term>
            			<description>Used with ";ampUSERN" or ";ampCOMPN" to specify trimming from the right instead of from the left. This can be placed anywhere in the
                        string.</description>
            		</item>
            	</list>
            	<para></para>
            	<para>You can use only one string literal in combination with these characters. If you use separated strings, the second string is dropped.</para>
            </remarks>
            <value>The default value is True.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.GraphicsDevice">
            <summary>Gets or sets the type of graphics device the terminal emulates for
            3179G terminal sessions.</summary>
            <remarks>You cannot change this property when you are connected to a host. This property is only relevant for 3270 terminal sessions.</remarks>
            <value>The default is IBM3179G.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.GraphicsExtendedColors">
            <summary>
            Gets or sets a value indicating whether the terminal uses the set of extended 
            graphics colors (black, white, dark blue, orange, purple, dark green, dark turquoise, mustard, gray, and brown). 
            </summary>
            <remarks>
            When this property is false (the default), the extended graphics colors are not used.
            This property is only relevant for 3270 terminal sessions. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.GraphicsEnabled">
            <summary>
            Gets or sets a value indicating whether the terminal is configured for a 3179G
            terminal session with the host.
            </summary>
            <remarks>
            This property is only relevant for 3270 terminal sessions.
            The default is false.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.HostCommTimeout">
            <summary>
            Gets or sets how many seconds the terminal waits for a host
            connection response. 
            </summary>
            <remarks>
            If there is no response from the host in the allotted
            time, an error results.
            The default is 60. The range of values is 1 - 9999 seconds.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.HostControlsOutlineColor">
            <summary>Gets or sets a value indicating whether the host determines the color of field outline
            characters.</summary>
            <remarks>When this property is false (the default), the color of field outline characters can be configured in the Modify Theme dialog box. This
            property is only relevant for 5250 terminal sessions.</remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.HostCursorBlinkControl">
            <summary>
            Gets or sets a value indicating whether the host controls the cursor blink rate.
            </summary>
            <remarks>
            When this property is true, the host controls the cursor blink rate. When it is false (the default), 
            the host does not control it. 
            Use the CursorBlinkRate property to control the blink rate from the terminal.
            This property is only relevant for 5250 terminal sessions.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.HostKeyboardType">
            <summary>
            Gets or sets a value that specifies which keys can be used in numeric fields. 
            </summary>
            <remarks>
            This property is only relevant for 3270 terminal sessions. 
            <list type="bullet">
            <listheader><term>Values</term></listheader>
            <item> <term>DataEntry  </term><description> Specifies that all keys can be used.</description></item>
            <item> <term>NormalKbd  </term><description> Specifies that only numeric keys 
            (either the number keys on the typewriter keyboard and those on the keypad) 
            and certain symbol keys (+ - . ,) can be used (the default).</description></item>
            <item> <term>Typewriter  </term><description> Specifies that uppercase letters (A-Z), shifted number keys
            (producing symbols like !, @, and #), and the number keys on the keypad can be used.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager, or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.HostNumlockControl">
            <summary>
            Gets or sets a value indicating whether the host can enable Num Lock mode.
            </summary>
            <remarks>
            The default is false.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.IgnoreEUICmdErr">
            <summary>
            Gets or sets a value indicating whether Enhanced User Interface command errors are ignored. 
            </summary>
            <remarks>
            This property is related to CursorProgressIndicator property and is only 
            applicable when CursorProcessIndicator is set to true.
            The default is false.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.IgnoreHostPrintReq">
            <summary>
            Gets or sets a value indicating whether a print command in a host data stream is 
            accepted. 
            </summary>
            <remarks>When this property is set to true (the default), a print command in a host data stream is ignored. This property applies only to IBM 3270 terminal controls. It
            is not supported for IBM 5250 terminal controls.</remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager, or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.InputFieldUnderlines">
            <summary>Gets or sets a value that specifies how the terminal underlines input fields on host screens.</summary>
            <value>The default value (UnderlineHostControl) specifies that the host determines which input fields are underlined.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager, or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.InsertArena">
            <summary>Gets or sets a value that specifies the extent to which the terminal applies the logic for character
            insertion as described for the InsertProtocol property.</summary>
            <remarks>
            	<para></para>
            </remarks>
            <value>The default value (CurrentField) specifies that no change is allowed to any field except the current field.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.InsertProtocol">
            <summary>Gets or sets a value that specifies what the terminal does if you attempt to 
            insert a character.</summary>
            <remarks>
            	<para>The logic the terminal applies can be over a single field, multiple local fields, or all unprotected fields. See the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.InsertArena">InsertArena</see>
            property.</para>
            </remarks>
            <value>
            	<para>The default value is <see cref="F:Attachmate.Reflection.Emulation.IbmHosts.InsertProtocolOption.FirstNull">FirstNull</see> for 5250 terminals and terminals for
            legacy Reflection sessions. For 3270 terminals, the default value
            is <see cref="F:Attachmate.Reflection.Emulation.IbmHosts.InsertProtocolOption.FirstNullOrTrailingSpace">FirstNullOrTrailingSpace</see>.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager, or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.KeyboardErrorAlarm">
            <summary>
            Gets or sets a value indicating whether to sound the alarm (a beep) when a keyboard error is detected.
            </summary>
            <remarks>
            This property applies to 5250 sessions only. The default is false.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.KeyboardErrorReset">
            <summary>Gets or sets a value that specifies how keyboard errors are processed.</summary>
            <remarks>
            	<para>Keyboard errors appears on the host status line (in 5250 sessions) or in the operator information area (in 3270 sessions).</para>
            	<para>This option is only applicable in data processing (not Text Assist) mode.</para>
            	<para></para>
            </remarks>
            <value>The default value (NoAutoReset) specifies standard terminal behavior. This requires that users press Reset to clear the error before they can
            resume data entry. 
            <list type="table"><item><term><strong>Other Values</strong></term><description><strong>Description</strong></description></item><item><term>AutoReset</term><description>Users do not need to press Reset to clear a keyboard error. Any key users press (not just Reset) clears the error, restores the previous error
                        line data, and attempts to execute the keystroke as follows: If the cursor is in a valid input field and the key is a data key, the data is
                        entered, provided the data is valid for that field. If the cursor is in a valid input field and the key is a function key, the key operation is
                        executed. If the current cursor position is not in a valid input field and the key is a data key, the cursor is moved to the next valid input field
                        where the data is entered, provided the data is valid for that field. If the current cursor position is not in a valid input field and the key is a
                        function key, the cursor is moved to the next valid input field and the key is ignored. If the current AS/400 screen contains no valid input
                        fields, an error appears with each keystroke users press, and no keystrokes are executed.</description></item><item><term>AutoResetNoMessage</term><description>No error is reported and Reflection attempts to execute the keystroke as follows: If the cursor is in a valid input field, the key (whether a
                        data key or a function key) is ignored. If the cursor is not in a valid input field and the key is a data key, the cursor is moved to the next
                        valid input field where the data is entered, provided the data is valid for that field. If the cursor is not in a valid input field and the key is
                        a function key, the cursor is moved to the next valid input field and the key is ignored. Use this value with caution, because it prevents users
                        from being notified of keyboard errors.</description></item></list></value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.KeysDuringWait">
            <summary>Gets or sets a value indicating whether the user can use the keyboard during a 
            synchronous command.</summary>
            <remarks>A synchronous command is one that causes a procedure to pause until a defined wait expires (for example, Wait). The default is true.</remarks>
            <value>The default is True.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.MappedNumlockPreservesNumlock">
            <summary>
            Gets or sets a value that specifies how the terminal behaves when a user presses a PC 
            NUM LOCK key that is mapped to emulate the action of a terminal key.
            </summary>
            <remarks>
            When this property is true (the default), pressing the NUM LOCK key 
            sends the mapped keystroke to the host and preserves the current 
            Num Lock state of the PC keyboard. 
            <para>
            When this property is false, pressing the NUM LOCK key sends the mapped 
            keystroke to the host and also toggles the PC Num Lock state. 
            The Num Lock indicator light toggles on or off each time you press the NUM LOCK key.
            </para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Port">
            <summary>
            Gets or sets the TCP port to connect to.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.HostTypeAheadControl">
            <summary>Gets or sets a value indicating whether the terminal honors the keyboard buffering
            control setting in the AS/400 user profile.</summary>
            <remarks>This property applies to 5250 terminal sessions only.</remarks>
            <value>
            	<para>The default value is True.</para>
            	<para>If this property is False, Reflection uses the current value of the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TypeAhead">TypeAhead</see> property to determine whether or not to buffer
            keystrokes.<br/></para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Theme">
            <summary>
            Gets the theme object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.SingleSignOn">
            <summary>Gets or sets a value indicating whether Reflection enables the use of
            a single user name and password for multiple logon procedures.</summary>
            <remarks>The effect of this property depends on how your system is configured:  
            If you connect to a 5250 host using an SNA server, this property
            determines whether your SNA Server user name and password are 
            used for your AS/400 sign-on. For terminal sessions, setting this value
            to true automatically signs you on to the AS/400. For AS/400 data
            transfers, setting this value to true satisfies your security
            requirements to the AS/400 and gives you access to your AS/400 files.</remarks>
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager, or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Support3270Partitions">
            <summary>Gets or sets a value indicating whether to send partition-related information from 
            the terminal to the host in response to a host query request.</summary>
            <remarks>This property
            is relevant for host applications that are not designed to handle terminals
            that support partitions.
            When this property is true, the terminal includes partition-related 
            information in its response to a host query request. 
            You cannot change the value of this property while a connection exists.
            <para>
            This property is only relevant for 3270 terminal sessions.
            </para></remarks>
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.SupportDbcsFeatures">
            <summary>Gets or sets a value indicating whether double-byte character support is enabled.</summary>
            <remarks>This property is applicable to double-byte 3270 sessions only.</remarks>
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TelnetAttn">
            <summary>Gets or sets a value that specifies what happens when you transmit the ATTN
            host key (the default keystroke for this function is CTRL+F1).</summary>
            <remarks>The definition of this key and its values vary by host application. This property is only relevant for 3270 Telnet sessions.</remarks>
            <value>The default value is TelnetBreak, which sends a Telnet break to the host.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager, or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TelnetEnvironment">
            <summary>
            Gets or sets a string that is passed to an "Exit program" 
            on an AS/400 host when Reflection makes a Telnet connection. 
            </summary>
            <remarks>
            Exit programs run when a Telnet session is either initiated or terminated 
            and use this format:
            <para>keyword=value; keyword=value; keyword=value</para>
            <para> When you use Auto SignOn (AutoSignon = True), Reflection
            automatically signs on to the host using the current values of the
            UserName and Password properties. You can set TelnetEnvironment to 
            specify additional, non-default sign on options using any of the 
            following keywords in the Exit program string:</para>
            <list type="bullet"> 
            <listheader><term>Keywords:</term></listheader>
            <item>
            <term>IBMPROGRAM  </term>
            <description> Sets the program to call (equivalent of the Sign On menu's Program/procedure option).</description>
            </item>
            <item>
            <term>IBMIMENU  </term>
            <description> Sets the initial menu (equivalent of the Sign On menu).</description>
            </item>
            <item>
            <term>IBMCURLIB</term>
            <description> Sets the current library (equivalent of the Sign On menu's Current library option).</description>
            </item>
            </list>
            <para>
            You cannot change the value of this property while you are connected.
            This property applies only to 5250 terminal sessions using Telnet.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TelnetKeepAlive">
            <summary>Gets or sets a value indicating whether to periodically poll the host to determine if Telnet connections remain active during intervals when you are not
            sending data to the host.</summary>
            <remarks>Normally, Reflection becomes aware of Telnet communication problems only after a significant delay, or when it attempts to send data to the host.
            Because of this, you can lose your connection to the host and not be immediately aware of it. This can cause problems if you enter a large amount of data on
            one screen, or if you keep your connection open during periods of inactivity.
            <para>To become aware of connection problems as they occur, you can configure Reflection to send Keep Alive packets.</para><list type="bullet"><item>Reflection does not send any keep alive packets to the host. (The default.)</item><item>Reflection periodically sends a No Operation (NOP) command to the host. The gateway and host are not required to respond to these commands, but the
                TCP/IP stack can detect if there was a problem delivering the packet. Use KeepAliveTimeout to control the interval between requests.</item><item>The TCP/IP stack keeps track of the host connection. This value requires less system resources than KeepAliveTimingMark or KeepAliveNOP, but most
                TCP/IP stacks send Keep Alive packets infrequently.</item><item>Reflection periodically sends a Timing Mark Command to the host to determine if the connection is still active. The gateway or host should respond to
                these commands. If Reflection does not receive a response or there is an error sending the packet, it will shut down the connection. Use KeepAliveTimeout
                to control the interval between requests.</item></list></remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TelnetKeepAliveTimeout">
            <summary>Gets or sets the interval (in seconds) between keep alive requests.</summary>
            <remarks>
            This property is relevant only if TelnetKeepAlive is set to KeepAliveNOP or KeepAliveTimingMark.
            The default value is 600. The range of values is 1 - 9999.
            </remarks>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was esecured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TelnetSysReq">
            <summary>Gets or sets a value that specifies what happens when you transmit the SysReq function
            (mapped to the ALT-PRINT SCREEN keystroke by default).</summary>
            <remarks>The definition of this key varies by host application.</remarks>
            <value>The default (TelnetIntProcess) sends a Telnet Int Process to the host.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TelnetXSystem">
            <summary>Gets or sets a value indicating whether X SYSTEM is supported in 3270 sessions.</summary>
            <remarks>X SYSTEM is a keyboard locked state that occurs when the host ends a 
            transmission to the workstation without unlocking the keyboard. Some 
            applications use this to notify you of a message written to the display,
            which requires that you reset the keyboard before you can type again. Other
            applications rely on SNA to unlock the keyboard.</remarks>
            <value>The default is True.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.WordWrap3270">
            <summary>Gets or sets a value indicating whether text wraps to the next available field
            when entered text is too long to fit in a text entry field.</summary>
            <remarks>This property only applies to 3270 sessions.</remarks>
            <value>
            	<para>When WordWrap3270 is True, text is wrapped to the next field, provided the following conditions are met:</para>
            	<list type="bullet">
            		<item>The field length must be equal to or greater than the value specified by the WordWrap3270 MinimumFieldLength setting. (The default value is 40.)</item>
            		<item>The continuation field must start at the same column position as the field that text is wrapping from.</item>
            	</list>
            	<para>When Word Wrap is False (the default) and text exceeds the current field length, Reflection attempts to enter it into the next available field. If this is a
            protected field, the text is truncated at the end of the unprotected field and the terminal enters reset mode.</para>
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.WordWrap5250">
            <summary>
            Gets or sets a value indicating whether text is truncated at the end of the current field 
            or wrapped to the next available field, and whether the host controls this behavior. 
            </summary>
            <remarks>
            This property only applies to 5250 sessions.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>Host  </term>
            <description> Text wraps to the next available field as controlled by the host. (The default.)</description>
            </item> 
            <item><term>Local  </term>
            <description> Text wraps to the next available field as controlled by Reflection.</description>
            </item>
            <item><term>Off  </term>
            <description> Text does not wrap to the next available field. Instead, it is truncated at the end of the current field.</description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager, or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.WordWrap3270MinimumFieldLength">
            <summary>
            Gets or sets the minimum field length required for word wrap
            in 3270 terminal sessions. 
            </summary>
            <remarks>
            If a field is less than this length, text does not wrap to the next available field, 
            regardless of the current value of the WordWrap3270 property.
            This setting affects 3270 session only and is ignored if WordWrap3270
            is false.
            The default value is 10 for all templates except Legacy Reflection which has a default of 40.
            The range of values is 10 - 132.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set parameter is outside the range of valid values.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.EnableTelnetEncryption">
            <summary>Gets or sets a value indicating whether Reflection uses Secure Sockets Layer/Transport
            Layer Security (SSL/TLS) datastream encryption.</summary>
            <value>If this property is true, but your host does not support TLS, Reflection attempts to use SSL instead. If your host supports neither SSL nor TLS,
            an error message appears when you try to connect, and your connection attempt fails.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TelnetEncryptionDisableCRLCheck">
            <summary>
            Gets or sets a value that indicates whether Reflection checks for certificate revocation
            when validating host certificates in SSL/TLS Telnet sessions. 
            </summary>
            <remarks>
            When this property is true, Reflection does not perform CRL checking.
            Disabling CRL checking increases your security risk.
            The default is false, which enables CRL checking and reduces your 
            security risk.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager, or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TelnetEncryptionStrength">
            <summary>
            Gets or sets the encryption strength for Secure Sockets 
            Layer/Transport Layer Security (SSL/TLS) datastream encryption. 
            </summary>
            <remarks>
            The value of this property is relevant only if EnableTelnetEncryption is enabled.
            <para>The available values are: Default, Bits40, Bits56, Bits128, Bits168, and Bits256.</para>
            <para>When set to Default, the encryption strength is established by the host 
            and Reflection during handshaking. If you set encryption strength to a specific value, 
            the server must support this encryption level. If the server does not support this level, 
            the connection will not be established. If you are running in FIPS mode 
            and specify Default, Reflection negotiates using only FIPS 
            compliant encryption levels.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TelnetEncryptionVerifyHostName">
            <summary>
            Gets or sets how Reflection handles SSL/TLS Telnet 
            connections when the host name in the certificate does not 
            match the host being contacted. 
            </summary>
            <remarks>
            When this property is true (the default), the host name in the certificate must match 
            the host you are contacting. 
            This property is only relevant if EnableTelnetEncryption is true.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TelnetUseReflectionSecurityProxy">
            <summary>
            Gets or sets a value indicating whether Reflection makes makes secure SSL 
            connections through the Reflection for the Web Security Proxy when
            EnableTelnetEncryption is true.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.HostCodePage">
            <summary>
            Gets or sets the character set Reflection that uses for character translations.
            </summary>
            <remarks>
            The default is USEnglish.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.UseIPV6">
            <summary>
            Gets or sets a value indicating whether Reflection uses version 6 of the Internet Protocol.
            </summary>
            <remarks>
            By default this value is false. Please contact technical support if you 
            need support for IP version 6. 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.MouseShape">
            <summary>Gets or sets the appearance of the mouse pointer in the terminal window.</summary>
            <value>
            The default value is DefaultArrow.
            </value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TsoFileListCommand">
            <summary>
            Gets or sets the name of the host exec to run when the Show Host 
            Files button in the Transfer dialog box is clicked. 
            </summary>
            <remarks>
            This property applies only to 3270 sessions on TSO hosts.
            The default is "wrqlcat %s".
            This string can be up to 260 characters long.
            </remarks>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TsoMemberListCommand">
            <summary>
            Gets or sets the name of the host exec to run when a member in the Transfer dialog box is expanded.
            </summary>
            <remarks>
            This property applies to 3270 sessions on TSO hosts only.
            The default is "wrqlcat %s".
            This string can be up to 260 characters long.
            </remarks>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.HllapiLongName">
            <summary>
            Gets or sets the HLLAPI application associated with a particular Reflection session. 
            </summary>
            <remarks>
            The default is "".
            This string can be up to eight characters long. This string is not used by the HLLAPI application.
            </remarks>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.HllapiShortName">
            <summary>
            Gets or sets an identifier that a HLLAPI application uses to link 
            to a Reflection session.
            </summary>
            <remarks>
            The default is "".
            This is a one-character string. The character must be an uppercase letter (A-Z).
            </remarks>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>        
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager, or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.HllapiStyle">
            <summary>
            Gets or sets the Reflection HLLAPI configuration. This is a 
            numeric value. 
            </summary>
            <remarks>The possible numeric values for this style are "bit masks" that contain separate bits of information about the Reflection HLLAPI configuration. To derive a
            value, add the value for each of the bits you want to turn on. For example, to turn on the first bit (decimal value = 1), the fourth bit (decimal value = 8),
            and the 10th bit (decimal value = 512), add these three numbers (1 + 8 + 512 = 521) and use the total as the numeric value.
            <para></para><para>The EXTRA! style (the default value), is equivalent to decimal 21380 and hexadecimal 0x5384.</para><para>To use the Reflection style, assign this property a value of decimal 297 or hexadecimal 0x0129. </para></remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TelnetTerminalID">
            <summary>
            Gets or sets the Telnet terminal ID string that 
            Reflection generates and sends to the Telnet gateway, based on the Model ID 
            you select in the session settings. 
            </summary>
            <remarks>
            This allows you to specify a Telnet terminal ID that Reflection does not implicitly support 
            (but might work with), such as FUJITSU.
            <para>If this property is set to a text string, that text string replaces the 
            Telnet terminal ID string that Reflection generates. Leave this setting 
            blank if you want to use the Model ID specified in the session settings.</para>
            <para>This property applies to Telnet sessions only.
            The default value is "".</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.DisableKeystrokeProductivity">
            <summary>
            Gets or sets a value indicating whether all keystroke Productivity functionality 
            (such as Spell Check and Auto Complete) is disabled.
            </summary>
            <remarks>If a program changes the value of this property, the state persists as long as the session is still open. When the session is closed and reopened, the value is
            automatically reset to the default (false).</remarks>
            <value>The default value is false.</value>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.DisableScreenHistory">
            <summary>
            Gets or sets a value indicating whether Screen History is disabled.
            </summary>
            <remarks>If a program changes the value of this property, the state persists as long as the session is still open. When the session is closed and reopened, the value is
            automatically reset to the default (false).</remarks>
            <value>The default value is false.</value>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.VBProject">
            <summary>
            Gets the VB Project (VBA use only)
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.VBCommonProject">
            <summary>
            Gets the Common VB Project (VBA use only)
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.UseIDManagement">
            <summary>
            Gets or sets a value indicating whether Reflection uses ID Management to obtain a device name.
            </summary>
            <remarks>
            By default this value is false.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.IDMServerURL">
            <summary>
            Gets or sets ID Management server URL. 
            The default is "".
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.IDMCriteria">
            <summary>
            Gets or sets ID Management criteria flags. 
            The default is 0.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.IDMPoolName">
            <summary>
            Gets or sets ID Management pool name. 
            The default is "".
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TelnetEncryptionUseOCSP">
            <summary>
            Gets or sets a value indicating whether  your client session checks for certificate revocation using 
            OCSP (Online Certificate Status Protocol) responders when validating host certificates. 
            The default is false.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property  
            that was secured via the Permissions Manager or 
            that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TLS_SSLVersion">
            <summary>
            Gets or sets a value indicating which SSL or TLS version to use.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.SSLValidateCertChain">
            <summary>
            Gets or sets a value indicating whether certificates presented for host authentication are checked
            to determine if they are valid and signed by a trusted CA. 
            </summary>
            <remarks>CAUTION: Setting this property to false can make connections vulnerable to man-in-the-middle attacks, which could compromise the security of the
            connection.</remarks>
            <exception caption="" cref="T:System.InvalidOperationException">This exception is thrown when you modify this property while the Reflection or InfoConnect products are running in DoD PKI mode.</exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.TitleBarCaption">
            <summary>Gets or sets the string that appears in the title bar. This string is only relevant when the workspace user interface mode is set to Classic SDI. The caption
            length maximum value is 260 characters. The default is &amp;f - &amp;r - &amp;s</summary>
            <remarks>This property does not apply to the InfoConnect product.</remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ShowMenuBar">
            <summary>
            Gets or sets the visibility of the menu and toolbar. This setting is 
            only relevant when the workspace user interface mode is set to Classic. (This setting does not apply to Classic MDI mode.)
            The default is true.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.ShowClassicStatusBar">
            <summary>
            Gets or sets the visibility of the status bar. This setting is 
            only relevant when the workspace user interface mode is set to Classic. (This setting does not apply to Classic MDI mode.)
            The default is true.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.StatusBarText">
            <summary>Gets or sets the text displayed on the status bar.</summary>
            <value>
            	<para>The default is "&amp;s - &amp;c". The maximum string length is 260 characters. Various special characters can be included in this string:</para>
            	<para></para>
            	<list type="table">
            		<item>
            			<term width="84">
            				<strong>Character</strong>
            			</term>
            			<description>
            				<strong>Displays</strong>
            				<br/>
            			</description>
            		</item>
            		<item>
            			<term width="84">&amp;w</term>
            			<description>"Micro Focus"</description>
            		</item>
            		<item>
            			<term width="84">&amp;r</term>
            			<description>Product Name</description>
            		</item>
            		<item>
            			<term width="84">&amp;f</term>
            			<description>Settings File Name (or 'Untitled' if a settings file is not open)</description>
            		</item>
            		<item>
            			<term width="84">&amp;s</term>
            			<description>Session Type</description>
            		</item>
            		<item>
            			<term width="84">&amp;t</term>
            			<description>Transport</description>
            		</item>
            		<item>
            			<term width="84">&amp;h</term>
            			<description>Host Name</description>
            		</item>
            		<item>
            			<term width="84">&amp;d</term>
            			<description>Date</description>
            		</item>
            		<item>
            			<term width="84">&amp;c</term>
            			<description>Connection Status (whether you are connected and over what transport)</description>
            		</item>
            		<item>
            			<term width="84">&amp;p</term>
            			<description>Printer Status (relevant only in if the Session Type is IBM 5250 Printer or IBM 3270 Printer)</description>
            		</item>
            		<item>
            			<term width="84">&amp;x</term>
            			<description>Transfer Status (the percentage complete of file and data transfers)</description>
            		</item>
            		<item>
            			<term width="84">&amp;v</term>
            			<description>Assigned Device Name (relevant only for 5250 sessions that use an assigned Device Name)</description>
            		</item>
            		<item>
            			<term width="84">&amp;l</term>
            			<description>Assigned LU Name (relevant only for 3270 sessions that use an assigned LU Name)</description>
            		</item>
            		<item>
            			<term width="84">&amp;o</term>
            			<description>Profile Name</description>
            		</item>
            		<item>
            			<term width="84">&amp;&amp;</term>
            			<description>A Single Ampersand</description>
            		</item>
            	</list>
            	<para></para>
            </value>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Execute(Attachmate.Reflection.Emulation.IbmHosts.InputMapAction)">
            <summary>
            Execute a given action. Actions possible is defined in InputMapActionID.
            </summary>
            <seealso cref="T:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID"/>
            <param name="action">The action to be executed.</param>
            <returns>ReturnCode value indicates the success or error conditions.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Close(Attachmate.Reflection.CloseOption)">
            <summary>
            Closes the terminal session with the close option.
            </summary>
            <param name="option">Close option indicates how to handle the save action upon closing the control.</param>
            <returns>ReturnCode value indicates the success or error conditions.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Connect">
            <summary>
            Connects to the host.  
            </summary>
            <remarks>
            This method returns an error if the connection cannot be made successfully. 
            It is ignored if a connection already exists. 
            Use the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.IsConnected"/> property to determine if a connection already exists. 
            Use <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.HostCommTimeout"/> to specify how many seconds Reflection waits for a host response.
            </remarks>
            <returns>Connection Status</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Disconnect">
            <summary>
            Disconnects from the host. 
            </summary>
            <remarks>
            If no connection currently exists, this method is ignored. 
            Use the IsConnected property to determine if a connection already exists.
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Save">
            <summary>
            Saves all settings.
            </summary>
            <returns>ReturnCode value indicate success or error conditions.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.SaveAs(System.String)">
            <summary>
            Saves all settings to the specified file.
            </summary>
            <param name="filePath">The fully qualified path of the specified file.</param>
            <returns>ReturnCode value indicate success or error conditions.</returns>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.DASOApplicationID">
            <summary>
            Retrieves or assigns the application ID to use for DASO (Digital Certificate
            Access Server Automated Sign On) support.
            </summary>
            <remarks> 
            This property is required for DASO and can be set either via this field or
            in the call to GetDASOPassTicket.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.DASOUserID">
            <summary>
            Retrieves the RACF USERID for DASO (Digital Certificate Access Server Automated Sign On).
            This field will be empty until a successful call to GetDASOPassTicket is executed.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.DASOPassTicket">
            <summary>
            Retrieves the pass ticket for DASO (Digital Certificate Access Server Automated Sign On).
            This field will be empty until a successful call to GetDASOPassTicket is executed.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.DASOSessionName">
            <summary>
            Retrieves the session name that is used for DASO (Digital Certificate Access Server 
            Automated Sign On). The session name and DASO application ID are used by the DASO
            server when mapping the current user to RACF logon credentials for host access.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.GetDASOPassTicket(System.String)">
            <summary>
            Issues a request to the Management and Security Server for a DASO pass ticket.
            On success, the DASOUserID and DASOPassTicket properties will be valid and can
            be used for automated sign on to the host.  The application ID can be preset
            using the DASOApplicationID property in which case the ApplicationID parameter
            on this call may be empty.
            </summary>
            <param name="ApplicationID">The host application ID.</param>
            <returns>ReturnCode value indicate success or error conditions.</returns>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.EnableTelnetEncryptionUseStartTls">
            <summary>
            Gets or sets a value indicating whether Reflection uses Secure Sockets Layer/Transport via Telnet STARTTLS option
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.SaveAsCompound(System.String)">
            <summary>Saves a session as a compound session document.</summary>
            <param name="filePath">The fully qualified file path of the file you want to save. The file must be saved in a trusted location.</param>
            <returns>ReturnCode value indicate success or error conditions.</returns>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.QuickPadsShowToolTips">
            <summary>Gets or sets a value indicating whether QuickPad controls display tooltips.</summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.AddVBAReference(System.String)">
            <summary>Adds a reference to a session file that contains macros you want to share with the current session to the VBA References settings. After you add the reference,
            the macros in that file are available to the current session. When you save your session, the macros are saved in your current session document file and
            updated each time you reopen your session.</summary>
            <param name="sessionPath">The fully qualified file name of the session document file that contains the macros you want to share. Network locations should be specified with UNC
            file paths.</param>
            <remarks>
              <para>Before you add a reference to a session document file, make sure that the file is in a trusted location that is specified with a UNC file path (if
            using a network location).  Session document files cannot be accessed unless they are in trusted locations.</para>
              <para>Make sure the projects in the files you reference have unique project names. Each project name in the VBA editor must be unique to avoid errors caused by
            naming conflicts.</para>
            </remarks>
            <exception caption="" cref="T:Attachmate.Reflection.Framework.VBAReferenceNotInTrustedLocationException">
            This exception is thrown when you add a reference to a session file that is not in a trusted location.
            </exception>
            <exception caption="" cref="T:Attachmate.Reflection.Framework.VBAReferenceIncorrectSessionTypeException">
            This exception is thrown when you add a reference to a session file that is not the same session type as the current session.
            </exception>
            <exception caption="" cref="T:Attachmate.Reflection.Framework.VBAReferenceException">
            This exception is thrown if a sesson file does not exist, is not a valid file, or has an invalid file name. It is also thrown if a sesson file contains VBA projects that conflict with existing VBA projects or if security settings prevent adding VBA references.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.RemoveVBAReference(System.String)">
            <summary>
              <para>Removes a reference to a session document file from the VBA References settings. After you remove this file name, the macros in that file are no longer
            available in the current session. To make this change permanent, you'll need to save your session document file.</para>
            </summary>
            <param name="sessionPath">The fully qualified file name of the session document file to remove.</param>
            <exception caption="" cref="T:Attachmate.Reflection.Framework.VBAReferenceException">
            This exception is thrown  when security settings prevent removing VBA references.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.GetVBAReferences">
            <summary>Retrieves a list of the session documents referenced by the current session from the VBA References settings. The macros in these session documents are
            available to the current session.</summary>
            <returns>A string array that contains the referenced session file names.</returns>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.AfterConnect">
            <summary>
            Occurs after Reflection connects to the host.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.AfterDisconnect">
            <summary>
            Occurs after Reflection disconnects from the host.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.Closed">
            <summary>
            Occurs before the session closes.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.BeforeConnect">
            <summary>
            Occurs before Reflection connects to the host.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.BeforeDisconnect">
            <summary>
            Occurs before Reflection disconnects from the host.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal.CreditCardRecognized">
            <summary>
            	<para>This event occurs when an unredacted Primary Account Number (PAN) is displayed on the screen or in productivity features, such as Screen History. It also
            occurs when an unredacted PAN is copied from the terminal (for example, when the PAN is copied to a text file or a Microsoft Office application).</para>
            	<para>This event is enabled or disabled by configuring settings on the Setup Information Privacy dialog box. For more information, see "Monitor Credit Card Access" in
            the Reflection .NET API Guide.</para>
            	<para></para>
            	<para></para>
            </summary>
            <remarks>
            	<para></para>
            	<para></para>
            	<para>This event occurs only when a PAN is displayed or copied in its entirety ("in the clear"). It is not fired when only redacted PANs are displayed or
            copied.</para>
            </remarks>
            <example>
            	<code title="Display information about unredacted credit card PAN data" description="This sample writes information on the console when unredacted PAN data is displayed or copied from the terminal." lang="CS">
            //Set up the event handler to get the data you want to collect.
            void ibmTerminal_CreditCardRecognized(object sender, CreditCardRecognizedEventArgs e)
                {
                  Console.Write(("\n" + "Credit Card Number Viewed on Screen \n"
                  + "Date and Time: " + e.DateTime.ToString() + " \n"
                  + "Machine name: " + e.MachineName.ToString() + " \n"
                  + "User ID: " + e.UserId.ToString() + " \n"
                  + "Card number: " + e.RedactedAccountNumber + "\n"));
                }
            ...
             
            //Attach the event handler to the IbmTerminal object's CreditCardRecognized event,
            //where ibmTerminal is an instance of IbmTerminal.
            ibmTerminal.CreditCardRecognized += new CreditCardRecognizedEventHandler(ibmTerminal_CreditCardRecognized);</code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IKeyboardMapper">
            <summary>
            Methods and properties associated with the session document's keyboard map.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IKeyboardMapper.KeyMap">
            <summary>
            Gets or sets the name of the keymap file. 
            </summary>
            <remarks>
            When setting the name of this file, if the value is not a full path, 
            Reflection expands the search to include the user's Reflection data 
            folder and the Built-Ins/Keyboard Maps folder.
            <para>If the file cannot be found there, or the full path passed in does not exist,
            a FileNotFoundException is thrown.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IKeyboardMapper.MappingCollection">
            <summary>
            Returns a set of all the keys that have been remapped in the current keyboard map.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IKeyboardMapper.Parent">
            <summary>
            Gets the parent object. The parent is the IIbmTerminal object.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IKeyboardMapper.AddMapping(Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapping)">
            <summary>
            Adds a key mapping to the current keyboard map.
            </summary>
            <param name="mapping">
            A mapping between a key sequence and a set of actions to perform when
            that key sequence is pressed in a host session.
            </param>
            <remarks>
            A key can also be remapped to do nothing if the InputMapSequenceAction specified in 
            mapping.Mapping has no InputMapActions added to it.
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IKeyboardMapper.RemoveMapping(System.Windows.Forms.Keys)">
            <summary>
            Removes a key mapping from the keyboard map. This method should only be used to
            remove non-extended keys.
            </summary>
            <param name="key">The key sequence to remove the mapping for</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IKeyboardMapper.RemoveMapping(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Removes a key mapping from the keyboard map.
            </summary>
            <param name="key">The key sequence to remove the mapping for.</param>
            <param name="isExtendedKey">
            Indicates whether this key is an extended key. For IBM Enhanced 101- and 102-key keyboards, 
            extended keys are the right ALT and the right CTRL keys on the main keyboard; 
            the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys
            to the left of the numeric keypad; and the slash (/) and ENTER
            keys in the numeric keypad.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IKeyboardMapper.Contains(System.Windows.Forms.Keys)">
            <summary>
            Returns whether there is a mapping for a specified key combination
            in the current keyboard map. This method only works for non-extended keys.
            </summary>
            <param name="key">The key sequence to query for.</param>
            <returns>True if the current keyboard map contains a mapping for key, false if not.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IKeyboardMapper.Contains(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Returns whether there is a mapping for a specified key combination
            in the current keyboard map. 
            </summary>
            <param name="key">The key sequence to query for.</param>
            <param name="isExtendedKey">
            Indicates whether this key is an extended key. For IBM Enhanced 101- and 102-key keyboards, 
            extended keys are the right ALT and the right CTRL keys on the main keyboard; 
            the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys
            to the left of the numeric keypad; and the slash (/) and ENTER
            keys in the numeric keypad.
            </param>
            <returns>True if the current keyboard map contains a mapping for key, false if not.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IKeyboardMapper.Save">
            <summary>
            Saves changes to current keyboard map.
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while trying to save the keyboard map.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to save the keyboard map.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IKeyboardMapper.SaveAs(System.String)">
            <summary>
            Saves current keyboard map contents to a file.
            </summary>
            <param name="pathName">The path to the new keyboard map file</param>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while trying to save the keyboard map.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to save the keyboard map.
            </exception>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IMacro">
            <summary>Defines methods, properties, and events associated with running or recording macros.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IMacro.Parent">
            <summary>
            Gets the parent object. This is the IIbmTerminal object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IMacro.Recording">
            <summary>
            Gets a value indicating whether the macro recorder is currently recording.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IMacro.RecordingPaused">
            <summary>
            Gets a value indicating whether the macro recorder is currently paused.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IMacro.Script">
            <summary>
            Gets the current macro recording script, if any. Returns String.Empty if no script is
            currently recording.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IMacro.Data">
            <summary>Gets or sets a string variable that can be used as data during macro execution.</summary>
            <value>
            <para>The default value is "". This string can be up to 260 characters long.</para>
            <para></para>
            </value>
            <exception caption="" cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.ShowMacroDialog">
            <summary>
            Displays the Run Macro dialog box.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.PasswordBox(System.String,System.String)">
            <summary>Opens a dialog box containing a prompt and a text box for user input, and returns the contents of the text box after the user clicks OK. The text
            entered into the text box appears as asterisks on the screen.</summary>
            <param name="prompt">The prompt string for the dialog box.  The string limit is 260 characters; however, strings are automatically truncated in the dialog box
            display if they extend beyond the length of the box.<br/></param>
            <param name="title">The dialog box caption. The string limit is 260 characters; however, strings are automatically truncated in the dialog box display if they
            extend beyond the length of the title bar.<br/></param>
            <returns>The string entered in the dialog text box. If the user clicks Cancel, an error is returned.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.RunExternalLegacyReflectionMacro(System.String,System.String,System.String)">
            <summary>
            Runs a legacy Reflection macro from an external file (that is, a file that is not in current use).
            </summary>
            <param name="macroFileName">
            The path and name of the file that contains the macro you want to run. An error is returned if you specify 
            an invalid or nonexistent file.
            </param>
            <param name="macroName">
            The macro you want to run. An error is returned if the macro does not exist.
            </param>
            <param name="macroData">
             An optional string to pass information to the macro.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.RunLegacyReflectionMacro(System.String,System.String)">
            <summary>
            Runs a legacy Reflection macro.
            </summary>
            <param name="macroName">
            Specifies the name of the macro to run. 
            An error occurs if there is no macro of this name in the current settings file 
            or in any referenced files. This value can be up to 255 characters long.
            If you have more than one macro with the same name in different files, precede 
            the macro name with the project name and a period to correctly  
            identify the macro. For example, "SharedMacros.Login" identifies 
            the "Login" macro in the "SharedMacros" settings file. 
            </param>
            <param name="macroData">
            An optional string to pass information to the macro.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.RunLegacyReflectionMacroFile(System.String,System.String)">
            <summary>
            Runs the legacy Reflection macro that is in the specified macro file.
            </summary>
            <param name="fileName">
            The name of a macro file. Include full path information if the macro file is not 
            in the current folder.
            </param>
            <param name="macroData">
            An optional string to pass information to the macro.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.RunLegacyExtraMacro(System.String)">
            <summary>
            Runs a legacy EXTRA! macro.
            </summary>
            <param name="macroName">
            Specifies the full path of the macro to run. 
            </param>        
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the macro file does not exist.
            </exception>
            <remarks>
            Assumes that the EXTRA! Basic runtime is installed.
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.RunPcommMacro(System.String)">
            <summary>
            Runs an IBM Personal Communications macro.
            </summary>
            <param name="macroName">
            Specifies the full pathname of the macro to run. 
            </param>        
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the macro file does not exist.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.RunRumbaMacro(System.String)">
            <summary>
            Runs a Micro Focus Rumba macro.
            </summary>
            <param name="macroName">
            Specifies the full pathname of the macro to run. 
            </param>        
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the macro file does not exist.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.RunHostExplorerMacro(System.String)">
            <summary>
            Runs a HostExplorer macro.
            </summary>
            <param name="macroName">
            Specifies the full pathname of the macro to run. 
            </param>        
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the macro file does not exist.
            </exception>
            <remarks>
            Assumes that the EXTRA! Basic runtime is installed.
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.RunQwsMacro(System.String)">
            <summary>
            Runs a QWS macro.
            </summary>
            <param name="macroName">
            Specifies the full pathname of the macro to run. 
            </param>        
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the macro file does not exist.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.StartMacroRecording">
            <summary>
            Starts recording a macro in the current terminal session.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.StopMacroRecording(Attachmate.Reflection.Emulation.IbmHosts.MacroDestinationOption,System.String)">
            <summary>
            Stops the macro recorder in the current terminal session, and saves the macro.
            </summary>
            <param name="saveLocation">
            The location to which the macro is saved.
            MacroDestinationOption.Document saves the macro to the session document's VBA project.
            MacroDestinationOption.CommonProject saves the macro to the Common VBA project.
            MacroDestinationOption.Clipboard copies the macro script to the Windows Clipboard.
            </param>
            <param name="macroName">
            The name of the saved macro. This parameter is ignored if saveLocation is Clipboard.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the macro name is null, empty, or contains invalid characters.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.PauseRecording">
            <summary>
            Pauses macro recording in the current terminal session. 
            </summary>
            <remarks>
            This method is valid only when the macro recorder is running. 
            The method does nothing if the recorder is already
            paused.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the macro recorder is not currently recording.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.ResumeRecording">
            <summary>
            Resumes recording a macro in the current terminal session. 
            </summary>
            <remarks>
            This method is only valid when the macro recorder is running. The method does nothing if the recorder is already
            active.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the macro recorder is not currently recording.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.GetMacroNames(Attachmate.Reflection.Emulation.IbmHosts.MacroEnumerationOption)">
            <summary>
            Gets a list of existing macro names.
            </summary>
            <param name="macroSource">
            Indicates the location from which to get the list of macro names.
            MacroEnumerationOption.Document gets a list of macros from this session document's VBA project.
            MacroEnumerationOption.CommonProject gets a list of macros from the Common VBA project.
            </param>
            <returns>
            A set of macro names. The set may be empty if there are no existing macros.
            </returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.RunMacro(Attachmate.Reflection.Emulation.IbmHosts.MacroEnumerationOption,System.String)">
            <summary>
            Runs a macro.
            </summary>
            <param name="macroSource">
            The source location of the macro.  
            MacroEnumerationOption.Document indicates that the macro resides in the session document's VBA project.
            MacroEnumerationOption.Common indicates that the macro resides in the Common VBA project.
            </param>
            <param name="macroName">The name of the macro to run.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.RunMacro(Attachmate.Reflection.Emulation.IbmHosts.MacroEnumerationOption,System.String,System.String)">
            <summary>
            Runs a macro.
            </summary>
            <param name="macroSource">
            The location of the macro.  
            MacroEnumerationOption.Document indicates that the macro resides in the session document's VBA project.
            MacroEnumerationOption.Common indicates that the macro resides in the Common VBA project.
            </param>
            <param name="macroName">The name of the macro to run.</param>
            <param name="macroParameter">Parameter to pass to the macro.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.RunMacro(Attachmate.Reflection.Emulation.IbmHosts.MacroEnumerationOption,System.String,System.Object[])">
            <summary>
            Runs a macro.
            </summary>
            <param name="macroSource">
            The location of the macro.
            MacroEnumerationOption.Document indicates that the macro resides in the session document's VBA project.
            MacroEnumerationOption.Common indicates that the macro resides in the Common VBA project.
            </param>
            <param name="macroName">The name of the macro to run.</param>
            <param name="macroParameters">Parameters to pass to the macro.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.StopMacro">
            <summary>
            Stops a currently running macro. 
            </summary>
            <remarks>
            This has no effect unless a macro is running in the
            current terminal session.
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMacro.RunExpressMacro(System.String)">
            <summary>
            Runs an Express macro.
            </summary>
            <param name="macroName">
            Specifies the fully qualified file name of the macro to run. 
            </param>
            <exception caption="" cref="T:System.IO.FileNotFoundException">
            Thrown if the macro file does not exist.
            </exception>
            <example>
            Run an Express Macro
            <code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\IBM\Macros\Macros\Program.cs" lang="CS"></code></example>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IMacro.MacroStarted">
            <summary>
            Occurs when a macro has started. This does not apply to legacy
            Reflection macros, legacy EXTRA! macros, or Express Macros
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IMacro.MacroCompleted">
            <summary>
            Occurs when a macro has completed. This does not apply to legacy
            Reflection macros, legacy EXTRA! macros, or Express Macros
            </summary>        
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IMacro.ExpressMacroStarted">
            <summary>
            Occurs when an Express macro has started.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IMacro.ExpressMacroCompleted">
            <summary>
            Occurs when an Express macro has completed.
            </summary>        
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IMouseMapper">
            <summary>
            Methods and properties associated with the session document's mouse map.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IMouseMapper.MouseMap">
            <summary>
            Gets or sets the name of the mouse map file. 
            </summary>
            <remarks>
            When setting the name of this file, if the value is not a full path, 
            Reflection expands the search to include the user's Reflection data 
            folder and the Built-Ins/Keyboard Maps folder.
            <para>If the file cannot be found there, or the full path passed in does not exist,
            a FileNotFoundException is thrown.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IMouseMapper.MappingCollection">
            <summary>
            Returns a set of all the mouse/key combinations that have been remapped in the 
            current mouse map.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IMouseMapper.Parent">
            <summary>
            Gets the parent object (IIbmTerminal).
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMouseMapper.AddMapping(Attachmate.Reflection.Emulation.IbmHosts.MouseMapping)">
            <summary>
            Adds a mouse button mapping to the current mouse map.
            </summary>
            <param name="mapping">
            A mapping between a mouse/key combination and a set of actions to perform when
            that mouse button combination is pressed in a host session.
            </param>
            <remarks>
            A mouse/key combination can also be remapped to do nothing if the InputMapSequenceAction
            specified in mapping.Mapping has no InputMapActions added to it.
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMouseMapper.RemoveMapping(Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination)">
            <summary>
            Removes a mouse mapping from the mouse map.
            </summary>
            <param name="mapping">The mouse/key combination to remove the mapping for</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IMouseMapper.Contains(Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination)">
            <summary>
            Returns whether a mapping exists for the specified mouse/key combination
            in the current mouse map.
            </summary>
            <param name="mapping">The mouse/key combination to query for.</param>
            <returns>True if the current keyboard map contains a mapping for key; false if not.</returns>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.InputMapAction">
            <summary>
            An action that can be mapped to something in an input map.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.InputMapAction.#ctor">
            <summary>
            Initializes a new instance of the InputMapAction class.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.InputMapAction.#ctor(Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID,System.Object[])">
            <summary>Initializes a new instance of the InputMapAction class.</summary>
            <param name="actionID">The action type.</param>
            <param name="parameters">Optional parameters associated with the action. If there are no parameters needed
            for the action, null may be specified for this parameter.</param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.InputMapAction.ActionID">
            <summary>
            <c>Gets</c> the action ID associated with this action.
            </summary>
            <example>
            <code>
            InputMapAction inputMap;
            InputMapActionID actionID;
            
            public void GetActionID()
            {
               if(inputMap != null)
                  actionID = inputMap.ActionID;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.InputMapAction.Parameters">
            <summary>
            <c>Gets</c> the parameters associated with this action. If there are no parameters,null is returned.
            </summary>
            <example>
            <code>
            InputMapAction inputMap;
            object[] parameters; 
            
            public void GetActionID()
            {
               if(inputMap != null)
                  parameters = inputMap.Parameters;
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.InputMapAction.GetSchema">
            <summary>
            Returns an in-memory representation of the XML schema used for SerializableList
            </summary>
            <returns>Null -- not currently implemented.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.InputMapAction.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads an input map action from an XML reader
            </summary>
            <param name="reader">where to read the xml from</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.InputMapAction.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes an input map action out to an XML writer
            </summary>
            <param name="writer">writes the xml to persistant storage</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.InputMapAction.VerifyActionParameters(System.Boolean)">
            <summary>
            Verify InputMapAction parameters
            </summary>
            <param name="checkSystemTypesOnly">Check only system types</param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.InputFieldUnderlinesOption">
            <summary>
            Defines options that specify how Reflection underlines input fields on host screens. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputFieldUnderlinesOption.UnderlineAlways">
            <summary>
            All input fields on host screens are underlined.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputFieldUnderlinesOption.UnderlineNever">
            <summary>
            Input fields on host screens are not underlined.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputFieldUnderlinesOption.UnderlineHostControl">
            <summary>
            The host determines which input fields are underlined.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence">
            <summary>
            Contains a set of actions that are mapped to an input mapping.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence.#ctor">
            <summary>
            Initializes a new instance of the InputMapActionSequence class.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence.Actions">
            <summary>
            Gets the actions.
            </summary>
            <example>
            <code>
            InputMapActionSequence actionMap;
            InputMapAction[] mapAction = actionMap.Actions;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence.Add(Attachmate.Reflection.Emulation.IbmHosts.InputMapAction)">
            <summary>
            Adds an action to the action sequence.
            </summary>
            <param name="action">The action to add.</param>
            <example>
            <code>
            class program
            {
              InputMapActionSequence actionMap;
              InputMapAction  mapAction ;
            
              public InputMapAction Action
              {
                set{mapAction = value;} 
              }
            
              public void AddAction()
              {
                if(mapAction != null)
                   actionMap.Add(mapAction);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence.GetSchema">
            <summary>
            Returns an in-memory representation of the XML schema used for SerializableList
            </summary>
            <returns>Null -- not currently implemented.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads in an input map action sequence from an xml file
            </summary>
            <param name="reader">where to read the xml from</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes out an input map action sequence to xml format
            </summary>
            <param name="writer">writes the xml to persistant storage</param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.OpenUrlActionLocationOption">
            <summary>
            Valid values for the second parameter to the openURLAction action. 
            This determines
            where to open the URL specified in the first parameter.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.OpenUrlActionLocationOption.ExternalBrowser">
            <summary>
            Opens the specified URL in a new browser instance.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.OpenUrlActionLocationOption.NewTab">
            <summary>
            Opens the specified URL in a new Reflection tab.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.OpenUrlActionLocationOption.NamedTab">
            <summary>
            Opens the specified URL in an existing Reflection tab. 
            The tab name must be specified 
            as a string in the third parameter to openURLAction.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID">
            <summary>
            Actions that can be mapped to keyboard maps or mouse maps.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ShowHelpAboutAction">
            <summary>
            Opens the Help/About dialog box. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.AppointmentAction">
            <summary>
            Creates a new appointment Office document. 
            This action does nothing if
            the current Office Suite does not support appointment documents.
            Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.LaunchSupportWebsiteAction">
            <summary>
            Opens the Attachmate support Web site. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ShowAutoCompleteSettingsAction">
            <summary>
            Opens the Auto Complete settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ShowAutoExpandAction">
            <summary>
            Opens the Auto Expand settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.BackHistoryAction">
            <summary>
            Navigates to the previous screen in the screen history sequence. 
            Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.SpellCheckFieldAction">
            <summary>
            Reviews spelling of text in the current field. 
            This has no effect if the session document is configured
            to not check spelling as the user types.
            Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.SpellCheckScreenAction">
            <summary>
            Reviews spelling of text in the entire screen. 
            This has no effect if the session document is configured
            to not check spelling as the user types.
            Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ClearSelectionAction">
            <summary>
            Clears any selection active in the host sesssion document. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ClipboardSettingsAction">
            <summary>
            Opens the Clipboard settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.CloseAction">
            <summary>
            Closes the current document. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.CodePageSettingsAction">
            <summary>
            Opens the host code page settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ConnectAction">
            <summary>
            Connects the current host session document to the host. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ContactAction">
            <summary>
            Creates a new contact Office document. 
            This action does nothing if the current Office Suite does not support contact documents.
            Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ContextMenuEditorAction">
            <summary>
            Opens the Context Menu Editor. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.CopyAction">
            <summary>
            Copies selected text to the Clipboard. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.CopyAppendAction">
            <summary>
            Copies selected text and appends it to the current contents of the Clipboard. 
            Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.CutAction">
            <summary>
            Cuts selected text and places it on the Clipboard. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.CutAppendAction">
            <summary>
            Cuts selected text and appends it to the current contents of the Clipboard. 
            Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.DisconnectAction">
            <summary>
            Disconnects the current host session document from the host. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.SettingsAction">
            <summary>
            Opens the settings configuration for the current document. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.EmailMessageAction">
            <summary>
            Creates a new e-mail message Office document. This action does nothing if
            the current Office Suite does not support e-mail. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExitAction">
            <summary>
            Quits Reflection. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.FileTransferAction">
            <summary>
            Opens the File Transfer dialog box to transfer files between your PC and the host. 
            Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ForwardHistoryAction">
            <summary>
            Navigates to the next host screen in the screen history sequence. 
            Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.FtpFileTransferAction">
            <summary>
            Opens the Reflection FTP client for FTP file transfer. 
            Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.FullScreenViewAction">
            <summary>
            Puts the Reflection frame in full screen mode. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.HelpAction">
            <summary>
            Opens the Help system in a separate window. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.HostConnectionSettingsAction">
            <summary>
            Opens the host connection settings configuration. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.HotspotsSettingsAction">
            <summary>
            Opens the host session HotSpots settings configuration. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.KeyboardMapperAction">
            <summary>
            Opens the Keyboard Map editor. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.MapKeystrokeAction">
            <summary>
            Opens the Keyboard Map editor. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.LaunchApplicationAction">
            <summary>
            Starts an external application. 
            This action requires three parameters (in order):
            <para>The full path to the application executable file, of type string.</para>
            <para>Optional arguments for the application's command line of type string. Specify an empty string if no arguments are necessary.</para>
            <para>An optional working directory for the application of type string. Specify an empty string if no working directory is desired.</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ShowLiveScreenAction">
            <summary>
            Returns to the current host session document's current host screen. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.VbaMacroDialogAction">
            <summary>
            Opens the Visual Basic for Applications Macro dialog box. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ManualCaptureAction">
            <summary>
            Performs a screen capture of the current host screen and adds it to the screen history sequence.
            Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ModelSettingsAction">
            <summary>
            Opens the host screen model configuration settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.MouseMapSettingsAction">
            <summary>
            Opens the mouse map settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ShowMouseMapperAction">
            <summary>
            Opens the Mouse Map editor. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.MoveCursorAction">
            <summary>
            Moves the cursor in the host session. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.NewDocumentAction">
            <summary>
            Creates a new document in the Reflection Desktop frame. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.NoteAction">
            <summary>
            Creates a new note Office document. 
            This action does nothing if
            the current Office Suite does not support note documents. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.OfficeToolsPaneAction">
            <summary>
            Displays the Office Tools task pane. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.OpenAction">
            <summary>
            Opens a document in the Reflection frame. Requires one parameter of type string (the full path to the document to be opened).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.OpenURLAction">
            <summary>
            Opens a URL. 
            This action requires up to three of the following parameters:
            <para>The URL string value (required)</para>
            <para>An open location of type OpenUrlActionLocationOption (required). 
            This determines the location where the URL is opened (for example, an external browser, a new Reflection tab, or an existing named Reflection tab).</para>
            <para>The tab name of type string, if the second parameter is OpenUrlActionLocationOption.NamedTab.</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.PageSetupAction">
            <summary>
            Opens the Page Setup dialog box for printing. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.PasteAction">
            <summary>
            Pastes data from the Clipboard to the current cursor position in the host session document. 
            Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.PrintAction">
            <summary>
            Opens the Print dialog box. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.PrintSetupAction">
            <summary>
            Opens the Print Setup dialog box. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ShowPrivacyFilterAction">
            <summary>
            Opens the Information Privacy configuration settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ShowProductivitySettingsAction">
            <summary>
            Opens the Productivity configuration settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.QuickPrintAction">
            <summary>
            Prints the current document immediately. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.RecentTypingPaneAction">
            <summary>
            Opens the Recent Typing task pane. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ShowRecentTypingSettingsAction">
            <summary>
            Opens the Recent Typing configuration settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ToggleMacroRecordAction">
            <summary>
            Starts or stops the Macro Recorder. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.GlobalSettingsAction">
            <summary>
            Opens the Reflection Desktop global configuration settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.RunLegacyExtraMacroAction">
            <summary>
            Runs a legacy EXTRA! macro. 
            This action requires two parameters:
            <para>The full path to the EXTRA! macro file, of type string. This can be empty if the prompt at runtime flag is set to true.</para>
            <para> A boolean value that determines whether the user is prompted for a macro to run at runtime. 
            The first parameter value is ignored if this value is true.</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.RunLegacyReflectionMacroAction">
            <summary>
            Runs a legacy Reflection macro.
            This action requires three parameters:
            <para>The name of the macro (type string).</para>
            <para>Macro data (type string) to be passed to the macro at runtime. 
            If no macro data is needed, this can be specified as an empty string.</para>
            <para>A boolean value that determines whether the user is prompted for a macro to run at runtime. 
            The first two parameter values are ignored if this value is true.</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.RunMacroAction">
            <summary>
            	<para>Runs a macro, if the required parameters are provided. This action requires three parameters with an optional fourth parameter:</para>
            	<list type="bullet">
            		<item>The macro name of type string (for example, "Module1.TestMacro"). Include the VBA project namespace in the name, if necessary.</item>
            		<item>The VBA project location where the macro is located (type MacroEnumerationOption). Specify MacroEnumerationOption.CommonProject if the macro is located
                in the Common project, or MacroEnumerationOption.Document if it's located in the current document's VBA project.</item>
            		<item>A boolean value that determines whether the user is prompted for a macro to run at runtime. The first two parameters are ignored if this value is
                true.</item>
            		<item>Optional macro data (type string) to be passed to the macro at runtime. If no macro data is needed, do not add this to the parameter list.</item>
            	</list>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.SaveAction">
            <summary>
            Saves the current document. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.SaveAsAction">
            <summary>
            Saves the current document with a new name or location. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.SaveLayoutAction">
            <summary>
            Saves all currently open documents in a layout. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.SaveRSFTAction">
            <summary>
            Saves the current document configuration as a template. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ScratchPadPaneAction">
            <summary>
            Opens the Scratch Pad task pane. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ScreenHistoryPaneAction">
            <summary>
            Opens the Screen History task pane. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ShowScreenHistorySettingAction">
            <summary>
            Opens Screen History configuration settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.SelectAllAction">
            <summary>
            Selects all of the text in the current document. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.SendHostKeyAction">
            <summary>
            Transmits a host key to the host.
            This requires one parameter of type ControlKeyCode, which specifies which host key to send.
            The ControlKeyCode values F1-F24 correspond to PF1-PF24 for IBM Mainframe (System z) sessions,
            and F1-F24 for IBM AS/400 (System i) sessions.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.SendHostTextAction">
            <summary>
            Sends a string of text to a host session.
            This requires one parameter of type string,
            which is the text to transmit at the current cursor position.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ShowContextMenuAction">
            <summary>
            Opens a context menu in the current document. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ThemesSoundSettingsAction">
            <summary>
            Opens the sound configuration settings for the current document's theme. 
            Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ShowSpellCheckAction">
            <summary>
            Opens the Spell Check configuration settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.TaskAction">
            <summary>
            Creates a new task Office document.
            This action does nothing if the current Office Suite does not support task documents. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.TerminalAppearanceSettingsAction">
            <summary>
            Opens the terminal appearance configuration settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ThemeSettingsAction">
            <summary>
            Opens the theme configuration settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ShowUIDesignerAction">
            <summary>
            Opens the UI Designer application to customize the Ribbon. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.LaunchVbaAction">
            <summary>
            Starts the Visual Basic for Applications Editor. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.WordDocumentAction">
            <summary>
            Creates a new word-processing document. 
            This action does nothing if
            the current Office Suite does not support word-processing documents. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ToggleRibbonStateAction">
            <summary>
            Shows or hides the workspace Ribbon. 
            This action does nothing if the workspace is running in Classic Mode. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.LayoutCascadeAction">
            <summary>
            Rearranges all open document windows in the workspace to overlap in a cascade. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.LightPenAction">
            <summary>
            Simulates a light pen selection at the current cursor position. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.StopMacroAction">
            <summary>
            Stops the currently running macro, if any, in the current document. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.TogglePauseMacroAction">
            <summary>
            Pauses or resumes recording a macro. 
            This action does nothing unless a recording is in progress. Requires no
            parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.MacroSecurityAction">
            <summary>
            Opens the API and Macro Security configuration settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionBlockLeftAction">
            <summary>
            Extends the selection block left by one column. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionBlockRightAction">
            <summary>
            Extends the selection block right by one column. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionBlockUpAction">
            <summary>
            Extends the selection block up by one row. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionBlockDownAction">
            <summary>
            Extends the selection block down by one row. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionBlockStartOfLineAction">
            <summary>
            Extends the selection block to the start of the line. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionBlockEndOfLineAction">
            <summary>
            Extends the selection block left to the end of the line. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionBlockStartOfWordAction">
            <summary>
            Extends the selection block to the start of the previous word. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionBlockEndOfWordAction">
            <summary>
            Extends the selection block to the end of the next word. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionBlockStartOfScreenAction">
            <summary>
            Extends the selection block to the start of the current screen. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionBlockEndOfScreenAction">
            <summary>
            Extends the selection block to the end of the current screen. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionStreamLeftAction">
            <summary>
             Extends the selection stream left by one column. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionStreamRightAction">
            <summary>
            Extends the selection stream right by one column. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionStreamUpAction">
            <summary>
            Extends the selection stream up by one row. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionStreamDownAction">
            <summary>
            Extends the selection stream down by one row. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionStreamStartOfLineAction">
            <summary>
             Extends the selection stream to the start of the line. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionStreamEndOfLineAction">
            <summary>
            Extends the selection stream to the start of the previous word. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionStreamStartOfWordAction">
            <summary>
            Extends the selection stream to the start of the previous word. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionStreamEndOfWordAction">
            <summary>
            Extends the selection stream to the end of the next word. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionStreamStartOfScreenAction">
            <summary>
            Extends the selection stream to the start of the current screen. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ExtendSelectionStreamEndOfScreenAction">
            <summary>
            Extends the selection stream to the end of the current screen. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.StartTraceAction">
            <summary>
            	<para>Opens the Start Trace dialog box, used to enter the name of the file in which to save the trace data. Requires no parameters.</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.StopTraceAction">
            <summary>Stops recording a trace. Requires no parameters.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.PlayBackTraceAction">
            <summary>Opens the Playback Trace dialog box, used to open the file that contains the trace data. Requires no parameters.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.PreviousDocumentAction">
            <summary>
            Make the previous session document or Web page active on an MDI workspace, whether you are viewing your
            documents as tabs or windows. Or make the next Workspace active if SDI mode is used. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.NextDocumentAction">
            <summary>
            Make the next session document or Web page active on an MDI workspace, whether you are viewing your
            documents as tabs or windows. Or make the next Workspace active if SDI mode is used. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.QuickPadSettingsAction">
            <summary>
            Opens the QuickPad configuration settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ManageRibbonSettingsAction">
            <summary>
            Opens the user interface settings for configuring the selected ribbon or classic UI mode file, 
            modifying the current file, or creating a new file. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.PasteNextAction">
            <summary>
            Insert the remaining text in the paste next buffer within the host application. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ProductivityFieldSecurityAction">
            <summary>
            Toggles productivity field security on/off in the current field. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.RunSupportToolAction">
            <summary>
            Runs a utility to help Attachmate Technical Support collect Reflection application data. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.RunPcommMacroAction">
            <summary>Runs an IBM Personal Communications macro. This action requires one parameter:
            <para><br/>
            The full path to the PComm macro file, of type string.</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.RunRumbaMacroAction">
            <summary>Runs a Micro Focus RUMBA macro. This action requires one parameter:
            <para><br/>
            The full path to the RUMBA macro file, of type string.</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.RunHostExplorerMacroAction">
            <summary>Runs a HostExplorer macro. This action requires one parameter:
            <para><br/>
            The full path to the HostExplorer macro file, of type string.</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.RunQwsMacroAction">
            <summary>Runs a QWS macro. This action requires one parameter:
            <para><br/>
            The full path to the QWS macro file, of type string.</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.UndoAction">
            <summary>
            Undoes last edit operation. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.DocumentPropertiesAction">
            <summary>
            Displays document settings. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ShowSpecificContextMenuAction">
            <summary>
            Shows a specified context menu.
            <remarks>
            This action requires four parameters:
            <para>The name of the context menu to show, of type string.</para>
            <para>Whether to show the menu at the current mouse cursor position, of type bool.</para>
            <para>The row in the host screen to show the menu at, of type int.</para>
            <para>The column in the host screen to show the menu at, of type int.</para>
            </remarks>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.RunExternalLegacyReflectionMacroAction">
            <summary>Runs an external legacy Reflection macro. This requires four parameters:
            <para>The name of the macro (type string).</para><para>The name of the session file or external macro file (*.RMA) in which the macro resides (type string).</para><para>Optional macro data (type string) to be passed to the macro at runtime. If no macro data is needed, this can be specified as an empty string.</para><para>A boolean value that determines whether the user is prompted for a macro to run at runtime. The first three parameter values are ignored if this value is
            true.</para></summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.RunExternalLegacyReflectionBasicMacroAction">
            <summary>Runs an external legacy Reflection Basic Macro. This requires two parameters:
            <para>The name (type string) of the macro file (*.RBS).</para><para>Optional macro data (type string) to be passed to the macro at runtime. If no macro data is needed, this can be specified as an empty string.</para></summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.LayoutVerticalAction">
            <summary>
            Rearranges all open document windows in the workspace to be tiled vertically. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.LayoutHorizontalAction">
            <summary>
            Rearranges all open document windows in the workspace to be tiled horizontally. Requires no parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.EventUIMapperAction">
            <summary>
            Shows the Event UI mapping dialog
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ToggleTerminalKeyboardAction">
            <summary>
            Show or hide the on-screen terminal keyboard for the active session.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.RunExpressMacroAction">
            <summary>
            Runs an Express macro.
            <para>This action may be run with no parameters, in which case the user will be prompted for a macro to run when the action is executed.
            Otherwise, you need to pass in the following two parameters:</para>
            <para>The full path to the Express macro file to run.</para>
            <para>A boolean value that determines whether the user is prompted to select a macro when the action is executed.
            The first parameter is ignored if this value is true.</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ToggleClassicMenuBarAction">
            <summary>
            Toggle Menu and Tool bar in Classic mode
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.ToggleClassicStatusBarAction">
            <summary>
            Toggle StatusBar in Classic mode
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.CopyToBuffer1Action">
            <summary>
            Copies the selected text to the clipbord and saves a copy of it in one of 4 buffers.
            This requires one parameter:
            <para>The index (1-4) of the buffer to use</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.CopyToBuffer2Action">
            <summary>
            Copies the selected text to the clipbord and saves a copy of it in one of 4 buffers.
            This requires one parameter:
            <para>The index (1-4) of the buffer to use</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.CopyToBuffer3Action">
            <summary>
            Copies the selected text to the clipbord and saves a copy of it in one of 4 buffers.
            This requires one parameter:
            <para>The index (1-4) of the buffer to use</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.CopyToBuffer4Action">
            <summary>
            Copies the selected text to the clipbord and saves a copy of it in one of 4 buffers.
            This requires one parameter:
            <para>The index (1-4) of the buffer to use</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.PasteFromBuffer1Action">
            <summary>
            Retrieves saved text from one of 4 buffers and places it in the clipboard, then
            pastes it to the current cursor position in the host session document.
            This requires one parameter:
            <para>The index (1-4) of the buffer to use</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.PasteFromBuffer2Action">
            <summary>
            Retrieves saved text from one of 4 buffers and places it in the clipboard, then
            pastes it to the current cursor position in the host session document.
            This requires one parameter:
            <para>The index (1-4) of the buffer to use</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.PasteFromBuffer3Action">
            <summary>
            Retrieves saved text from one of 4 buffers and places it in the clipboard, then
            pastes it to the current cursor position in the host session document.
            This requires one parameter:
            <para>The index (1-4) of the buffer to use</para>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InputMapActionID.PasteFromBuffer4Action">
            <summary>
            Retrieves saved text from one of 4 buffers and places it in the clipboard, then
            pastes it to the current cursor position in the host session document.
            This requires one parameter:
            <para>The index (1-4) of the buffer to use</para>
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.InsertArenaOption">
            <summary>
            Defines options that specify the extent to which Reflection applies the logic for character 
            insertion, as described for the terminal's InsertProtocol property.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InsertArenaOption.CurrentField">
            <summary>
            No change is allowed to any field except the current field.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InsertArenaOption.LocalUnprotectedFields">
            <summary>
            Changes are allowed to the current field and to other local unprotected fields. 
            If two or more unprotected fields are contiguous (that is, not separated by any 
            protected fields), they are local.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InsertArenaOption.AllUnprotectedFields">
            <summary>
            Changes are allowed to all unprotected fields in the partition.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.InsertProtocolOption">
            <summary>
            Defines options that specify what Reflection does when users attempt to insert a character.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InsertProtocolOption.FirstNull">
            <summary>
            Make room for the character being inserted by moving all characters to the right of 
            the insertion point one character to the right until a null is encountered. The null 
            is replaced by a character and all subsequent characters are unchanged. If a null is not 
            found, the insertion fails.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InsertProtocolOption.FirstNullOrTrailingSpace">
            <summary>
            Uses the same logic as FirstNull except that a trailing space can be used if a null is not found.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.InsertProtocolOption.FirstNullOrTrailingChar">
            <summary>
            Replaces the last character in the insert arena if neither a null nor a trailing space is found.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IOia">
            <summary>
            Properties relating to the host session status line
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IOia.Parent">
            <summary>
            Gets the parent object. The parent is the IIbmScreen object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IOia.Text">
            <summary>
            Returns text representation of the status line
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IOia.TypeOf5250StatusLine">
            <summary>
            Gets or sets the type of 5250 status line. Applies only to 5250 sessions.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IOia.HasMessageWaiting">
            <summary>
            Gets whether there is a status message waiting. 5250 sessions only.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IOia.ConnectionStatus">
            <summary>
            Gets the communications status from the OIA.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IOia.ErrorStatus">
            <summary>
            Gets the error status from the OIA
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IOia.Xstatus">
            <summary>
            Gets the X-clock status from the OIA
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.IOia.OiaChanged">
            <summary>
            The OIA status line has changed.
            </summary>
            <remarks>The event does not include the change of row or column numbers on the status line.</remarks>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions">
            <summary>
            IPrintOptions interface defines an interface for host emulation printing and screen printing options. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.Parent">
            <summary>
            Gets the parent object. The parent is the IIbmScreen object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintDest">
            <summary>
            Returns or specifies a driver or port to print to. 
            </summary>
            <remarks>
            The default value is "unknown".
            This string can be up to 220 characters long.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>        
            /// <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.AutoFormFeed">
            <summary>Returns or specifies whether the terminal inserts a form feed between screens
            when the terminal is configured to print multiple screens per page.</summary>
            <remarks>This property applies only to screen printing performed during terminal
            sessions, and only affects printing when the ClosePrinterManually property
            is set to true.</remarks>
            <value>The default value is False.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintStatusLine">
            <summary>Returns or specifies whether the terminal prints the host status line when
            printing from the terminal window.</summary>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintMonochrome">
            <summary>Returns or specifies whether the terminal prints the terminal window using
            only black and white.</summary>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintBackground">
            <summary>Specifies the background color to use when printing the terminal screen.</summary>
            <remarks>Available values include Black and White (the default).</remarks>
            <value>The default value is White.</value>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintFitUserWidth">
            <summary>
            Returns or specifies the width of the form to print to when the PrintFitUser property is true.
            </summary>
            <remarks>
            The value is expressed in percent reduction (less than 100%) or expansion (greater than 100%). 
            The default value is 100. 
            The range of values is 10 - 1000.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrinterOrientation">
             <summary>
             Returns or specifies the default page orientation used to print host documents.
             </summary>
             <remarks>
            <list type="bullet">
             <listheader><term>Values:</term></listheader>
             <item>
             <term>Default</term>
             <description>Uses the page orientation sent down from the host to print the document.</description>
             </item>
             <item>
             <term>Landscape	</term>
             <description>Forces the page orientation to landscape mode (11" x 8.5"), regardless of 
             how the document is configured on the host.</description>
             </item>
             <item>
             <term>Portrait</term>
             <description>Forces the page orientation to portrait mode (8.5" x 11"), regardless of 
             how the document is configured on the host.</description>
             </item>
             </list>
             </remarks>
             <exception cref="T:Attachmate.Reflection.SecuredSettingException">
             This exception is thrown when you modify a property that was secured 
             via the Permissions Manager, or that can only be modified by an Administrator.
             </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintMarginTop">
            <summary>
            Returns or specifies the size of the margin at the top of a printed page.
            </summary>
            <remarks>
            The value is in "twips" (a twip is one twentieth of a point). 
            There are 1440 twips to an inch.
            The default is 0.
            The range of values is 0 - 32,767.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintMarginBottom">
            <summary>
            Returns or specifies the size of the margin at the bottom of a printed page.
            </summary>
            <remarks>
            The value is in "twips" (a twip is one twentieth of a point). 
            There are 1440 twips to an inch. 
            The default is 0.
            The range of values is 0 - 32,767.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintMarginLeft">
            <summary>
            Returns or specifies the size of the margin at the left side of a printed page.
            </summary>
            <remarks>
            The value is in "twips" (a twip is one twentieth of a point). 
            There are 1440 twips to an inch.
            The default is 0.
            The range of values is 0 - 32,767.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintMarginRight">
            <summary>
            Returns or specifies the size of the margin at the right side of a printed page.
            </summary>
            <remarks>
            The value is in "twips" (a twip is one twentieth of a point). 
            There are 1440 twips to an inch.
            The default is 0.
            The range of values is 0 - 32,767.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintPaperSize">
            <summary>
            Returns or specifies the paper size to use for the current default
            Windows printer.
            </summary>
            <remarks>
            The default value is PaperSizeWindows, which specifies the current printer default. 
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>PaperSize10x11</term><description>10 x 11 in.</description></item>
            <item><term>PaperSize10x14</term><description>10 x 14 in.</description></item>
            <item><term>PaperSize11x17</term><description>11 x 17 in.</description></item>
            <item><term>PaperSize15x11</term><description>	15 x 11 in.</description></item>
            <item><term>PaperSize9x11</term><description>	9 x 11 in.</description></item>
            <item><term>PaperSizeA2	</term><description>A2 420 x 594 mm</description></item>
            <item><term>PaperSizeA3	</term><description>A3 297 x 420 mm</description></item>
            <item><term>PaperSizeA3Extra</term><description>	A3 Extra 322 x 445 mm</description></item>
            <item><term>PaperSizeA3ExtraTraverse</term><description>	A3 Extra Transverse 322 x 445 mm</description></item>
            <item><term>PaperSizeA3Traverse	</term><description>A3 Transverse 297 x 420 mm</description></item>
            <item><term>PaperSizeA4</term><description>	A4 210 x 297 mm</description></item>
            <item><term>PaperSizeA4Extra</term><description>	A4 Extra 9.27 x 12.69 in.</description></item>
            <item><term>PaperSizeA4ExtraTraverse</term><description>	Letter Extra Transverse 9.275 x 12 in.</description></item>
            <item><term>PaperSizeA4Plus</term><description>	A4 Plus 210 x 330 mm</description></item>
            <item><term>PaperSizeA4Small</term><description>	A4 Small 210 x 297 mm</description></item>
            <item><term>PaperSizeA4Traverse</term><description>	A4 Transverse 210 x 297 mm</description></item>
            <item><term>PaperSizeA5</term><description>	A5 148 x 210 mm</description></item>
            <item><term>PaperSizeA5Extra</term><description>A5 Extra 174 x 235 mm</description></item>
            <item><term>PaperSizeA5Traverse</term><description>A5 Transverse 148 x 210 mm</description></item>
            <item><term>PaperSizeAPlus</term><description>SuperA/SuperA/A4 227 x 356 mm</description></item>
            <item><term>PaperSizeB4</term><description>B4 (JIS) 250 x 354 mm</description></item>
            <item><term>PaperSizeB5</term><description>B5 (JIS) 182 x 257 mm</description></item>
            <item><term>PaperSizeB5Extra</term><description>B5 (ISO) Extra 201 x 276 mm</description></item>
            <item><term>PaperSizeB5Traverse	</term><description>B5 (JIS) Transverse 182 x 257 mm</description></item>
            <item><term>PaperSizeBPlus</term><description>SuperB/SuperB/A3 305 x 487 mm</description></item>
            <item><term>PaperSizeCSheet</term><description>C-sized sheet</description></item>
            <item><term>PaperSizeDSheet</term><description>D-sized sheet</description></item>
            <item><term>PaperSizeEnv10</term><description>Envelope #10 4 1/8 x 9 1/2 in.</description></item>
            <item><term>PaperSizeEnv11</term><description>Envelope #11 4 1/2 x 10 3/8 in.</description></item>
            <item><term>PaperSizeEnv12</term><description>Envelope #12 4 3/4 x 11 in.</description></item>
            <item><term>PaperSizeEnv14</term><description>Envelope #14 5 x 11 1/2 in.</description></item>
            <item><term>PaperSizeEnv9</term><description>Envelope #9</description></item>
            <item><term>PaperSizeEnvB4</term><description>Envelope B4 250 x 353 mm</description></item>
            <item><term>PaperSizeEnvB5</term><description>Envelope B5 176 x 250 mm</description></item>
            <item><term>PaperSizeEnvB6</term><description>Envelope B6 176 x 125 mm</description></item>
            <item><term>PaperSizeEnvC3</term><description>Envelope C3 324 x 458 mm</description></item>
            <item><term>PaperSizeEnvC4</term><description>Envelope C4 229 x 324 mm</description></item>
            <item><term>PaperSizeEnvC5</term><description>Envelope C5 162 x 229 mm</description></item>
            <item><term>PaperSizeEnvC6</term><description>Envelope C6</description></item>
            <item><term>PaperSizeEnvC65</term><description>Envelope C65 114 x 229 mm</description></item>
            <item><term>PaperSizeEnvDL</term><description>Envelope DL 110 x 220 mm</description></item>
            <item><term>PaperSizeEnvInvite</term><description>Envelope Invite 220 x 220 mm</description></item>
            <item><term>PaperSizeEnvItaly</term><description>Envelope 110 x 230 mm</description></item>
            <item><term>PaperSizeEnvMonarchEnvelope	</term><description>Monarch 3.875 x 7.5 in.</description></item>
            <item><term>PaperSizeEnvPersonal</term><description>6 3/4 Envelope 3 5/8 x 6 1/2 in.</description></item>
            <item><term>PaperSizeESheet</term><description>E-sized sheet</description></item>
            <item><term>PaperSizeExecutive</term><description>Executive 7 1/4 x 10 1/2 in.</description></item>
            <item><term>PaperSizeFanfoldLglGerman</term><description>German Legal Fanfold 8 1/2 x 13 in.</description></item>
            <item><term>PaperSizeFanfoldStdGerman</term><description>German Std Fanfold 8 1/2 x 12 in.</description></item>
            <item><term>PaperSizeFanfoldUS</term><description>US Std Fanfold 14 7/8 x 11 in.</description></item>
            <item><term>PaperSizeFolio</term><description>Folio 8.5 x 13 in.</description></item>
            <item><term>PaperSizeISOB4</term><description>B4 (ISO) 250 x 353 mm</description></item>
            <item><term>PaperSizeJapanesePostcard</term><description>Japanese Postcard 100 x 148 mm</description></item>
            <item><term>PaperSizeLedger</term><description>Ledger 17 x 11 in.</description></item>
            <item><term>PaperSizeLegal</term><description>Legal 8.5 x 14 in.</description></item>
            <item><term>PaperSizeLegalExtra</term><description>	Legal Extra 9.275 x 15 in.</description></item>
            <item><term>PaperSizeLetter</term><description>Letter 8.5 x 11 in.</description></item>
            <item><term>PaperSizeLetterExtra</term><description>Letter Extra 9.275 x 11 in.</description></item>
            <item><term>PaperSizeLetterPlus	</term><description>Letter Plus 8.5 x 12.69 in.</description></item>
            <item><term>PaperSizeLetterSmall</term><description>Letter Small 8.5 x 11</description></item>
            <item><term>PaperSizeLetterTransverse</term><description>Letter Transverse 8.275 x 11 in.</description></item>
            <item><term>PaperSizeNote</term><description>Note 8.5 x 11 in.</description></item>
            <item><term>PaperSizeQuarto</term><description>Quarto 215 x 275 mm</description></item>
            <item><term>PaperSizeStatement</term><description>	Statement 5.5 x 8.5 in.</description></item>
            <item><term>PaperSizeTabloid</term><description>Tabloid 11 x 17 in.</description></item>
            <item><term>PaperSizeTabloidExtra</term><description>Tabloid Extra 11.69 x 18 in.</description></item>
            <item><term>PaperSizeWindows</term><description>Printer default</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintPaperSource">
            <summary>
            Returns or specifies the paper source to use for the current default
            Windows printer.
            </summary>
            <remarks>
            Values:
            <para>PaperSourceAuto</para>
            <para>PaperSourceCasette</para>
            <para>PaperSourceEnvelope</para>
            <para>PaperSourceEnvManual</para>
            <para>PaperSourceFormSource</para>
            <para>PaperSourceLargeCapacity</para>
            <para>PaperSourceLargeFmt</para>
            <para>PaperSourceLower</para>
            <para>PaperSourceManual</para>
            <para>PaperSourceMiddle</para>
            <para>PaperSourceSmallFmt</para>
            <para>PaperSourceTractor</para>
            <para>PaperSourceUpper</para>
            <para>PaperSourceWindows (The default.)</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintCharsPerLine">
            <summary>
            Specifies the maximum number of characters that can be printed on a single
            line. 
            </summary>
            <remarks>
            If a line longer than this is passed down from the host, 
            the terminal automatically wraps the line. 
            This property affects all printing operations.
            Any number between 1 and 32,767; the range of legal values and the default 
            are determined by your printer driver.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator..
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>        
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintFitUser">
            <summary>
            Returns or specifies whether to print host print jobs or terminal screens
            to a user-defined form size. 
            </summary>
            <remarks>
            When this property is true, 
            the terminal scales printed output to fit the size you define using the 
            PrintFitUserLength and PrintFitUserWidth properties.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintFitUserLength">
            <summary>
            Returns or specifies the length of the form to print to when the 
            PrintFitUser property is true. 
            </summary>
            <remarks>
            The value is expressed in percent
            reduction (less than 100%) or expansion (greater than 100%). 
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintFileExistsAction">
            <summary>
            Returns or specifies what the terminal does when you send a print
            job to an existing file. 
            </summary>
            <remarks>
            This property is relevant only when the
            PrintToFile property is set to true. Use the PrintFileName property
            to specify the print file name.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>Append</term><description>Adds the information to the end of the existing file.</description></item>
            <item><term>AskUser</term><description> Prompts the user to select an option. (The default.)</description></item>
            <item><term>AutoNumber</term><description>Creates a new file by adding an incremented number to the existing filename.</description></item>
            <item><term>OpenError</term><description>Causes the print job to fail and return an error.</description></item>
            <item><term>Overwrite</term><description>Replaces the existing file with the new information.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintFileName">
            <summary>
            Returns or specifies the name of the file to receive print jobs
            when the PrintToFile property is set to true. 
            </summary>
            <remarks>
            Use the PrintFileExistsAction to determine what happens when the specified 
            file already exists.
            The default value is "".
            This string can be up to 260 characters long.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>        
            /// <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception>                
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintToFile">
            <summary>
            Returns or specifies the destination of the terminal print jobs.
            </summary>
            <remarks>
            When this property is true, the terminal sends print jobs to a file. 
            Use PrintFileName to specify the file name. Use PrintFileExistsAction
            to determine what happens if the specified file already exists.
            <para>When this property is false, the terminal sends print jobs to the printer.</para>
            This property affects screen printing, 3270 printer sessions, and 5250 
            printer sessions.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintCharsPerInch">
            <summary>
            Specifies how many characters to print per inch. 
            </summary>
            <remarks>
             If the PrintProportionalCPI property is set to true, 
            PrintCharsPerInch is disregarded. In this case, the number of 
            characters printed per inch is determined by the current printer font.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>cpi5</term><description>Prints 5 characters per inch.</description></item>
            <item><term>cpi6</term><description>Prints 6 characters per inch.</description></item>
            <item><term>cpi8</term><description>Prints 8 characters per inch.</description></item>
            <item><term>cpi10</term><description>Prints 10 characters per inch. (The default.)</description></item>
            <item><term>cpi12</term><description>Prints 12 characters per inch.</description></item>
            <item><term>cpi13</term><description>Prints 13 characters per inch.</description></item>
            <item><term>cpi15</term><description>Prints 15 characters per inch.</description></item>
            <item><term>cpi17</term><description>Prints 17 characters per inch.</description></item>
            <item><term>cpi20</term><description>Prints 20 characters per inch.</description></item>
            <item><term>cpi22</term><description>Prints 22 characters per inch.</description></item>
            <item><term>cpi27</term><description>Prints 27 characters per inch.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintCompressFont">
            <summary>
            Returns or specifies whether composed Thai characters are vertically compressed while printing to make them more legible.
            </summary>
            <remarks>
            This setting applies only to Thai language versions of the terminal.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintDbcs2To3">
            <summary>
            Returns or specifies whether to widen double-byte characters to 1.5
            times their default size when printing host print jobs and terminal
            screens to make them more legible. 
            </summary>
            <remarks> 
            When this property is true, 
            the terminal widens double-byte characters so that two characters occupy the 
            same number of spaces as three single-byte characters.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintDbcsHorzFontSize">
            <summary>
            Returns or specifies whether the terminal doubles the horizontal size
            of double-byte characters when it prints host screens or print jobs
            to make them more legible.
            </summary>
            <remarks>
            <list type="bullet"><listheader><term>Values:</term></listheader>
            <item><term>Print1X</term><description>Uses the default size.</description></item>
            <item><term>Print2X</term><description>Doubles the horizontal size of characters.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintDbcsRotationAngle">
            <summary>
            Returns or specifies whether to rotate characters 270 degrees when 
            printing host print jobs or terminal screens. 
            </summary>
            <remarks>
            Rotating characters 270 degrees presents host print jobs that contain double-byte characters
            in a traditional, top-to-bottom, left-to-right alignment.
            This setting is applicable to double-byte character sets only.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>PrintRotate0</term><description>Does not rotate characters. (The default.)</description></item>
            <item><term>PrintRotate270</term><description> Rotates characters 270 degrees.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintDbcsSmallerFont">
            <summary>
            Returns or specifies whether to print double-byte characters
            using a smaller font size. 
            </summary>
            <remarks>
            When this property is false, the
            font size is normal. When it is true, the terminal 
            uses a smaller font size.
            This property applies to 5250 sessions only.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintFormFeedOnEndOfJob">
            <summary>
            Returns or specifies whether the terminal sends a form feed to
            the host printer at the end of print jobs.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintSosiPresentation">
            <summary>
            Returns or specifies how the terminal treats shift-out and shift-in (SO/SI) characters when printing host print
            jobs or terminal screens.
            This property is applicable to 5250 sessions only.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader> 
            <item>
            <term>Blank</term>
            <description>Shift-out/shift-in (SO/SI) characters are printed as blank spaces. Use this option for WYSIWYG printing. (The default.)</description>
            </item>
            <item>
            <term>NoPosition</term>
            <description>SO/SI characters and the cells they occupy are removed, and the remaining text is collapsed. 
            Removing cells that contain SO/SI characters changes the spacing of the text and can potentially cause 
            columns to go out of alignment. </description>
            </item>
            <item>
            <term>SONoPosSI2Pos</term>
            <description>Shift Out (SO) characters are removed, double-byte characters are shifted one cell to the left, 
            and SI characters are printed as two blank spaces. This option preserves the alignment of columns in host print jobs.
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintSquareAspectRatio">
            <summary>Returns or specifies whether the terminal preserves the dimensions
            of the graphics display when it prints, ensuring that objects maintain
            their correct proportions and shapes.</summary>
            <remarks>This setting is valid in 3179G terminal sessions only.</remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintSuppressBlankPage">
            <summary>
            Returns or specifies whether blank pages are suppressed. 
            </summary>
            <remarks>
            When this property
            is true, the terminal suppresses blank pages on host print jobs. When it is 
            false, the terminal does not suppress blank pages.  
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions.PrintScreen(Attachmate.Reflection.Emulation.IbmHosts.PrintScreenOption,System.Int32)">
            <summary>Prints the selected text or the entire terminal screen.</summary>
            <param name="option">Print option. See PrintScreenOption for more information.</param>
            <param name="copies">The number of copies. The range for this argument is 1-99.</param>
            <returns>Method return code.</returns>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IScreenRegion">
            <summary>
            Defines an area on the host screen for selecting text.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IScreenRegion.Parent">
            <summary>
            Gets the parent object. The parent is the IIbmScreen object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IScreenRegion.StartRow">
            <summary>
            The starting row of the region.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IScreenRegion.StartColumn">
            <summary>
            The starting column of the region.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IScreenRegion.EndRow">
            <summary>
            The ending row of the region.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IScreenRegion.EndColumn">
            <summary>
            The ending column of the region.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IScreenRegion.CurrentSelectionMode">
            <summary>
            The current selection mode of the region.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ITheme">
            <summary>Defines properties and methods to load, modify, or save a Reflection theme.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ITheme.Parent">
            <summary>
            Gets the parent object. The parent is the IIbmTerminal object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ITheme.FileName">
            <summary>
            Gets or sets the theme template to use. Setting this loads a new theme.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ITheme.ThemeColor">
            <summary>
            Gets the color map object associated with the theme.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ITheme.Font">
            <summary>
            Gets the font object associated with the theme.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ITheme.Cursor">
            <summary>
            Gets the cursor object associated with the theme.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ITheme.Sounds">
            <summary>
            Gets the sounds object associated with the theme.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ITheme.Modified">
            <summary>
            Returns the modified state of the theme.
            True = theme has been modified since last save, false if not.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ITheme.Save">
            <summary>
            Saves changes to current theme
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while trying to save the theme.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to save the theme.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ITheme.SaveAs(System.String)">
            <summary>
            Saves current theme contents to a file
            </summary>
            <param name="pathName">The path to the new theme</param>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while trying to save the theme.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to save the theme.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ITheme.Load(System.String)">
            <summary>
            Loads a new theme into the current session document       
            </summary>
            <param name="pathName">The path to the new theme</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ITheme.ResetTheme">
            <summary>
            Abandons changes made in the "dirty" state and reloads/applies last saved settings.
            </summary>        
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor">
            <summary>
            Defines the attributes (such as shape) of the cursor displayed within a Reflection theme.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor.Parent">
            <summary>
            Gets the parent object. The parent is the ITheme object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor.CursorShape">
            <summary>
            Gets or sets the appearance of the cursor in the terminal window
            </summary>
            <remarks>This is stored as a string in the theme.</remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor.CursorBlinkRate">
            <summary>
            Gets or sets the speed at which the cursor blinks in the terminal window. 
            </summary>
            <remarks>This is stored as a string in the theme.</remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor.RulerCursorType">
            <summary>
            	<para>Gets or sets the appearance of the ruler cursor.</para>
            	<para></para>
            </summary>
            <remarks>Use the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor.RulerCursorVisible">RulerCursorVisible</see> property to specify whether the ruler cursor should be displayed.</remarks>
            <value>The default value is CrossHair.</value>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor.RulerCursorVisible">
            <summary>Gets or sets whether the ruler cursor is displayed in the terminal window.</summary>
            <remarks>Use the <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor.RulerCursorType">RulerCursorType</see> property to specify the configuration you want.</remarks>
            <value>
            	<para>The default value is False.</para>
            	<para>When this property is True, horizontal or vertical lines extend through the cursor. </para>
            </value>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor.GraphicsCursorShape">
            <summary>Gets or stes the shape of the graphics cursor in 3179-G terminal sessions.</summary>
            <remarks>This property is only valid for 3270 display sessions.</remarks>
            <value>The default value is Cross.</value>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor.GraphicsCrosshairColor">
            <summary>Gets or sets the color of the graphics crosshair cursor in a 3179-G terminal session.</summary>
            <remarks>This is only valid for  3270 terminal sessions emulating the Extended terminal models.</remarks>
            <value>The default value is Green.</value>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor.RestrictCursorMovement">
             <summary>
             Returns or specifies whether the cursor is restricted to input fields 
             in the terminal window.
             When this property is set to True, the cursor can only be moved within
             or between input fields. If you press Up, for example, the cursor moves up
             to the next input field.
             When this property is False, the cursor can be moved out of an input field. 
             Trying to enter text outside of an input field results in an error.
            
             This property is only relevant for 5250 terminal sessions.
             </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor.HorizontalCursorSpeed">
            <summary>Returns or specifies how many character spaces to move the cursor, either to the left (on LeftDouble function), or to the right (on a RightDouble
            function). This property affects 5250 terminal sessions.</summary>
            <remarks>The default is 3.
            The range of values is 1-40.</remarks>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor.VerticalCursorSpeed">
            <summary>Returns or specifies how many lines to move the cursor, either up (on an UpDouble function), or down (on a DownDouble function). function). This
            property affects 5250 terminal sessions.</summary>
            <remarks>The default is 2.
            The range of values is 1-12.</remarks>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IThemeFont">
            <summary>
            Defines the font attributes (such as font name, font size) for terminal fonts within a Reflection theme.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeFont.Parent">
            <summary>
            Gets the parent object. The parent is the ITheme object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeFont.FontName">
            <summary>Gets or sets the face name of the terminal font to use.</summary>
            <remarks>
            	<para>Available fonts are listed in the Fonts list on the Appearance tab.  Font names are case-sensitive.</para>
            	<para>By default, Reflection uses the font called Segoe UI Mono. This provides a 24 × 80 display that accurately emulates the terminal. When you resize the terminal
            window, by default (for any font) Reflection chooses a new font size so the correct number of rows is displayed on the screen.</para>
            </remarks>
            <value>The default is "Segoe UI Mono".<br/>
            This string can be up to 260 characters long.</value>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeFont.Bold">
            <summary>
            Gets or sets whether the terminal font has the bold attribute.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeFont.DisplayVariableWidthFonts">
            <summary>whether variable width fonts are included in the list of fonts that appears in the Fonts section of the Theme Settings</summary>
            <value>The default value is True.</value>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeFont.AutoFontSize">
            <summary>Gets or sets whether font size is auto adjusted when terminal window size changed.</summary>
            <value>
            	<para>The default value is True.</para>
            	<para>When this property is True, Reflection automatically adjusts the font size so that the entire terminal display is always visible.<br/>
            When this property is False, Reflection uses the font size specified by FontSize. Scroll bars appear when the Reflection window size is too small to show the
            entire terminal window display.</para>
            	<para></para>
            	<para></para>
            </value>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeFont.FontSize">
            <summary>Gets or sets the size of the terminal session font in points</summary>
            <remarks>This property has no effect when <see cref="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeFont.AutoFontSize">AutoFontSize</see> is True (the default).</remarks>
            <value>
            	<para>The default value is 12.</para>
            	<para>The range of values is 3 to 72. If you select a value within this range that is not supported by the current font, Reflection substitutes a similar font
            size. Values outside this range return an error.</para>
            </value>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.IThemeSounds">
            <summary>Defines the sounds played when events (such as Connected and Disconnected) occur during Reflection sessions.</summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeSounds.Parent">
            <summary>
            Gets the parent object. The parent is the ITheme object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeSounds.ConnectEventSound">
            <summary>
            Gets or sets the path to the sound file that is played when
            the session is connected.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeSounds.DisconnectEventSound">
            <summary>
            Gets or sets the path to the sound file that is played when
            the session is disconnected.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeSounds.FieldEnterEventSound">
            <summary>
            Gets or sets the path to the sound file that is played when
            the cursor enters a field in a display session.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.IThemeSounds.ScreenChangedEventSound">
            <summary>
            Gets or sets the path to the sound file that is played when
            a new screen is displayed in the display session.        
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.KeepAlivePacketsOption">
            <summary>
            Defines options that specify how Reflection periodically polls the host to 
            determine if Telnet connections remain active during intervals when data is not sent to the host. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.KeepAlivePacketsOption.KeepAliveNone">
            <summary>
            No keep alive packets are sent to the host.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.KeepAlivePacketsOption.KeepAliveSystem">
            <summary>
            The TCP/IP stack keeps track of the host connection. This value requires less 
            system resources than KeepAliveTimingMark or KeepAliveNOP, but most 
            TCP/IP stacks send Keep Alive packets infrequently.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.KeepAlivePacketsOption.KeepAliveNOP">
            <summary>
            A No Operation (NOP) command is periodically sent to the host. The 
            gateway and host are not required to respond to these commands, but the TCP/IP
            stack can detect if there was a problem delivering the packet. Use KeepAliveTimeout
            to control the interval between requests.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.KeepAlivePacketsOption.KeepAliveTimingMark">
            <summary>
            A Timing Mark Command is periodically sent to the host to determine if the 
            connection is still active. The gateway or host should respond to these commands. If 
            Reflection does not receive a response or there is an error sending the packet, it 
            shuts down the connection. Use KeepAliveTimeout to control the interval between requests. 
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.KeyboardErrorResetOption">
            <summary>
            Defines options that specify how keyboard errors are processed. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.KeyboardErrorResetOption.NoAutoReset">
            <summary>
            This is standard terminal behavior. Users must press Reset to clear the error message from the 
            5250 error line before they can resume data entry.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.KeyboardErrorResetOption.AutoReset">
            <summary>
            Users do not need to press Reset to clear a keyboard error. The next key they press clears the error, 
            restores the previous error line data, and attempts to execute the keystroke.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.KeyboardErrorResetOption.AutoResetNoMessage">
            <summary>
            No error is reported and Reflection attempts to execute the keystroke.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapper">
            <summary>
            Provides the ability to view keyboard mappings for the terminal session, and to
            remap keys programmatically.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapper.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IKeyboardMapper,Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapper"/> class. 
            </summary>
            <param name="keyboardMapper">
            remote keyboard mapper instance
            </param>
            <param name="terminal">
            Parent terminal object
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapper.Parent">
            <summary>
            <c>Gets</c> the parent object (IIbmTerminal).
            </summary>
            <example>
            <code>
            private IIbmTerminal terminal;
            private KeyboardMapper mapper;
            //Get the IbmTerminal parent object.
            terminal = mapper.Parent;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapper.KeyMap">
            <summary>
            <c>Gets</c> or <c>sets</c> the name of the keymap file.
            </summary>
            <remarks>
            When setting the filename, if the value is not a full path, Reflection searches 
            the user's Reflection data folder and the Built-Ins/Keyboard Maps folder.
            <para>If the file cannot be found there, or the full path passed in does not exist,
            a FileNotFoundException is thrown.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private KeyMapper mapper;
            
            //Set the full path as a keymap.
            mapper.KeyMap = "Full path";
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapper.MappingCollection">
            <summary>
            Gets a set of all the keys that have been remapped in the current keyboard map.
            </summary>
            <example>
            <code>
            private KeyMapper mapper;
            private KeyboardMapping[] Keymap;
            //Get collection of keys.
            keymap = mapper.MappingCollection;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapper.AddMapping(Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapping)">
            <summary>
            Adds a key mapping to the current keyboard map.
            </summary>
            <param name="mapping">
            A mapping between a key sequence and a set of actions to perform when
            that key sequence is pressed in a host session.
            </param>
            <remarks>
            A key can also be remapped to do nothing if the InputMapActionSequence specified in 
            mapping.Mapping has no InputMapActions added to it.
            </remarks>
            <example>
            <code>
            private IIbmTerminal terminal;
            private IKeyboardMapper mapper;
            
            public void AddMap(KeyboardMapping map)
            {
               if(terminal != null)
               {
                  mapper = terminal.KeyboardMapper;
                  mapper.AddMapping(KeyboardMapping map);
               }
               else
                  Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapper.RemoveMapping(System.Windows.Forms.Keys)">
            <summary>
            Removes a key mapping from the keyboard map. 
            </summary>
            <remarks>
            Use this method only to remove non-extended keys.
            </remarks>
            <param name="key">The key mapping to remove.</param>
            <example>
            <code>
            private IIbmTerminal terminal;
            private IKeyboardMapper mapper;
            
            public void RemoveMap(Keys key)
            {
               if(terminal != null)
               {
                  mapper = terminal.KeyboardMapper;
                  mapper.RemoveMapping(key);
               }
               else
                  Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapper.RemoveMapping(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Removes a key mapping from the keyboard map.
            </summary>
            <param name="key">The key sequence to remove the mapping for.</param>
            <param name="isExtendedKey">
            Indicates whether this key is an extended key. For IBM Enhanced 101- and 102-key keyboards, 
            extended keys are the right ALT and the right CTRL keys on the main keyboard; 
            the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys
            to the left of the numeric keypad; and the slash (/) and ENTER
            keys in the numeric keypad.
            </param>
            <example>
            <code>
            private IIbmTerminal terminal;
            private IKeyboardMapper mapper;
            
            public void RemoveMap(Keys key)
            {
               if(terminal != null)
               {
                  mapper = terminal.KeyboardMapper;
                  mapper.RemoveMapping(key,true);
               }
               else
                  Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapper.Contains(System.Windows.Forms.Keys)">
            <summary>
            Returns whether the current keyboard map has a mapping for a specified key combination. 
            </summary>
            <remarks>
            This method only works for non-extended keys.
            </remarks>
            <param name="key">The key sequence to query for.</param>
            <returns>True if the current keyboard map contains a mapping for key, false if not.</returns>
            <example>
            <code>
            private IIbmTerminal terminal;
            private IKeyboardMapper mapper;
            
            public void ContainsMap(Keys key)
            {
               if(terminal != null)
               {
                  mapper = terminal.KeyboardMapper;
                  bool Iscontain = mapper.Contains(key);
               }
               else
                  Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapper.Contains(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Returns whether the current keyboard map has a mapping for a specified key combination. 
            </summary>
            <param name="key">The key sequence to query for.</param>
            <param name="isExtendedKey">
            Indicates whether this key is an extended key. For IBM Enhanced 101- and 102-key keyboards, 
            extended keys are the right ALT and the right CTRL keys on the main keyboard; 
            the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys
            to the left of the numeric keypad; and the slash (/) and ENTER
            keys in the numeric keypad.
            </param>
            <returns><c>True</c> if the current keyboard map contains a mapping for key, <c>false</c> if not.</returns>
            <example>
            <code>
            private IIbmTerminal terminal;
            private IKeyboardMapper mapper;
            
            public void ContainsMap(Keys key)
            {
               if(terminal != null)
               {
                  mapper = terminal.KeyboardMapper;
                  bool Iscontain = mapper.Contains(key,true);
               }
               else
                  Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapper.Save">
            <summary>
            Saves changes to the current keyboard map.
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O (input/output) error occurred while trying to save the keyboard map.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to save the keyboard map.
            </exception>
            <example>
            <code>
            private IIbmTerminal terminal;
            private IKeyboardMapper mapper;
            
            public void SaveCurrentMap()
            {
               if(terminal != null)
               {
                  mapper = terminal.KeyboardMapper;
                  mapper.Save();
               }
               else
                  Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapper.SaveAs(System.String)">
            <summary>
            Saves the current keyboard map contents to a file.
            </summary>
            <param name="pathName">The path to the new keyboard map file.</param>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while trying to save the keyboard map.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to save the keyboard map.
            </exception>
            <example>
            <code>
            private IIbmTerminal terminal;
            private IKeyboardMapper mapper;
            
            public void SaveNewMap()
            {
               if(terminal != null)
               {
                  mapper = terminal.KeyboardMapper;
                  mapper.SaveAs("NewKeyboardMap.xkb");
               }
               else
                  Console.Writeline("No terminal exists.");
            }
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.Macro">
            <summary>
            Methods, properties, and events associated with running or recording macros in Reflection.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IMacro,Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.Macro"/> class. 
            </summary>
            <param name="macro">
            remote macro instance
            </param>
            <param name="terminal">
            The parent terminal object
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Macro.Parent">
            <summary>
            Gets the parent object (IIbmTerminal).
            </summary>
            <example>
            <code>
            private Macro mac;
            private IbmTerminal terminal;
            
            terminal = mac.Parent;
            terminal.Connect();
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Macro.Recording">
            <summary>
            Gets a value indicating whether the macro recorder is currently recording.
            </summary>
            <example>
            <code>
            private Macro mac;
            //Gets the macro recorder Value.
            bool IsRecording = mac.Recording; 
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Macro.RecordingPaused">
            <summary>
            Gets a value indicating whether the macro recorder is currently paused.
            </summary>
            <example>
            <code>
            private Macro mac;
            //Get the value if the recording paused or not.
            bool IsPaused = mac.RecordingPaused;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Macro.Script">
            <summary>
            <c>Gets</c> the current macro recording script, if any. 
            </summary>
            <remarks>
            If no scripts are currently recording, it returns String.Empty.
            </remarks>
            <example>
            <code>
            private Macro mac;
            //Get the Current macro script.
            string script= mac.Script;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Macro.Data">
            <summary>Gets or sets a string to a variable as data that could be used during macro execution.</summary>
            <value>
            <para>The default value is "". This string can be up to 260 characters long.</para>
            <para></para>
            </value>
            <exception caption="" cref="T:System.ArgumentException">
            This exception is thrown if the set parameter is longer than the maximum allowed.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.ShowMacroDialog">
            <summary>
            Displays the Run Macro dialog box.
            </summary>
            <example>
            <code>
            private Macro mac;
            //call the ShowMacroDialog() method.
            mac.ShowMacroDialog();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.StartMacroRecording">
             <summary>
             Starts recording a macro in the current terminal session.
             </summary>
             <example>
             <code>
             private Macro mac;
            
             mac.Recording = true;
             mac.StartMacroRecording();
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.PasswordBox(System.String,System.String)">
            <summary>
            Displays a prompt for the Password dialog box.
            </summary>
            <param name="prompt">The prompt string for the dialog box.</param>
            <param name="title">The dialog box caption.</param>
            <returns>The string entered in the dialog's text box.</returns>
            <example>
            <code>
            class Program
            {
              private Macro mac;
              private string password;
              
              public string GetPassword()
              {
                password = mac.PasswordBox("Prompt","Macro");
                return password;
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.StopMacroRecording(Attachmate.Reflection.Emulation.IbmHosts.MacroDestinationOption,System.String)">
            <summary>
            Stops the macro recorder in the current terminal session, and saves the macro.
            </summary>
            <param name="saveLocation">
            The location to which the macro is saved. 
            MacroDestinationOption.Document saves the macro to the session document's VBA project.
            MacroDestinationOption.CommonProject saves the macro to the Common VBA project.
            MacroDestinationOption.Clipboard copies the macro script to the Windows Clipboard.
            </param>
            <param name="macroName">
            The name of the saved macro. This parameter is ignored if saveLocation is Clipboard.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the macro name is null, empty, or contains invalid characters.
            </exception>
            <example>
            <code>
            class Program
            {
              private Macro mac;
                 
              public void StopRecording()
              {
                mac.StopMacroRecording(MacroDestinationOption.Clipboard,"");    
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.PauseRecording">
            <summary>
            Pauses the macro recorder in the current terminal session. 
            </summary>
            <remarks>
            This method is valid only when the macro recorder is running. 
            The method does nothing if the recorder is already paused.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the macro recorder is not currently recording.
            </exception>
            <example>
            <code>
            private Macro mac;
            //Call The PauseRecording method.
            mac.PauseRecording();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.ResumeRecording">
            <summary>
            Resumes recording a macro in the current terminal session. 
            </summary>
            <remarks>
            This method is valid only when the macro recorder is running. 
            The method does nothing if the recorder is already paused.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the macro recorder is not currently recording.
            </exception>
            <example>
            <code>
            private Macro mac;
            //Call the ResumeRecording() method.
            mac.ResumeRecording();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.GetMacroNames(Attachmate.Reflection.Emulation.IbmHosts.MacroEnumerationOption)">
            <summary>
            <c>Gets</c> a list of existing macro names.
            </summary>
            <param name="macroSource">
            The location from which to get a list of macro names.
            MacroEnumerationOption.Document gets the list from this session document's VBA project.
            MacroEnumerationOption.CommonProject gets the list from the Common VBA project.
            </param>
            <returns>
            A set of macro names. The set may be empty if there are no existing macros.
            </returns>
            <example>
            <code>
            class Program
            {
              private Macro mac;
              private string[] macroNames;
                 
              public string[] StopRecording()
              {
                macroNames = mac.GetMacroNames(MacroEnumerationOption.CommonProject); 
                return macroNames;
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.RunMacro(Attachmate.Reflection.Emulation.IbmHosts.MacroEnumerationOption,System.String)">
             <summary>
             Runs a macro.
             </summary>
             <param name="macroSource">
             The location of the macro. 
             MacroEnumerationOption.Document indicates that the macro resides in the session document's VBA project.
             MacroEnumerationOption.Common indicates that the macro resides in the Common VBA project.
             </param>
             <param name="macroName">The name of the macro to run.</param>
             <example>
             <code>
             private Macro mac;
            
             mac.RunMacro(MacroEnumerationOption.Document,"Module1.Macro1");
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.RunMacro(Attachmate.Reflection.Emulation.IbmHosts.MacroEnumerationOption,System.String,System.String)">
             <summary>
             Runs a macro.
             </summary>
             <param name="macroSource">
             The location of the macro. 
             MacroEnumerationOption.Document indicates that the macro resides in the session document's VBA project.
             MacroEnumerationOption.Common indicates that the macro resides in the Common VBA project.
             </param>
             <param name="macroName">The name of the macro to run.</param>
             <param name="macroParameter">Parameter to pass to the macro.</param>
             <example>
             <code>
             private Macro mac;
            
             mac.RunMacro(MacroEnumerationOption.Document,"Module1.Macro1","Data1");
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.RunMacro(Attachmate.Reflection.Emulation.IbmHosts.MacroEnumerationOption,System.String,System.Object[])">
             <summary>
             Runs a macro.
             </summary>
             <param name="macroSource">
             The location of the macro. 
             MacroEnumerationOption.Document indicates that the macro resides in the session document's VBA project.
             MacroEnumerationOption.Common indicates that the macro resides in the Common VBA project.
             </param>
             <param name="macroName">The name of the macro to run.</param>
             <param name="macroParameters">Parameters to pass to the macro.</param>
             <example>
             <code>
             private Macro mac;
            
             mac.RunMacro(MacroEnumerationOption.Document,"Module1.Macro1",new object[]{"Data1","Data2"});
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.StopMacro">
            <summary>
            Stops a currently running macro. 
            </summary>
            <remarks>
            This has no effect unless a macro is running in the
            current terminal session.
            </remarks>
            <example>
            <code>
            private Macro mac;
            //Call StopMacro() method.
            mac.StopMacro();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.RunExternalLegacyReflectionMacro(System.String,System.String,System.String)">
            <summary>
            Runs a legacy Reflection macro from an external file (that is, a file that is not currently in use). 
            </summary>
            <param name="macroFileName">
            The path and name of the file that contains the macro you want to run. An error is returned if you specify 
            an invalid or nonexistent file.
            </param>
            <param name="macroName">
            The macro you want to run. An error is returned if the macro does not exist.
            </param>
            <param name="macroData">
             An optional string to pass information to the macro.
            </param>
            <example>
            <code>
            private Macro mac;
            //Call RunExternalLegacyReflectionMacro() method .
            mac.RunExternalLegacyReflectionMacro("SharedMacros.Login","Login","");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.RunLegacyReflectionMacro(System.String,System.String)">
            <summary>
            Runs a legacy Reflection macro.
            </summary>
            <param name="macroName">
            Specifies the name of the macro to run. 
            An error occurs if there is no macro of this name in the current settings file 
            or in any referenced files. This value can be up to 255 characters long.
            If you have more than one macro with the same name in different files, precede 
            the macro name with the project name and a period to correctly  
            identify the macro. For example, "SharedMacros.Login" identifies 
            the "Login" macro in the "SharedMacros" settings file.
            </param>
            <param name="macroData">
            An optional string to pass information to the macro.
            </param>
            <example>
            <code>
            private Macro mac;
            //Call RunLegacyReflectionMacro() method.
            mac.RunLegacyReflectionMacro("Login","Data");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.RunLegacyReflectionMacroFile(System.String,System.String)">
            <summary>
            Runs the legacy Reflection macro that in the specified macro file.
            </summary>
            <param name="fileName">
            The name of a macro file. Include full path information if the macro file is not 
            in the current folder.
            </param>
            <param name="macroData">
            An optional string to pass information to the macro.
            </param>.
            <example>
            <code>
            private Macro mac;
            //Call RunLegacyReflectionMacroFile() method.
            mac.RunLegacyReflectionMacroFile("SharedMacros.Login","");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.RunLegacyExtraMacro(System.String)">
            <summary>
            Runs a legacy EXTRA! macro.
            </summary>
            <param name="macroName">
            Specifies the full pathname of the macro to run. 
            </param>        
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the macro file does not exist.
            </exception>
            <remarks>
            Assumes that the EXTRA! Basic runtime is installed.
            </remarks>
            <example>
            <code>
            private Macro mac;
            //Call RunExternalLegacyReflectionMacro() method .
            mac.RunExternalLegacyReflectionMacro("Login");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.RunPcommMacro(System.String)">
            <summary>
            Runs an IBM Personal Communications macro.
            </summary>
            <param name="macroName">
            Specifies the full pathname of the macro to run. 
            </param>        
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the macro file does not exist.
            </exception>
            <example>
            <code>
            private Macro mac;
            //Call RunPcommMacro() method .
            mac.RunPcommMacro(@"C:\Users\[userID]\Documents\test.mac");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.RunRumbaMacro(System.String)">
            <summary>
            Runs a Micro Focus RUMBA macro.
            </summary>
            <param name="macroName">
            Specifies the full pathname of the macro to run. 
            </param>        
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the macro file does not exist.
            </exception>
            <example>
            <code>
            private Macro mac;
            //Call RunRumbaMacro() method .
            mac.RunRumbaMacro(@"C:\Users\[userID]\Documents\test.rmc");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.RunHostExplorerMacro(System.String)">
            <summary>
            Runs a HostExplorer macro.
            </summary>
            <param name="macroName">
            Specifies the full pathname of the macro to run. 
            </param>        
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the macro file does not exist.
            </exception>
            <example>
            <code>
            private Macro mac;
            //Call RunHostExplorerMacro() method .
            mac.RunHostExplorerMacro(@"C:\Users\[userID]\Documents\test.ebs");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.RunQwsMacro(System.String)">
            <summary>
            Runs a QWS macro.
            </summary>
            <param name="macroName">
            Specifies the full pathname of the macro to run. 
            </param>        
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the macro file does not exist.
            </exception>
            <example>
            <code>
            private Macro mac;
            //Call RunQwsMacro() method .
            mac.RunQwsMacro(@"C:\Users\[userID]\Documents\test.jgs");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.RunExpressMacro(System.String)">
            <summary>
            Runs an Express macro.
            </summary>
            <param name="macroName">
            Specifies the full pathname of the macro to run. 
            </param>        
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the macro file does not exist.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.Dispose(System.Boolean)">
            <summary>
            Disposes the current instance of the Macro class.
            </summary>
            <param name="disposing">Whether the instance is being disposed (true) or finalized (false)</param>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.Macro.MacroStarted">
            <summary>
            Raised when a Reflection macro has started. This does not apply to legacy
            Reflection macros nor legacy EXTRA! macros.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.OnMacroStarted(System.EventArgs)">
            <summary>
            Fire MacroStarted event
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.MacroStartedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.Macro.MacroCompleted">
            <summary>
            Raised when a Reflection macro has completed. This does not apply to legacy
            Reflection macros nor legacy EXTRA! macros.
            </summary>        
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.OnMacroCompleted(System.EventArgs)">
            <summary>
            Fire MacroCompleted event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.MacroCompletedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.Macro.ExpressMacroStarted">
            <summary>
            Raised when an Express macro has started.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.OnExpressMacroStarted(System.EventArgs)">
            <summary>
            Fire ExpressMacroStarted event
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.ExpressMacroStartedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:Attachmate.Reflection.Emulation.IbmHosts.Macro.ExpressMacroCompleted">
            <summary>
            Raised when an Express macro has completed.
            </summary>        
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.OnExpressMacroCompleted(System.EventArgs)">
            <summary>
            Fire MacroCompleted event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Macro.ExpressMacroCompletedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.MacroDestinationOption">
            <summary>
            Indicates the location to which a macro is saved.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MacroDestinationOption.Document">
            <summary>
            Saves the macro to the current document's VBA project.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MacroDestinationOption.CommonProject">
            <summary>
            Saves the macro to the Common VBA project.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MacroDestinationOption.Clipboard">
            <summary>
            Saves macro script text to the Windows Clipboard.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.MacroEnumerationOption">
            <summary>
            Indicates the source location of a macro.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MacroEnumerationOption.Document">
            <summary>
            Macros come from the current document's VBA project.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MacroEnumerationOption.CommonProject">
            <summary>
            Macros come from Common VBA project.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MacroEnumerationOption.LegacyVBAProject">
            <summary>
            Macros from Legacy VBA Project
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.MouseClickCount">
            <summary>
            Number of single or double mouse clicks used for a Mouse Map mapping.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MouseClickCount.SingleClick">
            <summary>
            Single button click.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MouseClickCount.DoubleClick">
            <summary>
            Double button click. This is a placeholder value for future use; This value
            is currently not supported and should not be used.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.MouseWheelDirection">
            <summary>
            Mouse wheel scroll direction used for a Mouse Map mapping.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MouseWheelDirection.None">
            <summary>
            Undefined - no wheel mapping
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MouseWheelDirection.WheelDown">
            <summary>
            Mouse wheel scrolling down.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MouseWheelDirection.WheelUp">
            <summary>
            Mouse wheel scrolling up.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination">
            <summary>
            Represents the state of a particular mouse button mapping. 
            </summary>
            <remarks>
            A mouse mapping must include the mouse button being mapped, the number of (single or double) mouse clicks, 
            and one or more modifier keys (such as SHIFT, CTRL, or ALT).
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.#ctor">
            <summary>
            Initializes a new instance of the MouseButtonCombination class
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.#ctor(System.Windows.Forms.MouseButtons,System.Windows.Forms.Keys,Attachmate.Reflection.Emulation.IbmHosts.MouseClickCount)">
            <summary>
            Initializes a new instance of the MouseButtonCombination class.
            </summary>
            <param name="button">The mouse button associated with the combination.</param>
            <param name="modifierKeys">The modifier keys associated with the combination.</param>
            <param name="clickCount">The number of mouse clicks associated with the combination.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.#ctor(Attachmate.Reflection.Emulation.IbmHosts.MouseWheelDirection,System.Windows.Forms.Keys)">
            <summary>
            Initializes a new instance of the MouseButtonCombination class.
            </summary>
            <param name="direction">The mouse wheel scroll direction associated with the combination.</param>
            <param name="modifierKeys">The modifier keys associated with the combination.</param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.Button">
            <summary>
            <c>Gets</c> the mouse button associated with the combination.
            </summary>
            <example>
            <code>
            private System.Windows.Forms.MouseButtons mouseButton;
            private MouseButtonCombination mouseCombination;
            //Call The Button property
            mouseButton = mouseCombination.Button;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.WheelDirection">
            <summary>
            <c>Gets</c> the mouse wheel scroll direction associated with the combination.
            </summary>
            <example>
            <code>
            private MouseWheelDirection direction;
            private MouseButtonCombination mouseCombination;
            //Call The WheelDirection property
            direction = mouseCombination.WheelDirection;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.ModifierKeys">
            <summary>
            <c>Gets</c> the modifier key(s) associated with the combination.
            </summary>
            <example>
            <code>
            private System.Windows.Forms.Keys key;
            private MouseButtonCombination mouseCombination;
            //Call The ModifierKeys property
            key = mouseCombination.ModifierKeys;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.ClickCount">
            <summary>
            <c>Gets</c> the number of mouse clicks in the combination.
            </summary>
            <example>
            <code>
            private MouseClickCount mouseClick;
            private MouseButtonCombination mouseCombination;
            //Call The ClickCount property
            mouseClick = mouseCombination.ClickCount;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.ToString">
            <summary>
            Returns a <c>string</c> that represents the current MouseButtonCombination object.
            </summary>
            <returns>A string that represents the current MouseButtonCombination object.</returns>    
            <seealso cref="M:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.ToString"/>
            <example>
            <code>
            private MouseButtonCombination mouseCombination;
            
            string strMouseCombination = mouseCombination.ToString();
            Console.Writeline(strMouseCombination);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns>True if the specified object is equal to the current object; otherwise, false. </returns>
            <seealso cref="M:System.Object.Equals(System.Object,System.Object)"/>
            <example>
            <code>
            private MouseButtonCombination mbc1;
            private MouseButtonCombination mbc2;
            
            bool IsEqual = mbc1.Equals(mbc2);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.op_Equality(Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination,Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination)">
            <summary>
            Determines whether two MouseButtonCombination instances are equal.
            </summary>
            <param name="mbc1">The first MouseButtonCombination instance.</param>
            <param name="mbc2">The second MouseButtonCombination instance.</param>
            <returns>True if the two instances are equal; otherwise false.</returns>
            <example>
            <code>
            class Program
            {
               private MouseButtonCombination mbc1;
               private MouseButtonCombination mbc2;
            
               public MouseButtonCombination MouseCombination1
               {set{mbc1 = value};} 
               public MouseButtonCombination MouseCombination2
               {set{mbc2 = value;}}
            
               public bool CheckEquality()
               {
                  if(mbc1 == mbc2)
                     return true;
                  else
                     return false; 
               }
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.op_Inequality(Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination,Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination)">
            <summary>
            Determines whether two MouseButtonCombination instances are not equal.
            </summary>
            <param name="mbc1">The first MouseButtonCombination instance.</param>
            <param name="mbc2">The second MouseButtonCombination instance.</param>
            <returns>True if the two instances are not equal; otherwise false.</returns>
            <example>
            <code>
            class Program
            {
               private MouseButtonCombination mbc1;
               private MouseButtonCombination mbc2;
            
               public MouseButtonCombination MouseCombination1
               {set{mbc1 = value};} 
               public MouseButtonCombination MouseCombination2
               {set{mbc2 = value;}}
            
               public bool CheckEquality()
               {
                  if(mbc1 != mbc2)
                     return false;
                  else
                     return true; 
               }
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <remarks>
            GetHashCode is suitable for use in hashing algorithms and data structures, such as a hash table.
            </remarks>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.GetSchema">
            <summary>
            Returns an in-memory representation of the XML schema used for SerializableList
            </summary>
            <returns>Null -- not currently implemented.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads in a list type from an xml file
            </summary>
            <param name="reader">where to read the xml from</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes out a list to xml format
            </summary>
            <param name="writer">writes the xml to persistant storage</param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.MouseMapper">
            <summary>
            Methods and properties associated with the session document's mouse map.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseMapper.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IMouseMapper,Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.MouseMapper"/> class. 
            </summary>
            <param name="mouseMapper">
            MouseMapper object.
            </param>
            <param name="terminal">
            Terminal Object.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.MouseMapper.Parent">
            <summary>
            <c>Gets</c> the parent object (IIbmTerminal).
            </summary>
            <example>
            <code>
            private MouseMapper mapper;
            IbmTerminal terminal;
            
            terminal = mapper.Parent;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.MouseMapper.MouseMap">
            <summary>
            <c>Gets</c> or <c>sets</c> the name of the mouse map file. 
            </summary>
            <remarks>
            When setting the filename, if the value is not a full path, Reflection searches 
            the user's Reflection document folder and the Built-Ins/Keyboard Maps folder.
            <para>If the file cannot be found there, or the full path passed in does not exist,
            a FileNotFoundException is thrown.</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private MouseMapper mapper;
            
            public string GetMouseMap()
            {
              string map;
              if(mapper != null)
              {
                 map = mapper.MouseMap;
                 return map;
              }
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.MouseMapper.MappingCollection">
            <summary>
            Returns a set of all the mouse/key combinations that have been remapped in the 
            current mouse map.
            </summary>
            <example>
            <code>
            private MouseMapper mapper;
            
            public MouseMapping[] GetMappingCollection()
            {
              MouseMapping[] map;
              if(mapper != null)
              {
                 map = mapper.MappingCollection;
                 return map;
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseMapper.AddMapping(Attachmate.Reflection.Emulation.IbmHosts.MouseMapping)">
            <summary>
            Adds a mouse button mapping to the current mouse map.
            </summary>
            <param name="mapping">
            A mapping between a mouse/key combination and a set of actions to perform when
            that mouse button combination is pressed in a host session.
            </param>
            <remarks>
            A mouse/key combination can also be remapped to do nothing if the InputMapActionSequence
            specified in mapping.Mapping has no InputMapActions added to it.
            </remarks>
            <example>
            <code>
            private MouseMapper mapper;
            private MouseMapping mapping;
            
            mapper.AddMapping(mapping);
            
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseMapper.RemoveMapping(Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination)">
            <summary>
            Removes a mouse mapping from the mouse map.
            </summary>
            <param name="mapping">The mouse/key combination to remove the mapping for.</param>
            <example>
            <code>
            private MouseMapper mapper;
            private MouseButtonCombination mouseMapping;
            
            mapper.RemoveMapping(mouseMapping);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseMapper.Contains(Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination)">
            <summary>
            Returns whether there is a mapping for a specified mouse/key combination
            in the current mouse map.
            </summary>
            <param name="mapping">The mouse/key combination to query for.</param>
            <returns>True if the current keyboard map contains a mapping for key, false if not.</returns>
            <example>
            <code>
            private MouseMapper mapper;
            private MouseButtonCombination mouseCombination;
            
            public bool ContainsMapping()
            {   
              if(mapper.Contains(mouseCombination)
                return true
              else
                return false;
              
            }
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.MouseMapping">
            <summary>
            Maps a mouse button/modifier key combination to a sequence of one or more input actions.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseMapping.#ctor">
            <summary>
            Initializes a new instance of the MouseMapping class.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseMapping.#ctor(Attachmate.Reflection.Emulation.IbmHosts.MouseButtonCombination,Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence)">
            <summary>
            Constructor
            </summary>
            <param name="button">The mouse/key combination being mapped.</param>
            <param name="mapping">
            Optional parameters associated with the action. If there are no parameters needed
            for the action, null may be specified for this parameter.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.MouseMapping.Button">
            <summary>
            <c>Gets</c> the mouse/key combination associated with the mouse mapping.
            </summary>
            <example>
            <code>
            private MouseMapping mapping;
            private MouseButtonCombination mouseCombination;
            
            mouseCombination = mapping.Button;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.MouseMapping.Mapping">
            <summary>
            <c>Gets</c> the action sequence associated with the keyboard mapping.
            </summary>
            <example>
            <code>
            private MouseMapping mapping;
            private InputMapActionSequence inputMap;
            
            inputMap = mapping.Mapping;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseMapping.GetSchema">
            <summary>
            Returns an in-memory representation of the XML schema used for SerializableList
            </summary>
            <returns>Null -- not currently implemented.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseMapping.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads in a mouse mapping from an xml file
            </summary>
            <param name="reader">where to read the xml from</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.MouseMapping.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes out a mouse mapping to xml format
            </summary>
            <param name="writer">writes the xml to persistant storage</param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.MouseShapeOption">
            <summary>
            Defines options that specify the appearance of the mouse pointer in the terminal window. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MouseShapeOption.Rectangular">
            <summary>
            The mouse pointer appears as a rectangle.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MouseShapeOption.IBeam">
            <summary>
            The mouse pointer appears as an I-beam.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.MouseShapeOption.DefaultArrow">
            <summary>
            The mouse pointer appears as an arrow.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.Oia">
            <summary>
            Provides access to properties of the Operator Information Area (host session status line).
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Oia.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IOia,Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.Oia"/> class. 
            </summary>
            <param name="oia">
            Remote OIA instance
            </param>
            <param name="screen">
            Parent screen object
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Oia.Parent">
            <summary>
            <c>Gets</c> the parent object (IIbmScreen).
            </summary>
            <example>
            <code>
            private OIA Oia;
            private IIbmScreen screen;
            
            screen = oia.Parent;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Oia.Text">
            <summary>
            Returns text representation of the status line.
            </summary>
            <example>
            <code>
            private OIA Oia;
            private string text;
            //retrieve the OIA text.
            text = oia.Text;
            </code>
            </example> 
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Oia.TypeOf5250StatusLine">
             <summary>
             <c>Gets</c> or <c>sets</c> the type of 5250 status line. Applies only to 5250 sessions.
             </summary>
             <example>
             <code>
             private OIA Oia;
            
             oia.TypeOf5250StatusLine = AS400StatusLineOption.StatusLine5250;
             </code>
             </example> 
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Oia.HasMessageWaiting">
             <summary>
             <c>Gets</c> whether there is a status message waiting. 5250 sessions only.
             </summary>
             <example>
             <code>
             private OIA Oia;
            
             bool messageWaiting = oia.HasMessageWaiting;
             </code>
             </example> 
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Oia.ConnectionStatus">
            <summary>
            <c>Gets</c> the communications status from the OIA.
            </summary>
            <example>
            <code>
            private OIA Oia;
            private ConnectionStatus status;
            
            status = oia.ConnectionStatus;
            </code>
            </example> 
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Oia.ErrorStatus">
            <summary>
            <c>Gets</c> the error status from the OIA.
            </summary>
            <example>
            <code>
            private OIA Oia;
            private ErrorStatus status;
            
            status = oia.ErrorStatus;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Oia.Xstatus">
            <summary>
            <c>Gets</c> the X-clock status from the OIA.
            </summary>
            <example>
            <code>
            private OIA Oia;
            private XStatus status;
            
            status = oia.XStatus;
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.Oia.FireEventAsyncDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ConnectionStatus">
            <summary>
            Connection status.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ConnectionStatus.NoStatus">
            <summary>
            No status.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ConnectionStatus.AppOwned">
            <summary>
            Solid block OIA character, LU-LU session owns screen.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ConnectionStatus.Sscp">
            <summary>
            Stickman OIA character, SSCP-LU owns screen.
            </summary>        
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ConnectionStatus.Unowned">
            <summary>
            On-line and not owned.
            </summary>        
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.XStatus">
            <summary>
            X-clock status.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.XStatus.NoStatus">
            <summary>
            No x-clock present.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.XStatus.NumericOnly">
            <summary>
            Numeric input only.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.XStatus.ProtectedField">
            <summary>
            Protected field, input inhibited.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.XStatus.Busy">
            <summary>
            X-clock busy.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.XStatus.System">
            <summary>
            System wait.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.XStatus.InvalidNumber">
            <summary>
            Wrong number.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.XStatus.PastEof">
            <summary>
            Too much entered.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.XStatus.InvalidFunc">
            <summary>
            Minus function.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.XStatus.InvalidChar">
            <summary>
            Minus symbol.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ErrorStatus">
            <summary>
            Host session error statuses.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ErrorStatus.NoStatus">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ErrorStatus.MachineCheck">
            <summary>
            Machine check error.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ErrorStatus.ProgramCheck">
            <summary>
            Program check error.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ErrorStatus.CommCheck">
            <summary>
            Comm check error.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PasteLineBreakOption">
            <summary>
            Defines options for specifying which character is inserted as a line break 
            when data containing a line break is copied from the Clipboard to a field on the terminal screen.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PasteLineBreakOption.EnterKey">
            <summary>
            Inserts an Enter character.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PasteLineBreakOption.NewLineKey">
            <summary>
            Inserts a NewLine character.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PasteLineBreakOption.TabKey">
            <summary>
            Inserts a Tab character.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions">
            <summary>
            PrintOptions object represents print screen and printer emulation configuration options.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IPrintOptions,Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions"/> class. 
            the constructor, for internal use
            </summary>
            <param name="printOptions">
            The remote print options object
            </param>
            <param name="screen">
            The parent object
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.Parent">
            <summary>
            <c>Gets</c> the parent object (IIbmScreen).
            </summary>
            <example>
            <code>
            private IIbmScreen screen;
            private PrintOptions option;
            
            screen = option.Parent;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintDest">
            <summary>
            Gets or sets a driver or port to print to. 
            </summary>
            <remarks>
            The default value is "unknown".
            This string can be up to 220 characters long.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception> 
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintDest = "Generic/Text Only";
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.AutoFormFeed">
            <summary>
            Gets or sets a value indicating whether the terminal inserts a form feed between screens
            when the terminal is configured to print multiple screens per page.
            </summary>
            <remarks>This property applies only to screen printing performed during terminal
            sessions, and only affects printing when the ClosePrinterManually property
            is set to true.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOption ption ;
            
            option.AutoFormFeed = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintStatusLine">
            <summary>
            Gets or sets a value indicating whether the terminal prints the host status line when
            printing from the terminal window.
            </summary>
            <remarks>
             This property has no effect when 
            FastTextPrinting property is true.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintStatusLine = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintMonochrome">
            <summary>
            Gets or sets a value indicating whether the terminal prints the terminal window using
            only black and white. 
            </summary>
            <remarks>
            This property has no effect when FastTextPrinting
            property is true.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintMonochrome = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintBackground">
            <summary>
            Gets or sets the background color to use when printing the terminal screen. 
            </summary>
            <remarks>
            This property has no effect when FastTextPrinting
            property is true.
            Available values include Black and White (the default).
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintBackground = PrintBackgroundOption.Black;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintFitUserWidth">
            <summary>
            Gets or sets the width of the form to print to when the PrintFitUser property is <c>true</c>. 
            </summary>
            <remarks>
            The value is expressed in percent reduction (less than 100%) or expansion (greater than 100%). 
            The default value is 100. 
            The range of values is 10 - 1000.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception> 
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintFitUserWidth = 250;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrinterOrientation">
            <summary>
            Gets or sets the default page orientation used to print host documents.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item>
            <term>Default</term>
            <description>Uses the page orientation sent down from the host to print the document.</description>
            </item>
            <item>
            <term>Landscape	</term>
            <description>Forces the page orientation to landscape mode (11" x 8.5"), regardless of 
            how the document is configured on the host.</description>
            </item>
            <item>
            <term>Portrait</term>
            <description>Forces the page orientation to portrait mode (8.5" x 11"), regardless of 
            how the document is configured on the host.</description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrinterOrientation = PrinterOrientationOption.Portrait;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintMarginTop">
            <summary>
            Gets or sets the size of the margin at the top of a printed page.
            </summary>
            <remarks>
            The value is in "twips" (a twip is one twentieth of a point). 
            There are 1440 twips to an inch.
            The default is 720.
            The range of values is 0 - 32,767.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>   
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintMarginTop = 100;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintMarginBottom">
            <summary>
            Gets or sets the size of the margin at the bottom
            of a printed page.
            </summary>
            <remarks>
            The value is in "twips" (a twip is one twentieth of a point). 
            There are 1440 twips to an inch.   
            The default is 720.
            The range of values is 0 - 32,767.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception> 
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintMarginBottom = 100;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintMarginLeft">
            <summary>
            Gets or sets the size of the margin at the left side
            of a printed page. 
            </summary>
            <remarks>
            The value is in "twips" (a twip is one twentieth of a point). 
            There are 1440 twips to an inch.
            The default is 720.
            The range of values is 0 - 32,767.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintMarginLeft = 100;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintMarginRight">
            <summary>
            Gets or sets the size of the margin at the right side
            of a printed page.
            </summary>
            <remarks>
            The value is in "twips" (a twip is one twentieth of a point). 
            There are 1440 twips to an inch.
            The default is 720.
            The range of values is 0 - 32,767.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintMarginRight = 100;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintPaperSize">
            <summary>
            Gets or sets the paper size to use for the current default
            Windows printer.
            </summary>
            <remarks>
            The default value is PaperSizeWindows, which specifies the current printer default. 
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>PaperSize10x11</term><description>10 x 11 in.</description></item>
            <item><term>PaperSize10x14</term><description>10 x 14 in.</description></item>
            <item><term>PaperSize11x17</term><description>11 x 17 in.</description></item>
            <item><term>PaperSize15x11</term><description>	15 x 11 in.</description></item>
            <item><term>PaperSize9x11</term><description>	9 x 11 in.</description></item>
            <item><term>PaperSizeA2	</term><description>A2 420 x 594 mm</description></item>
            <item><term>PaperSizeA3	</term><description>A3 297 x 420 mm</description></item>
            <item><term>PaperSizeA3Extra</term><description>	A3 Extra 322 x 445 mm</description></item>
            <item><term>PaperSizeA3ExtraTraverse</term><description>	A3 Extra Transverse 322 x 445 mm</description></item>
            <item><term>PaperSizeA3Traverse	</term><description>A3 Transverse 297 x 420 mm</description></item>
            <item><term>PaperSizeA4</term><description>	A4 210 x 297 mm</description></item>
            <item><term>PaperSizeA4Extra</term><description>	A4 Extra 9.27 x 12.69 in.</description></item>
            <item><term>PaperSizeA4ExtraTraverse</term><description>	Letter Extra Transverse 9.275 x 12 in.</description></item>
            <item><term>PaperSizeA4Plus</term><description>	A4 Plus 210 x 330 mm</description></item>
            <item><term>PaperSizeA4Small</term><description>	A4 Small 210 x 297 mm</description></item>
            <item><term>PaperSizeA4Traverse</term><description>	A4 Transverse 210 x 297 mm</description></item>
            <item><term>PaperSizeA5</term><description>	A5 148 x 210 mm</description></item>
            <item><term>PaperSizeA5Extra</term><description>A5 Extra 174 x 235 mm</description></item>
            <item><term>PaperSizeA5Traverse</term><description>A5 Transverse 148 x 210 mm</description></item>
            <item><term>PaperSizeAPlus</term><description>SuperA/SuperA/A4 227 x 356 mm</description></item>
            <item><term>PaperSizeB4</term><description>B4 (JIS) 250 x 354 mm</description></item>
            <item><term>PaperSizeB5</term><description>B5 (JIS) 182 x 257 mm</description></item>
            <item><term>PaperSizeB5Extra</term><description>B5 (ISO) Extra 201 x 276 mm</description></item>
            <item><term>PaperSizeB5Traverse	</term><description>B5 (JIS) Transverse 182 x 257 mm</description></item>
            <item><term>PaperSizeBPlus</term><description>SuperB/SuperB/A3 305 x 487 mm</description></item>
            <item><term>PaperSizeCSheet</term><description>C-sized sheet</description></item>
            <item><term>PaperSizeDSheet</term><description>D-sized sheet</description></item>
            <item><term>PaperSizeEnv10</term><description>Envelope #10 4 1/8 x 9 1/2 in.</description></item>
            <item><term>PaperSizeEnv11</term><description>Envelope #11 4 1/2 x 10 3/8 in.</description></item>
            <item><term>PaperSizeEnv12</term><description>Envelope #12 4 3/4 x 11 in.</description></item>
            <item><term>PaperSizeEnv14</term><description>Envelope #14 5 x 11 1/2 in.</description></item>
            <item><term>PaperSizeEnv9</term><description>Envelope #9</description></item>
            <item><term>PaperSizeEnvB4</term><description>Envelope B4 250 x 353 mm</description></item>
            <item><term>PaperSizeEnvB5</term><description>Envelope B5 176 x 250 mm</description></item>
            <item><term>PaperSizeEnvB6</term><description>Envelope B6 176 x 125 mm</description></item>
            <item><term>PaperSizeEnvC3</term><description>Envelope C3 324 x 458 mm</description></item>
            <item><term>PaperSizeEnvC4</term><description>Envelope C4 229 x 324 mm</description></item>
            <item><term>PaperSizeEnvC5</term><description>Envelope C5 162 x 229 mm</description></item>
            <item><term>PaperSizeEnvC6</term><description>Envelope C6</description></item>
            <item><term>PaperSizeEnvC65</term><description>Envelope C65 114 x 229 mm</description></item>
            <item><term>PaperSizeEnvDL</term><description>Envelope DL 110 x 220 mm</description></item>
            <item><term>PaperSizeEnvInvite</term><description>Envelope Invite 220 x 220 mm</description></item>
            <item><term>PaperSizeEnvItaly</term><description>Envelope 110 x 230 mm</description></item>
            <item><term>PaperSizeEnvMonarchEnvelope	</term><description>Monarch 3.875 x 7.5 in.</description></item>
            <item><term>PaperSizeEnvPersonal</term><description>6 3/4 Envelope 3 5/8 x 6 1/2 in.</description></item>
            <item><term>PaperSizeESheet</term><description>E-sized sheet</description></item>
            <item><term>PaperSizeExecutive</term><description>Executive 7 1/4 x 10 1/2 in.</description></item>
            <item><term>PaperSizeFanfoldLglGerman</term><description>German Legal Fanfold 8 1/2 x 13 in.</description></item>
            <item><term>PaperSizeFanfoldStdGerman</term><description>German Std Fanfold 8 1/2 x 12 in.</description></item>
            <item><term>PaperSizeFanfoldUS</term><description>US Std Fanfold 14 7/8 x 11 in.</description></item>
            <item><term>PaperSizeFolio</term><description>Folio 8.5 x 13 in.</description></item>
            <item><term>PaperSizeISOB4</term><description>B4 (ISO) 250 x 353 mm</description></item>
            <item><term>PaperSizeJapanesePostcard</term><description>Japanese Postcard 100 x 148 mm</description></item>
            <item><term>PaperSizeLedger</term><description>Ledger 17 x 11 in.</description></item>
            <item><term>PaperSizeLegal</term><description>Legal 8.5 x 14 in.</description></item>
            <item><term>PaperSizeLegalExtra</term><description>	Legal Extra 9.275 x 15 in.</description></item>
            <item><term>PaperSizeLetter</term><description>Letter 8.5 x 11 in.</description></item>
            <item><term>PaperSizeLetterExtra</term><description>Letter Extra 9.275 x 11 in.</description></item>
            <item><term>PaperSizeLetterPlus	</term><description>Letter Plus 8.5 x 12.69 in.</description></item>
            <item><term>PaperSizeLetterSmall</term><description>Letter Small 8.5 x 11</description></item>
            <item><term>PaperSizeLetterTransverse</term><description>Letter Transverse 8.275 x 11 in.</description></item>
            <item><term>PaperSizeNote</term><description>Note 8.5 x 11 in.</description></item>
            <item><term>PaperSizeQuarto</term><description>Quarto 215 x 275 mm</description></item>
            <item><term>PaperSizeStatement</term><description>	Statement 5.5 x 8.5 in.</description></item>
            <item><term>PaperSizeTabloid</term><description>Tabloid 11 x 17 in.</description></item>
            <item><term>PaperSizeTabloidExtra</term><description>Tabloid Extra 11.69 x 18 in.</description></item>
            <item><term>PaperSizeWindows</term><description>Printer default</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintPaperSize = PrintPaperSizeOption.A4Extra;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintPaperSource">
            <summary>
            Gets or sets the paper source to use for the current default
            Windows printer.
            </summary>
            <remarks>
            Values:
            <para>PaperSourceAuto</para>
            <para>PaperSourceCasette</para>
            <para>PaperSourceEnvelope</para>
            <para>PaperSourceEnvManual</para>
            <para>PaperSourceFormSource</para>
            <para>PaperSourceLargeCapacity</para>
            <para>PaperSourceLargeFmt</para>
            <para>PaperSourceLower</para>
            <para>PaperSourceManual</para>
            <para>PaperSourceMiddle</para>
            <para>PaperSourceSmallFmt</para>
            <para>PaperSourceTractor</para>
            <para>PaperSourceUpper</para>
            <para>PaperSourceWindows (The default.)</para>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintPaperSource = PrintPaperSourceOption.PaperSourceMiddle;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintCharsPerLine">
            <summary>
            Gets or sets the maximum number of characters that can be printed on a single line.
            </summary>
            <remarks>
            If a line longer than this is passed down from the host, the terminal automatically wraps the line. 
            This property affects all printing operations.
            Any number between 1 and 32,767; the range of legal values and the default 
            are determined by your printer driver.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the set parameter is outside the range of valid values.
            </exception> 
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintCharsPerLine = 1000;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintFitUser">
            <summary>
            Gets or sets a value indicating whether to print host print jobs or terminal screens
            to a user-defined form size. 
            </summary>
            <remarks>
            When this property is <c>true</c>,the terminal scales printed output to fit the size you define using the 
            PrintFitUserLength and PrintFitUserWidth properties.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintFitUser = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintFitUserLength">
            <summary>
            Gets or sets the length of the form to print to when the PrintFitUser property is true.  
            </summary>
            <remarks>
            The value is expressed in percent
            reduction (less than 100%) or expansion (greater than 100%).
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintFitUserLength = 90;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintFileExistsAction">
            <summary>
            Gets or sets what the terminal does when you send a print
            job to an existing file. This property is relevant only when the
            PrintToFile property is set to true. Use the PrintFileName property
            to specify the print file name.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>Append</term><description>Adds the information to the end of the existing file.</description></item>
            <item><term>AskUser</term><description> Prompts the user to select an option. (The default.)</description></item>
            <item><term>AutoNumber</term><description>Creates a new file by adding an incremented number to the existing filename.</description></item>
            <item><term>OpenError</term><description>Causes the print job to fail and return an error.</description></item>
            <item><term>Overwrite</term><description>Replaces the existing file with the new information.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintFileExistsAction = PrintFileExistsActionOption.AutoNumber;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintFileName">
            <summary>
            Gets or sets the name of the file to receive print jobs when the PrintToFile property is set to true. Use the 
            PrintFileExistsAction to determine what happens when the specified file already exists.
            </summary>
            <remarks>
            The default value is "".
            This string can be up to 260 characters long.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is null (Nothing in Visual Basic). Use an zero-length string to
            indicate an empty value.
            </exception>        
            <exception cref="T:System.ArgumentException">
            Thrown if the set parameter length is too long.
            </exception> 
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintFileName = "FilePrint";
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintToFile">
            <summary>
            Gets or sets a value indicating whether print jobs are sent to a file.
            </summary>
            <remarks>
            When this property is <c>true</c>, the terminal sends print jobs to a file. 
            Use PrintFileName to specify the filename. Use PrintFileExistsAction
            to determine what happens if the specified file already exists.
            When this property is <c>false</c>, the terminal sends print jobs to the printer.
            This property affects screen printing, 3270 printer sessions, and 5250 
            printer sessions.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintToFile = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintCharsPerInch">
            <summary>
            Gets or sets how many characters to print per inch. 
            </summary>
            <remarks>
            If the PrintProportionalCPI property is set to true, 
            PrintCharsPerInch is disregarded. In this case, the number of 
            characters printed per inch is determined by the current printer font.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>cpi5</term><description>Prints 5 characters per inch.</description></item>
            <item><term>cpi6</term><description>Prints 6 characters per inch.</description></item>
            <item><term>cpi8</term><description>Prints 8 characters per inch.</description></item>
            <item><term>cpi10</term><description>Prints 10 characters per inch. (The default.)</description></item>
            <item><term>cpi12</term><description>Prints 12 characters per inch.</description></item>
            <item><term>cpi13</term><description>Prints 13 characters per inch.</description></item>
            <item><term>cpi15</term><description>Prints 15 characters per inch.</description></item>
            <item><term>cpi17</term><description>Prints 17 characters per inch.</description></item>
            <item><term>cpi20</term><description>Prints 20 characters per inch.</description></item>
            <item><term>cpi22</term><description>Prints 22 characters per inch.</description></item>
            <item><term>cpi27</term><description>Prints 27 characters per inch.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintCharsPerInch = PrintCharsPerInchOption.Cpi10;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintCompressFont">
            <summary>
            Gets or sets a value indicating whether composed Thai characters are vertically compressed while printing to make them more legible.
            </summary>
            <remarks>
            This setting applies only to Thai language versions of the terminal.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintCompressFont = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintDbcs2To3">
            <summary>
             Gets or sets a value indicating whether to widen double-byte characters to 1.5
            times their default size when printing host print jobs and terminal
            screens to make them more legible. 
            </summary>
            <remarks> 
            When this property is true, 
            the terminal widens double-byte characters so that two characters occupy the 
            same number of spaces as three single-byte characters.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintDbcs2To3 = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintDbcsHorzFontSize">
            <summary>
            Gets or sets a value indicating whether the terminal doubles the horizontal size
            of double-byte characters when it prints host screens or print jobs
            to make them more legible.
            </summary>
            <remarks>
            <list type="bullet"><listheader><term>Values:</term></listheader>
            <item><term>Print1X</term><description>Uses the default size.</description></item>
            <item><term>Print2X</term><description>Doubles the horizontal size of characters.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintDbcsHorzFontSize = PrintDbcsHorzFontSizeOption.Print1x;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintDbcsRotationAngle">
            <summary>
            Gets or sets a value indicating whether to rotate characters 270 degrees when 
            printing host print jobs or terminal screens. 
            </summary>
            <remarks>
            Rotating characters 270 degrees presents host print jobs that contain double-byte characters
            in a traditional, top-to-bottom, left-to-right alignment.
            This setting is applicable to double-byte character sets only.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item><term>PrintRotate0</term><description>Does not rotate characters. (The default.)</description></item>
            <item><term>PrintRotate270</term><description> Rotates characters 270 degrees.</description></item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintDbcsRotationAngle = PrintDbcsRotationAngleOption.PrintRotate270;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintDbcsSmallerFont">
            <summary>
            Gets or sets a value indicating whether to print double-byte characters using a smaller font size.
            </summary>
            <remarks>
            When this property is false, the font size is normal. When it is true, the terminal uses a smaller font size.
            This property applies to 5250 sessions only.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintDbcsSmallerFont = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintFormFeedOnEndOfJob">
            <summary>
            Gets or sets a value indicating whether the terminal sends a form feed to the host printer at the end of print jobs.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintFormFeedOnEndOfJob = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintSosiPresentation">
            <summary>
            Gets or sets how the terminal treats shift-out and shift-in (SO/SI) characters when printing host print
            jobs or terminal screens.This property is applicable to 5250 sessions only.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader> 
            <item>
            <term>Blank</term>
            <description>Shift-out/shift-in (SO/SI) characters are printed as blank spaces. Use this option for WYSIWYG printing. (The default.)</description>
            </item>
            <item>
            <term>NoPosition</term>
            <description>SO/SI characters and the cells they occupy are removed, and the remaining text is collapsed. 
            Removing cells that contain SO/SI characters changes the spacing of the text and can potentially cause 
            columns to go out of alignment. </description>
            </item>
            <item>
            <term>SONoPosSI2Pos</term>
            <description>Shift Out (SO) characters are removed, double-byte characters are shifted one cell to the left, 
            and SI characters are printed as two blank spaces. This option preserves the alignment of columns in host print jobs.
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintSosiPresentation = PrintSosiPresentOption.SoNoPosS12Pos;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintSquareAspectRatio">
            <summary>
            Gets or sets a value indicating whether the terminal preserves the dimensions of the graphics display when it prints,
            ensuring that objects maintain their correct proportions and shapes.
            </summary>
            <remarks>
            This setting is valid in 3179G terminal sessions only. It has no effect when FastTextPrinting property is <c>true</c>.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            private PrintOptions option;
            
            option.PrintSquareAspectRatio = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintSuppressBlankPage">
            <summary>
            Gets or sets a value indicating whether blank pages are suppressed. 
            </summary>
            <remarks>
            When this property is <c>true</c>, 
            the terminal suppresses blank pages on host print jobs. 
            When it is <c>false</c>, the terminal does not suppress blank pages.  
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a property that was secured 
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
             <example>
            <code>
            private PrintOptions option;
            
            option.PrintSuppressBlankpage = true;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.PrintOptions.PrintScreen(Attachmate.Reflection.Emulation.IbmHosts.PrintScreenOption,System.Int32)">
            <summary>
            Prints the selected text or the entire terminal screen.
            </summary>
            <param name="option"> Print option. See <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.PrintScreenOption"/> for more information.</param>
            <param name="copies"> The number of copies.</param>
            <returns>ReturnCode.Success if the operation succeeded, ReturnCode.Error if not.</returns>
             <example>
            <code>
            class Program
            {
               private PrintOptions option;
               private ReturnCode code;
            
               public ReturnCode GetPrintScreen()
               {
                 if(option != null)
                 {
                    code = option.PrintScreen( PrintScreenOption.PrintScreenOrSel,3);
                    return code;
                 }
               }
            }
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrintBackgroundOption">
            <summary>
            Options for specifying the background color to use when printing the terminal screen. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintBackgroundOption.Black">
            <summary>
            Prints the terminal screen with a black background.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintBackgroundOption.White">
            <summary>
            Prints the terminal screen with a white background.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption">
            <summary>
            Options for specifying the paper size to use for the current default Windows printer. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Windows">
            <summary>
            Use Windows default (not in GDI).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Letter">
            <summary>
            Letter 8 1/2 x 11 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.LetterSmall">
            <summary>
            Letter Small 8 1/2 x 11 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Tabloid">
            <summary>
            Tabloid 11 x 17 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Ledger">
            <summary>
            Ledger 17 x 11 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Legal">
            <summary>
            Legal 8 1/2 x 14 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Statement">
            <summary>
            Statement 5 1/2 x 8 1/2 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Executive">
            <summary>
            Executive 7 1/4 x 10 1/2 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.A3">
            <summary>
            A3 297 x 420 mm 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.A4">
            <summary>
            A4 210 x 297 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.A4Small">
            <summary>
            A4 Small 210 x 297 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.A5">
            <summary>
            A5 148 x 210 mm 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.B4">
            <summary>
            B4 (JIS) 250 x 354 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.B5">
            <summary>
            B5 (JIS) 182 x 257 mm 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Folio">
            <summary>
            Folio 8 1/2 x 13 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Quarto">
            <summary>
            Quarto 215 x 275 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Size10X14">
            <summary>
            10x14 in. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Size11X17">
            <summary>
            11x17 in.  
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Note">
            <summary>
            Note 8 1/2 x 11 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Envelope9">
            <summary>
            Envelope #9 3 7/8 x 8 7/8 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Envelope10">
            <summary>
            Envelope #10 4 1/8 x 9 1/2 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Envelope11">
            <summary>
            Envelope #11 4 1/2 x 10 3/8 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Envelope12">
            <summary>
            Envelope #12 9 1/2 x 11 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Envelope14">
            <summary>
            Envelope #14 5 x 11 1/2 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.CSizeSheet">
            <summary>
            C size sheet 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.DSizeSheet">
            <summary>
            D size sheet
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.ESizeSheet">
            <summary>
            E size sheet 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.EnvelopeDL">
            <summary>
            Envelope DL 110 x 220 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.EnvelopeC5">
            <summary>
            Envelope C5 162 x 229 mm 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.EnvelopeC3">
            <summary>
            Envelope C3  324 x 458 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.EnvelopeC4">
            <summary>
            Envelope C4  229 x 324 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.EnvelopeC6">
            <summary>
            Envelope C6  114 x 162 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.EnvelopeC65">
            <summary>
            Envelope C65 114 x 229 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.EnvelopeB4">
            <summary>
            Envelope B4  250 x 353 mm 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.EnvelopeB5">
            <summary>
            Envelope B5  176 x 250 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.EnvelopeB6">
            <summary>
            Envelope B6  176 x 125 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.EnvelopeItaly">
            <summary>
            Envelope 110 x 230 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.EnvelopeMonarch">
            <summary>
            Envelope Monarch 3.875 x 7.5 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.EnvelopePersonal">
            <summary>
            6 3/4 Envelope 3 5/8 x 6 1/2 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.FanfoldUS">
            <summary>
            US Std Fanfold 14 7/8 x 11 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.FanfoldStdGerman">
            <summary>
            German Std Fanfold 8 1/2 x 12 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.FanfoldLegalGerman">
            <summary>
            German Legal Fanfold 8 1/2 x 13 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.IsoB4">
            <summary>
            B4 (ISO) 250 x 353 mm 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.JapanesePostcard">
            <summary>
            Japanese Postcard 100 x 148 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Size9X11">
            <summary>
            9 x 11 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Size10X11">
            <summary>
            10 x 11 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.Size15X11">
            <summary>
            15 x 11 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.EnvelopeInvite">
            <summary>
            Envelope Invite 220 x 220 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.LetterExtra">
            <summary>
            Letter Extra 9.275 x 12 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.LegalExtra">
            <summary>
            Legal Extra 9.275 x 15 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.TabloidExtra">
            <summary>
            Tabloid Extra 11.69 x 18 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.A4Extra">
            <summary>
            A4 Extra 9.27 x 12.69 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.LetterTransverse">
            <summary>
            Letter Transverse 8.275 x 11 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.A4Transverse">
            <summary>
            A4 Transverse 210 x 297 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.LetterExtraTransverse">
            <summary>
            Letter Extra Transverse 9.275 x 12 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.APlus">
            <summary>
            SuperA/SuperA/A4 227 x 356 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.BPlus">
            <summary>
            SuperB/SuperB/A3 305 x 487 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.LetterPlus">
            <summary>
            Letter Plus 8.5 x 12.69 in.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.A4Plus">
            <summary>
            A4 Plus 210 x 330 mm 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.A5Transverse">
            <summary>
            A5 Transverse 148 x 210 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.B5Transverse">
            <summary>
            B5 (JIS) Transverse 182 x 257 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.A3Extra">
            <summary>
            A3 Extra 322 x 445 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.A5Extra">
            <summary>
            A5 Extra 174 x 235 mm 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.B5Extra">
            <summary>
            B5 (ISO) Extra 201 x 276 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.A2">
            <summary>
            A2 420 x 594 mm
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.A3Transverse">
            <summary>
            A3 Transverse 297 x 420 mm 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSizeOption.A3ExtraTransverse">
            <summary>
            A3 Extra Transverse 322 x 445
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrinterOrientationOption">
            <summary>
            Options for specifying the default page orientation used to 
            print host documents.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrinterOrientationOption.Default">
            <summary>
            Uses the page orientation sent down from the host to print 
            the document.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrinterOrientationOption.Portrait">
            <summary>
            Forces the page orientation to portrait mode (8.5" x 11"), regardless of what the document is configured for on the host.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrinterOrientationOption.Landscape">
            <summary>
            Forces the page orientation to landscape mode (11" x 8.5"), regardless of what the document is configured for on the host.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption">
            <summary>
            Options for specifying the paper source to use for the current default Windows printer.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.Windows">
            <summary>
            Windows default.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.Upper">
            <summary>
            Upper tray.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.Lower">
            <summary>
            Lower tray.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.Middle">
            <summary>
            Middle tray.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.Manual">
            <summary>
            Manual
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.Envelope">
            <summary>
            Envelope.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.EnvelopeManual">
            <summary>
            Envelope manual.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.Auto">
            <summary>
            Auto source.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.Tractor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.SmallFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.LargeFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.LargeCapacity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.Cassette">
            <summary>
            
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintPaperSourceOption.FormSource">
            <summary>
            
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrintFileExistsActionOption">
            <summary>
            Options for specifying what Reflection does when you 
            send a print job to an existing file. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintFileExistsActionOption.AskUser">
            <summary>
            Displays a dialog box asking the user what action to take.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintFileExistsActionOption.Overwrite">
            <summary>
            Replaces the existing file with the new information.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintFileExistsActionOption.Append">
            <summary>
            Adds the information to the end of the existing file.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintFileExistsActionOption.OpenError">
            <summary>
            Causes the print job to fail and return an error.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintFileExistsActionOption.AutoNumber">
            <summary>
            Create a new file by adding an incremented number to the existing file name.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrintCharsPerInchOption">
            <summary>
            Options for specifying how many characters to print per inch. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintCharsPerInchOption.Cpi5">
            <summary>
            Prints 5 characters per inch.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintCharsPerInchOption.Cpi6">
            <summary>
            Prints 6 characters per inch.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintCharsPerInchOption.Cpi8">
            <summary>
            Prints 8 characters per inch.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintCharsPerInchOption.Cpi10">
            <summary>
            Prints 10 characters per inch.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintCharsPerInchOption.Cpi12">
            <summary>
            Prints 12 characters per inch.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintCharsPerInchOption.Cpi13">
            <summary>
            Prints 13 characters per inch.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintCharsPerInchOption.Cpi15">
            <summary>
            Prints 15 characters per inch.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintCharsPerInchOption.Cpi17">
            <summary>
            Prints 17 characters per inch.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintCharsPerInchOption.Cpi20">
            <summary>
            Prints 20 characters per inch.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintCharsPerInchOption.Cpi22">
            <summary>
            Prints 22 characters per inch.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintCharsPerInchOption.Cpi27">
            <summary>
            Prints 27 characters per inch.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrintDbcsHorzFontSizeOption">
            <summary>
            Options for specifying whether Reflection doubles the 
            horizontal size of double-byte
            characters when it prints host screens or print 
            jobs to make them more legible.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDbcsHorzFontSizeOption.Print1X">
            <summary>
            Uses the default size.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDbcsHorzFontSizeOption.Print2X">
            <summary>
            Doubles the horizontal size of characters.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrintDbcsRotationAngleOption">
            <summary>
            Options for specifying whether to rotate characters 270 degrees
            when printing host print 
            jobs or terminal screens. 
            </summary>
            <remarks>
            Rotating characters 270 degrees 
            presents host print jobs that contain 
            double-byte characters in traditional, top-to-bottom, 
            left-to-right alignment.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDbcsRotationAngleOption.PrintRotate0">
            <summary>
            Does not rotate characters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDbcsRotationAngleOption.PrintRotate270">
            <summary>
            Rotates characters 270 degrees.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption">
            <summary>
            Options for specifying the paper source on the host printer. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.Windows">
            <summary>
            Specifies that Reflection should use the currently configured value for the primary paper source specified for the default Windows printer.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.CommonModel">
            <summary>
            Specifies that the AS/400 host should substitute the value most common for your printer.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.None">
            <summary>
            No paper source is specified.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.Same">
            <summary>
            Specifies that Reflection should use the currently configured host value for the primary paper source.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.Letter">
            <summary>
            Standard letter-sized paper (8.5 x 11 in.)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.Legal">
            <summary>
            Legal-sized paper (8.5 x 14 in.)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.Executive">
            <summary>
            Executive-sized paper (7.25 x 10.5 in.)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.A4">
            <summary>
            A4-sized paper (210 x 297 mm)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.A5">
            <summary>
            A5-sized paper (148 x 210 mm)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.B5">
            <summary>
            B5-sized paper (182 x 257 mm)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.Cont80">
            <summary>
            Continuous form paper (8 in. wide)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.Cont132">
            <summary>
            Continuous form paper (13.2 in. wide)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.Monarch">
            <summary>
            Monarch-sized paper (7.25 x 10.5 in.)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.Number9">
            <summary>
            Envelopes for this source are number 9-sized (3.875 x 8.875 in.).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.Number10">
            <summary>
            Envelopes for this source are number 10-sized (4.125 x 9.5 in.).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.C5">
            <summary>
            C5-sized paper (162 x 229mm)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.DL">
            <summary>
            DL-sized  (110 x 220mm)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.A3">
            <summary>
            A3-sized paper (297 x 420 mm)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.B4">
            <summary>
            B4-sized paper (257 x 364 mm)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintDevicePaperSourceOption.Ledger">
            <summary>
            Ledger-sized paper (17 x 11 in.)
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrintOverstrikeOption">
            <summary>
            Options for specifying whether Reflection simulates bold printing by using offset overstrike
            printing.  
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintOverstrikeOption.NoOffset">
            <summary>
            Turn off offset overstrike printing.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintOverstrikeOption.BoldOffset">
            <summary>
            Use offset overstrike printing to simulate bold printing.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrintSosiPresentationOption">
            <summary>
            Options for specifying how Reflection treats 
            shift-out and shift-in (SO/SI) characters when printing 
            host print jobs or terminal screens.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintSosiPresentationOption.NoPosition">
            <summary>
            SO/SI characters and the cells they occupy are removed,
            and the remaining text is collapsed. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintSosiPresentationOption.Blank">
            <summary>
            SO/SI characters are printed as blank spaces. 
            Use this option for WYSIWYG printing.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintSosiPresentationOption.SONoPosSI2Pos">
            <summary>
            SO characters are removed, double-byte characters
            are shifted one cell to the left, 
            and SI characters are printed as two blank spaces.
            </summary>
            <remarks> 
            This option preserves the alignment 
            of columns in host print jobs.
            </remarks>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrintWhatOption">
            <summary>
            In 3179G terminal sessions, this setting specifies 
            whether to print graphics only, text only, or both graphics 
            and text when printing from the terminal window.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintWhatOption.GraphicsAndText">
            <summary>
            Print both graphics and text.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintWhatOption.TextOnly">
            <summary>
            Print text only.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintWhatOption.GraphicsOnly">
            <summary>
            Print graphics only.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.PrintScreenOption">
            <summary>
            Options for specifying how the PrintScreen method prints screen text.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintScreenOption.PrintPartition">
            <summary>
            Prints the current host partition. This value is relevant only when the session type is 3270 terminal.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintScreenOption.PrintScreen">
            <summary>
            Prints the terminal window contents.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintScreenOption.PrintScreenOrSel">
            <summary>
            Prints selected text or, if no text is selected, the terminal window contents.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.PrintScreenOption.PrintSel">
            <summary>
            Prints selected text or, if no text is selected, prints nothing.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapping">
            <summary>
            Maps a key to a sequence of one or more input actions.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapping.#ctor">
            <summary>
            Initializes a new instance of the KeyboardMapping class.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapping.#ctor(System.Windows.Forms.Keys,Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence)">
            <summary>
            Initializes a new instance of the KeyboardMapping class.
            </summary>
            <param name="key">The key being mapped.</param>
            <param name="mapping">
            Optional parameters associated with the action. If there are no parameters needed
            for the action, null may be specified for this parameter.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapping.#ctor(System.Windows.Forms.Keys,Attachmate.Reflection.Emulation.IbmHosts.InputMapActionSequence,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="key">The key being mapped.</param>
            <param name="mapping">
            Optional parameters associated with the action. If there are no parameters needed
            for the action, null may be specified for this parameter.
            </param>
            <param name="isExtendedKey">
            Indicates whether this key is an extended key. For IBM Enhanced 101- and 102-key keyboards, 
            extended keys are the right ALT and the right CTRL keys on the main keyboard; 
            the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys
            to the left of the numeric keypad; and the slash (/) and ENTER
            keys in the numeric keypad.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapping.Key">
            <summary>
            <c>Gets</c> the key associated with the keyboard mapping.
            </summary>
            <example>
            <code>
            private KeyboardMapping map;
            // Get the Key.
            Keys key = Map.Key;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapping.Mapping">
            <summary>
            <c>Gets</c> the action sequence associated with the keyboard mapping.
            </summary>
            <example>
            <code>
            KeyboardMapping map ;
            InputMapActionSequence mapAction = map.Mapping;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapping.IsExtendedKey">
            <summary>
            Gets or sets whether this mapping includes an extended key.
            </summary>
            <example>
            <code>
            KeyboardMapping map ;
            bool ExtKey = map.IsExtendedKey;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapping.GetSchema">
            <summary>
            Returns an in-memory representation of the XML schema used for SerializableList
            </summary>
            <returns>Null -- not currently implemented.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapping.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads in a list type from an xml file
            </summary>
            <param name="reader">where to read the xml from</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.KeyboardMapping.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes out a list to xml format
            </summary>
            <param name="writer">writes the xml to persistant storage</param>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.RulerCursorTypeOption">
            <summary>
            Options for specifying the ruler cursor type.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.RulerCursorTypeOption.Crosshair">
            <summary>
            The ruler cursor is a cross hair.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.RulerCursorTypeOption.Horizontal">
            <summary>
            The ruler cursor is a horizontal line.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.RulerCursorTypeOption.Vertical">
            <summary>
            The ruler cursor is a vertical line.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter">
            <summary>
            ScreenCharacter represents one character on the host screen.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the ScreenCharacter class.
            The default is a single-byte character set character.
            </summary>
            <param name="character">The character on the host screen.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.#ctor(System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the ScreenCharacter class.
            </summary>
            <param name="character">The character on the host screen.</param>
            <param name="charWidth">The character width. SBCS = 1, DBCS = 2.</param>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.#ctor(System.Char,System.Int32,Attachmate.Reflection.Emulation.IbmHosts.FieldAttributes,Attachmate.Reflection.Emulation.IbmHosts.ScreenColor)">
            <summary>
            Initializes a new instance of the ScreenCharacter class.
            </summary>
            <param name="character">The character on the host screen.</param>
            <param name="charWidth">The character width. SBCS = 1, DBCS = 2.</param>
            <param name="fieldAttributes">Field attributes at the character's position on the 
            screen.</param>
            <param name="color">Host screen foreground color at the character's position 
            on the screen.</param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.CharCode">
            <summary>
            <c>Gets</c> the character code for this screen character.
            </summary>
            <returns></returns>
            <example>
            <code>
            private ScreenCharacter screen;
            //Get CharCode.
            char scrChar = screen.CharCode;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.CharWidth">
            <summary>
            <c>Gets</c> the character column width. This value can be used when 
            incrementing through a data cell array.
            </summary>
            <returns>The character column width: SBCS = 1, DBCS = 2.</returns>
            <example>
            <code>
            private ScreenCharacter screen;
            //Get CharWidth.
            int charWidth = screen.CharWidth;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.Attributes">
            <summary>
            <c>Gets</c> the field attributes.
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            private FieldAttributes attribute;
            //Get Attributes.
            attribute = screen.Attributes;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.ForegroundColor">
            <summary>
            <c>Gets</c> the foreground color.
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            private ScreenColor color;
            //Get ScreenColor.
            color = screen.ForegroundColor;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsAplCharacterSet">
            <summary>
            <c>Gets</c> a value indicating whether the data cell displays with APL characters.
            Note: IScreenDataConstants.ATTR_CHAR_SET_AP
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool charSet = screen.IsAplCharacterSet;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsDefaultDisplay">
            <summary>
            <c>Gets</c> a value indicating whether the data cell displays with default attributes.
            Note: IScreenDataConstants.ATTR_DEFAULT
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool defDisplay = screen.IsDefautDisplay;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsBlinking">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains blinking text.
            Note: IScreenDataconstants.ATTR_BLINK
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool blinking = screen.IsBlinking;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsReverse">
            <summary>
            <c>Gets</c> a value indicating whether the data cell displays in reverse video mode.
            Note: IScreenDataConstants.ATTR_REVERSE
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool reverse = screen.IsReverse;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsStrikeThrough">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains strikethrough text.
            Note: IScreenDataConstants.ATTR_STRIKETHROUGH
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool strikeThrough = screen.IsStrikeThrough;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsUnderline">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains underlined text.
            Note: IScreenDataconstants.ATTR_UNDERLINE
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool underline = screen.IsUnderline;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsOverline">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains overlined text.
            Note: IScreenDataconstants.ATTR_OVERLINE
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool overline = screen.IsOverline;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsColumnSeparator">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains a column separator.
            Note: IScreenDataConstants.ATTR_COLUMN_SEPARATOR
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool columnSeparator = screen.IsColumnSeparator;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsVisible">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains visible text.
            Note: IScreenDataConstants.ATTR_VISIBLE
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool visible = screen.IsVisible;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsHighIntensity">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains high intensity text.
            Note: IScreenDataConstants.ATTR_HIGH_INTENSITY
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool highIntensity = screen.IsHighIntensity;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsLightPenField">
            <summary>
            Gets a value indicating whether the data cell marks the beginning of a light pen field.
            Note: IScreenDataConstants.FIELD_LIGHT_PEN
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool lightPenField = screen.IsLightPenField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsAlphaOnlyField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of an alpha only field.
            Note: IScreenDataConstants.FIELD_ALPHA_ONLY
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool alphaOnlyField = screen.IsAlphaOnlyfield;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsRightJustifiedField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a right justified field.
            Note: IScreenDataConstants.FIELD_RIGHT_JUSTIFIED
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool rightJustified = screen.IsRightJustifiedField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsNumericShiftField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a numeric shift field.
            Note: IScreenDataConstants.FIELD_NUMERIC_SHIFT
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool numericShiftField = screen.IsNumericShiftField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsNumericOnlyField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a numeric only field.
            Note: IScreenDataConstants.FIELD_NUMERIC_ONLY
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool numericOnlyField = screen.IsNumericOnlyField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsDigitsField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a digits field.
            Note: IScreenDataConstants.FIELD_DIGITS
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool digitsField = screen.IsDigitsField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsSignedNumericField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a signed numeric field.
            Note: IScreenDataConstants.FIELD_SIGNED_NUMERIC
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool signedNumeric = screen.IsSigneNumericField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsMagneticStripField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a magnetic strip field.
            Note: IScreenDataConstants.FIELD_MAGNETIC_STRIP
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool magScript = screen.IsMagneticScriptField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsUserField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a user field.
            Note: IScreenDataConstants.FIELD_TYPE_USER
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool userField = screen.IsUserField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsMessageField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a message field.
            Note: IScreenDataConstants.FIELD_TYPE_MESSAGE
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool messageField = screen.IsMessageField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsBlockField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a block field.
            Note: IScreenDataConstants.FIELD_MODE_BLOCK
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool blockField = screen.IsBlockField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsProtectedField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a protected field.
            Note: IScreenDataConstants.FIELD_MODE_PROTECTED
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool protectedField = screen.IsProtectedField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsFieldAttribute">
            <summary>
            <c>Gets</c> a value indicating whether the data cell contains a field attribute.
            Note: IScreenDataConstants.FIELD_ATTRIBUTE
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool fieldAttribute = screen.IsFieldAttribute;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsFieldAttributePosition">
            <summary>
            Gets a value indicating whether the data cell contains a field attribute position.
            Note: IScreenDataConstants.FIELD_ATTR_POS
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsAttributeSpace">
            <summary>
            <c>Gets</c> a value indicating whether field attributes occupy screen space.
            Note: IScreenDataConstants.FIELD_ATTRIB_SPACE
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool attributeSpace = screen.IsAttributeSpace;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsModifiedField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a modified field.
            Note: IScreenDataConstants.FIELD_MODE_MODIFIED
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool modifiedField = screen.IsModifiedField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsDupField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of duplicate format control order field.
            Note: IScreenDataConstants.FIELD_MARK_DUP
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool dupField = screen.IsDupField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsAutoEnterField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of auto enter field.
            Note: IScreenDataConstants.FIELD_AUTO_ENTER
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool autoEnterField = screen.IsAutoEnterField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsExitRequiredField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of Exit Required field.
            Note: IScreenDataConstants.FIELD_EXIT_REQ
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool exitRequired = screen.IsExitRequiredField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsUppercaseField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell is uppercase.
            Note: IScreenDataConstants.FIELD_UPPERCASE
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool uppercase = screen.IsUppercaseField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsMandatoryEntryField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning 
            of a mandatory entry field.
            Note: IScreenDataConstants.FIELD_MANDATORY_ENTRY
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool mandatory = screen.IsMandatoryEntryField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsMandatoryFillField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a mandatory fill field.
            Note: IScreenDataConstants.FIELD_MANDATORY_FILL
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool mandatory = screen.IsMandatoryFillField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsRightAdjustZeroFillField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a right adjust, zero fill field.
            Note: IScreenDataConstants.FIELD_RA_ZEROFILL
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool rightAdjust = screen.IsRightAdjustZeroFillField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsRightAdjustBlankFillField">
            <summary>
            <c>Gets</c> a value indicating whether the data cell marks the beginning of a right adjust, blank fill field.
            Note: IScreenDataConstants.FIELD
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool rightAdjust = screen.IsRightAdjustBlankFillField;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsDbcs">
            <summary>
            <c>Gets</c> a value indicating whether the character is a DBSC character.
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool dbcs = screen.IsDbcs;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenCharacter.IsSosi">
            <summary>
            <c>Gets</c> a value indicating whether the character is a DBSC SOSI character.
            </summary>
            <example>
            <code>
            private ScreenCharacter screen;
            
            bool sosi = screen.IsSosi;
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor">
            <summary>
            Defines host screen colors specified by the host.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.Default">
            <summary>
            Default color that is not explicitly specified by the host.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.Black">
            <summary>Black color. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.Blue">
            <summary>Blue color. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.Red">
            <summary>Red color. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.Pink">
            <summary>Pink color. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.Green">
            <summary>Green color. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.Turquoise">
            <summary>Turquoise color. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.Yellow">
            <summary>Yellow color. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.White">
            <summary>White color. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.Gray">
            <summary>Gray color. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.DeepBlue">
            <summary>Deep blue color. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.Orange">
            <summary>Orange color. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.Purple">
            <summary>Purple color.</summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.PaleGreen">
            <summary>Pale green color. </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.ScreenColor.PaleTurquoise">
            <summary>Pale turquoise color. </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ScreenPoint">
            <summary>
            ScreenPoint represents a coordinate of a row and a column on the host screen.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ScreenPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.ScreenPoint"/> class. 
            </summary>
            <param name="row">
            The row on the host screen.
            </param>
            <param name="column">
            The column on the host screen.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenPoint.Row">
            <summary>
            <c>Gets</c> the row of this screen coordinate.
            </summary>
            <example>
            <code>
            private ScreenPoint screenPoint;
            //Get the screen coordinate row.
            int row = screenPoint.Row;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenPoint.Column">
            <summary>
            <c>Gets</c> the column of this screen coordinate.
            </summary>
            <example>
            <code>
            private ScreenPoint screenPoint;
            //Get the screen coordinate column.
            int column = screenPoint.Column;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ScreenPoint.ToString">
            <summary>
            Returns a string that represents the current ScreenPoint.
            </summary>
            <returns>A string that respresents the current ScreenPoint.</returns>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.ScreenRegion">
            <summary>
            Defines an area on the host screen for selecting text.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ScreenRegion.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IScreenRegion,Attachmate.Reflection.Emulation.IbmHosts.IIbmScreen)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.ScreenRegion"/> class. 
            </summary>
            <param name="screenRegion">
            The remote screen region object.
            </param>
            <param name="screen">
            The remote parent object.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenRegion.Parent">
            <summary>
            <c>Gets</c> the parent object. The parent is the IIbmScreen object.
            </summary>
            <example>
            <code>
            private ScreenRegion screenRegion;
            private IIbmScreen ibmScreen;
            
            ibmScreen = screenRegion.Parent;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenRegion.StartRow">
            <summary>
            The starting row of the region.
            </summary>
             <example>
            <code>
            private ScreenRegion screenRegion;
            //Get the starting row.
            int startRow = screenRegion.StartRow;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenRegion.StartColumn">
            <summary>
            The starting column of the region.
            </summary>
            <example>
            <code>
            private ScreenRegion screenRegion;
            //Get the starting column.
            int startColumn = screenRegion.StartColumn;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenRegion.EndRow">
            <summary>
            The ending row of the region.
            </summary>
            <example>
            <code>
            private ScreenRegion screenRegion;
            //Get the ending row of the region.
            int endRow = screenRegion.EndRow;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenRegion.EndColumn">
            <summary>
            The ending column of the region.
            </summary>
             <example>
            <code>
            private ScreenRegion screenRegion;
            //Get the ending column of the region.
            int endColumn = screenRegion.EndColumn;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ScreenRegion.CurrentSelectionMode">
            <summary>
            The current selection mode of the region.
            </summary>
             <example>
            <code>
            private ScreenRegion screenRegion;
            private SelectionMode mode;
            //Get the type of selected region.
            mode = screenRegion.SelectionMode;
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.SelectionMode">
            <summary>
            Specifies the type of a selected region (Stream or Block).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.SelectionMode.None">
            <summary>
            No selection.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.SelectionMode.Stream">
            <summary>
            Selected text is wrapped.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.SelectionMode.Block">
            <summary>
            Selected text forms a rectangle.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.TelnetAttnOption">
            <summary>
            Defines values that specify what happens when the ATTN host key is transmitted.  
            </summary>
            <remarks> 
            The definition of this key and its values vary by host application.
            This property is only relevant for 3270 Telnet sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TelnetAttnOption.TelnetBreak">
            <summary>
            Sends a Telnet Break to the host.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TelnetAttnOption.TelnetIntProcess">
            <summary>
            Sends a Telnet Int Process to the host.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TelnetAttnOption.TelnetAbortOutput">
            <summary>
            Sends a Telnet Abort Output to the host.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.TelnetEncryptionStrengthOption">
            <summary>
            Defines options for specifying the encryption strength for Secure Sockets Layer/Transport Layer 
            Security (SSL/TLS) datastream encryption. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TelnetEncryptionStrengthOption.Default">
            <summary>
            The encryption strength is established by the host and Reflection during handshaking.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TelnetEncryptionStrengthOption.Bits40">
            <summary>
            40-bit encryption strength.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TelnetEncryptionStrengthOption.Bits56">
            <summary>
            56-bit encryption strength.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TelnetEncryptionStrengthOption.Bits128">
            <summary>
            128-bit encryption strength.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TelnetEncryptionStrengthOption.Bits168">
            <summary>
            168-bit encryption strength.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TelnetEncryptionStrengthOption.Bits256">
            <summary>
            256-bit encryption strength.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.TelnetSysReqOption">
            <summary>
            Defines values that specify what happens when the SysReq function is transmitted.  The definition of this key varies
            by host application.
            </summary>
            <remarks> 
            This property is only relevant for TN3270 Terminal sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TelnetSysReqOption.TestRequestRead">
            <summary>
            Sends a Test Request Read to the host.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TelnetSysReqOption.TelnetBreak">
            <summary>
            Sends a TelnetBreak to the host.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TelnetSysReqOption.TelnetIntProcess">
            <summary>
            Sends a Telnet Int Process to the host.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TelnetSysReqOption.TelnetAbortOutput">
            <summary>
            Sends a Telnet Abort Output to the host.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel">
            <summary>
            Defines the options for terminal models.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.AnyModel">
            <summary>
            The gateway or mainframe determines which model to use, 
            based on connection parameters.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model2">
            <summary>
            Model 2 (24 x 80)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model2E">
            <summary>
            Model 2 Extended (24 x 80)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model3">
            <summary>
            Model 3 (32 x 80)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model3E">
            <summary>
            Model 3 Extended (32 x 80)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model4">
            <summary>
            Model 4 (43 x 80)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model4E">
            <summary>
            Model 4 Extended (43 x 80)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model5">
            <summary>
            Model 5 (27 x 132)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model5E">
            <summary>
            Model 5 Extended (27 x 132)
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.CustomModelE">
            <summary>
            Custom model Extended
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model3179_2">
            <summary>
            5250 Terminal model 3179-2
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model3180_2">
            <summary>
            5250 Terminal model 3180-2 132 column capable
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model3196_A1">
            <summary>
            5250 Terminal model 3196-A1
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model3477_FC">
            <summary>
            5250 Terminal model 3477-FC 132 Column Capable	
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model3477_FG">
            <summary>
            5250 Terminal model 3477-FG 132 Column Capable	
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model3486_BA">
            <summary>
            5250 Terminal model 3486-BA
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model3487_HA">
            <summary>
            5250 Terminal model 3487-HA 132 Column Capable
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model3487_HC">
            <summary>
            5250 Terminal model 3487-HC 132 Column Capable
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model5251_11">
            <summary>
            5250 Terminal model 5251-11
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model5291_1">
            <summary>
            5250 Terminal model 5291-1
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TerminalModel.Model5555_C01">
            <summary>
            Terminal model 5555-C01
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.TextBlinkRateOption">
            <summary>
            Defines values that specify the blink rate for text displayed in the terminal window. 
            </summary>
            <remarks>
            This applies only when the host has set a blinking attribute 
            on the text displayed in the terminal window.
            This property applies to 3270 and 5250 terminal sessions.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TextBlinkRateOption.NoBlink">
            <summary>
            The blinking attribute is ignored.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TextBlinkRateOption.Slow">
            <summary>
            Text blinks once every second.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TextBlinkRateOption.Medium">
            <summary>
            Text blinks twice every second.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TextBlinkRateOption.Fast">
            <summary>
            Text blinks four times every second.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.TextComparisonOption">
            <summary>
            Defines options that indicate how text is compared against the text on the host screen.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TextComparisonOption.RegularExpression">
            <summary>
            Compares text using a regular expression.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TextComparisonOption.IgnoreCase">
            <summary>
            Performs case-insensitive text comparison.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.TextComparisonOption.MatchCase">
            <summary>
            Performs case-sensitive text comparison.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.Theme">
            <summary>
            Theme object represents a visual theme in the application.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Theme.#ctor(Attachmate.Reflection.Emulation.IbmHosts.ITheme,Attachmate.Reflection.Emulation.IbmHosts.IIbmTerminal)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.Theme"/> class. 
            </summary>
            <param name="theme">
            Remote theme instance
            </param>
            <param name="terminal">
            Parent terminal object
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Theme.Parent">
            <summary>
            <c>Gets</c> the parent object. The parent is the IIbmTerminal object.
            </summary>
            <example>
            <code>
            private Theme theme;
            private IIbmTerminal terminal;
            //Get the theme parent.
            terminal = theme.Parent;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Theme.FileName">
            <summary>
            <c>Gets</c> the theme template to use. 
            The Set action for this property is Obsolete and will be removed in a future release.  Use the Theme object's <see cref="M:Attachmate.Reflection.Emulation.IbmHosts.Theme.Load(System.String)"/> method instead.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Theme.Modified">
            <summary>
            Returns the modified state of the theme.
            </summary>
            <remarks>
            <c>True</c> indicates that the theme has been modified since the last save,
            <c>false</c> indicates that it has not been modified.
            </remarks>
            <example>
            <code>
            private Theme theme;
            //Sets the theme Name.
            bool IsModified = theme.Modified;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Theme.Cursor">
            <summary>
            <c>Gets</c> the cursor object associated with the theme.
            </summary>
            <example>
            <code>
            private Theme theme;
            private IThemeCursor cursor;
            //Gets the theme cursor.
            cursor = theme.Cursor;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Theme.ThemeColor">
            <summary>
            <c>Gets</c> the color map object associated with the theme.
            </summary>
            <example>
            <code>
            private Theme theme;
            private IThemeColor color
            //Gets the theme color.
            color = theme.ThemeColor;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Theme.Font">
            <summary>
            <c>Gets</c> the font object associated with the theme.
            </summary>
            <example>
            <code>
            private Theme theme;
            private IThemeFont font;
            //Gets the theme font.
            font = theme.Font;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.Theme.Sounds">
            <summary>
            <c>Gets</c> the sounds object associated with the theme.
            </summary>
            <example>
            <code>
            private Theme theme;
            private IThemeSounds sound;
            //Gets the theme sound.
            sound = theme.Sounds;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Theme.Load(System.String)">
            <summary>
            Loads a new theme into the current session document. 
            </summary>
            <param name="pathName">The path to the new theme.</param>
            <example>
            <code>
            class Program
            {
               private Theme theme;
            
               public Theme ApplicationTheme
               {
                  set{theme = value;}
               }
            
               public void LoadTheme()
               {
                  if(theme != null)
                  {
                    theme.Load("C:\\..");//path of the new theme.
                  }
               }
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Theme.Save">
            <summary>
            Saves changes to the current theme.
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O (input/output) error occurred while trying to save the theme.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to save the theme.
            </exception>
            <example>
            <code>
            class Program
            {
               private Theme theme;
            
               public Theme ApplicationTheme
               {
                  set{theme = value;}
               }
            
               public void LoadTheme()
               {
                  if(theme != null)
                  {
                    theme.Save();
                  }
               }
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Theme.SaveAs(System.String)">
            <summary>
            Saves the current theme contents to a file.
            </summary>
            <param name="pathName">The path to the new theme.</param>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while trying to save the theme.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to save the theme.
            </exception>
            <example>
            <code>
            class Program
            {
               private Theme theme;
            
               public Theme ApplicationTheme
               {
                  set{theme = value;}
               }
            
               public void LoadTheme()
               {
                  if(theme != null)
                  {
                    theme.SaveAs("C:\\..");
                  }
               }
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.Theme.ResetTheme">
            <summary>
            Abandons any changes made in the "dirty" state and 
            applies the last saved settings.
            </summary>
            <example>
            <code>
            class Program
            {
               private Theme theme;
            
               public Theme ApplicationTheme
               {
                  set{theme = value;}
               }
            
               public void LoadTheme()
               {
                  if(theme != null)
                  {
                    theme.ResetTheme();
                  }
               }
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ThemeCursor.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IThemeCursor,Attachmate.Reflection.Emulation.IbmHosts.ITheme)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.ThemeCursor"/> class. 
            </summary>
            <param name="themeCursor">
            Remote theme cursor instance
            </param>
            <param name="theme">
            Parent theme objecgt
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeCursor.Parent">
            <summary>
            <c>Gets</c> the parent object. The parent is the ITheme object.
            </summary>
            <example>
            <code>
            private ThemeCursor cursor;
            private ITheme theme;
            //Gets the parent.
            theme = cursor.Parent;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeCursor.CursorShape">
            <summary>
            	<c>Gets</c> or <c>sets</c> the appearance of the cursor 
            in the terminal window.</summary>
            <remarks>
            	<para>This is stored as a string in the theme.</para>
            	<para>Values:</para>
            	<para>FullBlock (the default)</para>
            	<para>HighHalfBlock</para>
            	<para>LowHalfBlock</para>
            	<para>NoCursor</para>
            	<para>Underline</para>
            </remarks>
            <example>
            	<code title="Set the cursor shape" description="This statement sets the cursor to appear as a rectangle that covers the bottom half of the character space." lang="VB.NET">
            private ThemeCursor cursor;
             
            cursor.CursorShape = CursorShapeOption.LowHalfCursor;</code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeCursor.CursorBlinkRate">
            <summary>
            	<c>Gets</c> or <c>sets</c> the speed at which the cursor blinks 
             in the terminal window.</summary>
            <remarks>This is stored as a string in the theme.
             <para></para><para> Values:</para><para>Fast</para><para>Medium</para><para>NoBlink </para><para>Slow </para><para>System </para></remarks>
            <example>
            	<code title="Set the cursor blink rate" description="This statement sets the cursor blink rate to slow." lang="VB.NET">
            private ThemeCursor cursor;
            cursor.CursorBlinkRate = CursorBlinkingRateOption.Slow;</code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeCursor.RulerCursorVisible">
            <summary>
            Gets or sets whether the ruler cursor is visible.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeCursor.GraphicsCursorShape">
            <summary>
            <c>Gets</c> or <c>Sets</c> the shape of the graphics cursor in 3179G terminal sessions.
            </summary>
            <remarks>
            This property is only valid for 3270 display sessions.
            <para></para>
            Values:
            <para> ColorCrosshair</para>
            <para>Cross</para>
            <para>InvertedCrosshair</para>
            </remarks>
            <example>
            <code>
            private ThemeCursor cursor;
            
            cursor.GraphicsCursorShape = GraphicsCursorShapeOption.InvertedCrosshair;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeCursor.GraphicsCrosshairColor">
            <summary>
            <c>Gets</c> or <c>sets</c> the color of the graphics cross hair
            cursor in a 3179G terminal session.
            </summary>
            <remarks>
            This is only valid for 3270 terminal sessions that emulate 
            the Extended terminal models.
            <para>The values include Black, Blue, Cyan, darkBlue, DarkCyan, DarkGreen, 
            DarkGray, DarkMagenta, DarkRed, DarkYellow, Green, Gray, Magenta, Red, 
            White, and Yellow.</para>
            </remarks>
            <example>
            <code>
            private ThemeCursor cursor;
            
            cursor.GraphicsCrosshairColor = GraphicsCrossHairColorOption.DarkGrey;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeCursor.RestrictCursorMovement">
            <summary>
            Returns or specifies whether the cursor is restricted to 
            input fields in the terminal window.
            </summary>
            <remarks>
            When this property is set to true, the cursor can only be moved within
            or between input fields. If you press Up, for example, the cursor moves
            up to the next input field.
            <para> When this property is set to false, the cursor can be moved out of an input field. 
            Trying to enter text outside of an input field results in an error.
            </para>
            This property is only relevant for 5250 terminal sessions.
            </remarks>
            <example>
            <code>
            private ThemeCursor cursor;
            
            cursor.RestrictCursorMovement = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeCursor.HorizontalCursorSpeed">
            <summary>
            Returns or specifies how many character spaces to move the cursor, 
            either to the left (on Left Double function),
            or to the right (on a Right Double function).
            </summary>
            <remarks>
            This property affects 5250 terminal sessions.
            The default is 3.
            The range of values is 1 - 40. 
            </remarks>
            <example>
            <code>
            private ThemeCursor cursor;
            
            cursor.HorizontalCursorSpeed = 30;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeCursor.VerticalCursorSpeed">
            <summary>
            Returns or specifies how many lines to move the cursor, 
            either up(on an Up Double function), 
            or down (on a Down Double function).
            </summary>
            <remarks>
            This property affects 5250 terminal sessions. 
             The default is 2.
            The range of values is 1 - 12.
            </remarks>
            <example>
            <code>
            private ThemeCursor cursor;
            
            cursor.VerticalCursorSpeed = 10;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ThemeFont.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IThemeFont,Attachmate.Reflection.Emulation.IbmHosts.ITheme)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.ThemeFont"/> class. 
            </summary>
            <param name="themeFont">
            remote theme font instance
            </param>
            <param name="theme">
            parent theme object
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeFont.Parent">
            <summary>
            <c>Gets</c> the parent object. The parent is the ITheme object.
            </summary>
            <example>
            <code>
            private ThemeFont themeFont;
            private ITheme theme;
            //Gets the ITheme parent.
            theme = themeFont.Parent;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeFont.FontName">
            <summary>
            <c>Gets</c> or <code>sets</code> the face name of the terminal 
            font to use.
            </summary>
            <example>
            <code>
            private ThemeFont themeFont;
            private ITheme theme;
            //Gets the Font name.
            string font = themeFont.FontName;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeFont.Bold">
            <summary>
            <c>Gets</c> or <c>sets</c> whether the terminal font has the bold attribute.
            </summary>
            <example>
            <code>
            private ThemeFont themeFont;
            
            themeFont.Bold = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeFont.DisplayVariableWidthFonts">
            <summary>Determines whether variable width fonts are included in the list of 
            fonts that appears in the Fonts section of the Theme Settings.</summary>
            <remarks>The default value is True.</remarks>
            <example>
            	<code title="Set to display variable width fonts" description="The following statement turns on the display of variable width fonts." lang="CS">
            private ThemeFont themeFont;
            themeFont.DisplayVariableWidthFonts = true;</code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeFont.AutoFontSize">
            <summary>
            <c>Gets</c> or <c>sets</c> whether font size auto adjusts
            when the terminal window size changes.
            </summary>
            <example>
            <code>
            private ThemeFont themeFont;
            
            themeFont.AutoFontSize = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeFont.FontSize">
            <summary>
            <c>Gets</c> or <c>sets</c> the size (in points) of the terminal session font.
            </summary>
            <example>
            <code>
            private ThemeFont themeFont;
            
            int size = themeFont.FontSize;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Emulation.IbmHosts.ThemeSounds.#ctor(Attachmate.Reflection.Emulation.IbmHosts.IThemeSounds,Attachmate.Reflection.Emulation.IbmHosts.ITheme)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Emulation.IbmHosts.ThemeSounds"/> class. 
            </summary>
            <param name="themeSounds">
            remote theme sounds instance
            </param>
            <param name="theme">
            parent theme object
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeSounds.Parent">
            <summary>
            <c>Gets</c> the parent object. The parent is the ITheme object.
            </summary>
            <example>
            <code>
            private ThemeSounds themeSound;
            private ITheme theme;
            //Gets the ITheme parent.
            theme = themeSound.Parent;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeSounds.ConnectEventSound">
            <summary>
            <c>Gets</c> or <c>sets</c> the path to the sound file that plays when the session is connected.
            </summary>
            <example>
            <code>
            private ThemeSounds themeSound;
            
            themeSound.ConnectEventSound = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeSounds.DisconnectEventSound">
            <summary>
            <c>Gets</c> or <c>sets</c> the path to the sound file that plays when the session is disconnected.
            </summary>
            <example>
            <code>
            private ThemeSounds themeSound;
            
            themeSound.DisconnectEventSound = "C:\\test.wma";
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeSounds.FieldEnterEventSound">
            <summary>
            <c>Gets</c> or <c>sets</c> the path to the sound file that plays when the cursor enters a field in 
            a display session.
            </summary>
            <example>
            <code>
            private ThemeSounds themeSound;
            
            themeSound.FieldEnterEventSound = "C:\\test.wma";
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Emulation.IbmHosts.ThemeSounds.ScreenChangedEventSound">
            <summary>
            <c>Gets</c> or <c>Sets</c> the path to the sound file that plays when a new screen is displayed in the display session.        
            </summary>
            <example>
            <code>
            private ThemeSounds themeSound;
            
            themeSound.ScreenChangedEventSound = "C:\\test.wma";
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.GetTextArea">
            <summary>
            Defines options that specify how to handle the screen data between Start Row/Col and End Row/Col.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextArea.Stream">
            <summary>
            Continuous data effectively wrapping at screen boundaries.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextArea.Block">
            <summary>
            Data contained within a rectangle defined by the row and column parameters.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.GetTextWrap">
            <summary>
             Specifies screen wrapping characteristics.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextWrap.Off">
            <summary>
            Operations are limited to the beginning and end of the screen.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextWrap.On">
            <summary>
            Operations can wrap at the end of screen if necessary.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.GetTextAttr">
            <summary>
            Describes the field types to return.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextAttr.Any">
            <summary>
            All fields.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextAttr.None">
            <summary>
            No fields.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextAttr.Protected">
            <summary>
            Read-only fields.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextAttr.Unprotected">
            <summary>
            Read/write fields.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextAttr.ProtectionMask">
            <summary>
            Mask selecting only the 'Protection' attributes.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextAttr.Hidden">
            <summary>
            Hidden fields such as password.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextAttr.Visible">
            <summary>
            Visible fields.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextAttr.VisibilityMask">
            <summary>
            Mask selecting only the 'Visibilty' attributes.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Emulation.IbmHosts.GetTextFlags">
            <summary>
            Specifies formatting options.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextFlags.None">
            <summary>
            Don't append anything to lines.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextFlags.CR">
            <summary>
            Appends a trailing CR to lines that don't already have one.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextFlags.CRLF">
            <summary>
            Appends trailing CRLF to lines.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextFlags.TAB">
            <summary>
            Appends trailing TAB to lines.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextFlags.Comma">
            <summary>
            Appends trailing comma to lines.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextFlags.EOLMask">
            <summary>
            Mask used to select the EOL options.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextFlags.NoFinalAppend">
            <summary>
            Does not append selected trailing character to the end of the string.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextFlags.UnwantedSkip">
            <summary>
            Omits unwanted characters from the string.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Emulation.IbmHosts.GetTextFlags.UnwantedComma">
            <summary>
            Replaces unwanted characters with commas.  Otherwise unwanted characters are replaced with spaces.
            </summary>
        </member>
    </members>
</doc>
