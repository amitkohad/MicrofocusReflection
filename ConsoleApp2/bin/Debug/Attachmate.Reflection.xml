<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Attachmate.Reflection</name>
    </assembly>
    <members>
        <member name="T:Attachmate.Reflection.CancelableEventHandler">
            <summary>
            Event handler that handles the cancel method.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Attachmate.Reflection.CancelableEventArgs">
            <summary>
            Event argument for events that can be canceled.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.CancelableEventArgs.m_cancel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.CancelableEventArgs.#ctor">
            <summary>
            CancelableEventArgs constructor.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.CancelableEventArgs.Cancel">
            <summary>
            Gets or sets the Cancel property. Set the Cancel property to true the event.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.CloseOption">
            <summary>
            Indicates how to handle the Save action when closing.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.CloseOption.CloseNoSave">
            <summary>
            Does not save the control's configuration when closing.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.CloseOption.CloseAskSave">
            <summary>
            Prompts users to save the control's configuration when closing.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.CloseOption.CloseAlwaysSave">
            <summary>
            Saves the control's configuration when closing.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.ErrorCode">
            <summary>
            Defines values for error conditions that occur while invoking a method or accessing a property. 
            </summary>
            <remarks>
            Error codes are used in various exception objects. Refer to each individual exception object for details.
            </remarks>
        </member>
        <member name="F:Attachmate.Reflection.ErrorCode.Ok">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.ErrorCode.Error">
            <summary>
            An error has occurred.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.ErrorCode.ParamError">
            <summary>
            The input parameter is invalid.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.ErrorCode.Inhibited">
            <summary>
            The keyboard is locked or input is inhibited.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.ErrorCode.FieldNotExists">
            <summary>
            The field does not exist.
            </summary> 
        </member>
        <member name="T:Attachmate.Reflection.Productivity.AutoComplete">
            <summary>
            Implementation for the Auto Complete Productivity feature.   
            </summary>
            <remarks>
            You can configure Auto Complete settings, including presentation of suggestions 
            and handling of field data. The Auto Complete feature recalls what you type 
            and makes suggestions to help populate fields as it learns common, repeated commands. 
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoComplete.NewInvalidAutoCompleteOperationException">
            <summary>
            Helper exception builder method.
            </summary>
            <returns>New Exception</returns> 
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoComplete.#ctor(Attachmate.Reflection.Productivity.IAutoComplete,Attachmate.Reflection.Productivity.IProductivity)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Productivity.AutoComplete"/> class. 
            The constructor, for internal use.
            </summary>
            <param name="autoComplete">
            Instance of AutoComplete Interface
            </param>
            <param name="productivity">
            Instance of Productivity Interface
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoComplete.Parent">
            <summary>
            Gets the parent object. The parent is the IProductivity object.
            </summary>       
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoComplete.Enabled">
            <summary>
            Gets or sets whether Auto Complete is enabled in the session.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoComplete.IsCaseSensitive">
            <summary>
            Gets or sets whether words are completed on a case-sensitive basis.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoComplete.EnableDataPersistence">
            <summary>
            Gets or sets whether suggestion data is persisted to the session file.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoComplete.IsSuggestionPerScreen">
            <summary>
            Gets or sets whether suggestions are generated from all screen data (true)
            or if suggestions are field-dependent (false).
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoComplete.CompleteAndContinue">
            <summary>
            Gets or sets whether completed text wraps to the ensuing input fields
            when it's too long to fit in the original field.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoComplete.MinimumWordLength">
            <summary>
            Gets or sets the minimum number of characters that must be typed before 
            suggestions are offered. The range of valid values is 1-10.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set value is outside the range of valid values.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoComplete.MaxSuggestions">
            <summary>
            Gets or sets the maximum number of suggestions (between 1 - 10) that Auto Complete offers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set value is outside the range of valid values.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoComplete.MaxWordLength">
            <summary>
            Gets or sets the maximum length of words that can potentially be auto-completed. Longer words are ignored by Auto Complete. The range
            of valid values is 20-200 characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if set value is outside the valid range.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoComplete.AutoCompleteOverwrite">
            <summary>
            Gets or sets how text that follows a completion is treated.
            </summary>
            <remarks> 
            Gets or sets how text that follows a completion is treated.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
            <item>
                <term>EraseToEOFMode</term>
                <description>Erases all data remaining in the field following the completion.</description>
            </item>
            <item>
                <term>InsertMode</term>
                <description>Inserts the completion and pushes all following data toward the end of the field.</description>
            </item>
            <item>
                <term>OverwriteMode</term>
                <description>Overwrites any existing field data.</description>
            </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoComplete.IsDictionaryEmpty">
            <summary>
            Indicates whether the Auto Complete dictionary lacks suggestion data (if true), or if 
            suggestion data is available (if false).
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoComplete.ClearSuggestions">
            <summary>
            This method removes all suggestion data from the previous session.
            </summary>
            <example>
            <code>
            AutoComplete auto = new AutoComplete(IAutoComplete IAuto,IProductivity IProd);
            auto.ClearSuggestions();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoComplete.Dispose(System.Boolean)">
            <summary>
            Free resources explicitly.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.AutoComplete.DictionaryChanged">
            <summary>
            This event is raised when an entry is added to 
            or removed from the Auto Complete dictionary.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoComplete.OnDictionaryChangedEvent(System.EventArgs)">
            <summary>
            Fires DictionaryChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoComplete.DictionaryChangedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.AutoComplete.SuggestionAccepted">
            <summary>
            This event is raised when an Auto Complete suggestion is accepted.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoComplete.OnSuggestionAcceptedEvent(Attachmate.Reflection.Productivity.AutoCompleteAcceptedEventArgs)">
            <summary>
            Fires SuggestionAccepted event.
            </summary>
            <param name="e">AutoCompleteAcceptedEventArgs</param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoComplete.SuggestionAcceptedEventSink(System.Object,Attachmate.Reflection.Productivity.AutoCompleteAcceptedEventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.AutoCompleteAcceptedEventHandler">
            <summary>
            The event delegate for the Auto Complete suggestion accepted event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.AutoCompleteAcceptedEventArgs">
            <summary>
            Event arguments for Auto Complete suggestion accepted event.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.AutoCompleteAcceptedEventArgs.Prefix">
            <summary>
            The word that was completed.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.AutoCompleteAcceptedEventArgs.AcceptedSuggestion">
            <summary>
            The completion, also referred to as the accepted suggestion.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoCompleteAcceptedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initialize the AutoCompleteAcceptedEventArgs variable.
            </summary>
            <param name="prefix">The word to be completed.</param>
            <param name="accepted">The completed word, after a suggestion is accepted.</param>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.AutoExpand">
            <summary>
            Implementation for Auto Expand, a Productivity feature that learns acronyms or shortcuts 
            that, when typed, expand to the associated complex word or phrase. 
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoExpand.#ctor(Attachmate.Reflection.Productivity.IAutoExpand,Attachmate.Reflection.Productivity.IProductivity)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Productivity.AutoExpand"/> class. 
            The constructor, for internal use.
            </summary>
            <param name="autoExpand">
            IAutoExpand object.
            </param>
            <param name="productivity">
            Iproductivity object.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoExpand.Parent">
            <summary>
            Gets the parent object (IProductivity).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoExpand.Enabled">
            <summary>
            Gets or sets whether Auto Expand is enabled in the session.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoExpand.IsCaseSensitive">
            <summary>
            Gets or sets whether abbreviations are expanded on a case-sensitive basis.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoExpand.ExpandAndContinue">
            <summary>
            Gets or sets whether expanded text wraps to the ensuing input fields
            if it's too long to fit in the original field.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoExpand.AutoExpandOverwrite">
            <summary>
            Gets or sets how to treat text that replaces the abbreviation.
            </summary>
            <remarks>
            Gets or sets how to treat text that replaces the abbreviation.
            <list type="bullet">
            <listheader>Values:</listheader>
            <term>EraseToEOFMode</term>
            <description>Erases all data remaining in the field that follows the expansion.</description>
            <term>InsertMode</term>
            <description>Inserts expansion and pushes any following data to the end of the field.</description>
            <term>OverwriteMode</term>
            <description>Overwrites any existing field data.</description>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoExpand.AutoExpandDefinitionCollection">
            <summary>
            Returns an enumerator of the Auto Expand definitions for the current session, 
            or if an enumerator can't be obtained, it returns null.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoExpand.AddEntry(System.String,System.String)">
            <summary>
            Adds a key-value pair to the Auto Expand dictionary.
            </summary>
            <param name="abbreviation">
            The typed abbreviation. 
            </param>
            <param name="expansion">
            The definition for the new dictionary entry. This is the expansion. 
            </param>
            <remarks>
            If the entry already exists, the current entry is updated.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if either of the input parameters are null (or in Visual Basic, is Nothing).
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoExpand.RemoveEntry(System.String)">
            <summary>
            Deletes an Auto Expand dictionary entry.
            </summary>
            <param name="abbreviation">
            The dictionary abbreviation entry to remove.
            </param>
            <remarks>
            Does nothing if the entry does not exist.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the input parameter is null (or in Visual Basic, is Nothing).
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoExpand.RemoveAllEntries">
            <summary>
            Removes all items from Auto Expand, resulting in an empty list.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoExpand.ContainsEntry(System.String)">
            <summary>
            Determines whether a given entry exists in the Auto Expand dictionary.
            </summary>
            <param name="abbreviation">
            An Auto Expand dictionary entry. This is the abbreviation that gets expanded.
            </param>
            <returns>
            True if the abbreviation has an expansion definition; false if it does not.
            </returns>        
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the input parameter is null (or in Visual Basic, is Nothing).
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoExpand.Lookup(System.String)">
            <summary>
            Gets an expansion from a definition in the Auto Expand dictionary.
            </summary>
            <param name="abbreviation">
            An Auto Expand dictionary entry. This is the abbreviation that gets expanded.
            </param>
            <returns>
            The expansion string if an Auto Expand entry exists, or null if an entry doesn't exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the input parameter is null (or in Visual Basic, is Nothing).
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoExpand.Dispose(System.Boolean)">
            <summary>
            Disposes the terminal object.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.AutoExpand.DictionaryChanged">
            <summary>
            Raised when a dictionary entry is added, edited, or removed from the Auto Expand dictionary.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoExpand.OnDictionaryChanged(System.EventArgs)">
            <summary>
            Fires DictionaryChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoExpand.DictionaryChangedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.AutoExpand.AutoExpanded">
            <summary>
            Raised after an abbreviation is expanded in the session.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoExpand.OnAutoExpanded(Attachmate.Reflection.Productivity.AutoExpandEventArgs)">
            <summary>
            Fires AutoExpanded event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoExpand.AutoExpandEventSink(System.Object,Attachmate.Reflection.Productivity.AutoExpandEventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.AutoExpandDefinition">
            <summary>
            Contains an Auto Expand key-value pair that maps an abbreviation string to
            an expansion string.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoExpandDefinition.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="abbreviation">
            The string that triggers an expansion.
            </param>
            <param name="expansion">
            The expansion string that replaces the abbreviation.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoExpandDefinition.Abbreviation">
            <summary>
            Returns the abbreviation <c>string</c>.
            </summary>
            <example>
            <code>
            AutoExpandDefinition autoExpandDef;
            string strAbb = autoExpandDef.Abbreviation;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.AutoExpandDefinition.Expansion">
            <summary>
            Returns the expansion <c>string</c>.
            </summary>
            <example>
            <code>
            AutoExpandDefinition autoExpandDef;
            string strExp = autoExpandDef.Expansion;
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.AutoExpandEventHandler">
            <summary>
            Auto Expand event delegate.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.AutoExpandEventArgs">
            <summary>
            Specifies event arguments for the Auto Expansion event.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.AutoExpandEventArgs.Abbreviation">
            <summary>
            The abbreviation that triggered the expansion.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.AutoExpandEventArgs.Expansion">
            <summary>
            The expansion string.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.AutoExpandEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="abbr">The abbreviation that triggered an expansion.</param>
            <param name="exp">The expansion string.</param>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.IAutoComplete">
            <summary>
            Defines the interface and settings for Auto Complete, a Productivity feature
            that helps populate fields by suggesting common or repeated commands based on 
            what you've typed previously.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.IAutoComplete.DictionaryChanged">
            <summary>
            Raised when an Auto Complete dictionary entry is added or removed.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.IAutoComplete.SuggestionAccepted">
            <summary>
            Raised when a word is completed (a suggestion is accepted).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoComplete.Parent">
            <summary>
            Gets the parent object (IProductivity).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoComplete.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether to complete words on a case-sensitive basis.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoComplete.EnableDataPersistence">
            <summary>
            Gets or sets a value indicating whether suggestion data is persisted to the session file.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoComplete.IsSuggestionPerScreen">
            <summary>
            Gets or sets a value indicating whether suggestions are generated from all screen data (if true)
            or if they are field-dependent (if false).
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoComplete.CompleteAndContinue">
            <summary>
            Gets or sets a value indicating whether to wrap completed text to ensuing input fields
            if it's too long to fit in the original field.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoComplete.MinimumWordLength">
            <summary>
            Gets or sets the minimum number of characters (between 1-10) 
            that must be typed before suggestions are offered. 
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if set value is outside the valid range.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoComplete.MaxSuggestions">
            <summary>
            Gets or sets the maximum number of suggestions (between 1-10).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if set value is outside the valid range.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoComplete.MaxWordLength">
            <summary>
            Gets or sets the maximum length of words that can potentially be auto-completed. Longer words are ignored by Auto Complete. The range
            of valid values is 20-200 characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if set value is outside the valid range.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoComplete.AutoCompleteOverwrite">
            <summary>
            Gets or sets how to treat text that follows a completion.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
                <item>
                    <term>EraseToEOFMode</term>
                    <description>Erases all data remaining in the field following the completion.</description>
                </item>
                <item>
                     <term>InsertMode</term>
                    <description>Inserts completion and pushes following data to the end of the field.</description>
                </item>
                <item> 
                    <term>OverwriteMode</term>
                    <description>Overwrites any existing field data.</description>
                </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoComplete.Enabled">
            <summary>
            Gets or sets a value indicating whether to enable Auto Complete in the session.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoComplete.IsDictionaryEmpty">
            <summary>
            Gets a value indicating whether suggestion data for the Auto Complete dictionary is available (if false)
            or not (if true).
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IAutoComplete.ClearSuggestions">
            <summary>
            Removes all previous session suggestion data.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.IAutoExpand">
            <summary>
            Defines the interface and configures settings for the Auto Expand Productivity feature. 
            </summary>
            <remarks>
            For example, you can build a dictionary of acronyms and shortcuts that, when typed,
            expand to the longer word or phrase. 
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoExpand.Parent">
            <summary>
            Gets the parent object (IProductivity).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoExpand.IsCaseSensitive">
            <summary>
            Gets or sets whether to expand abbreviations on a case-sensitive basis.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoExpand.ExpandAndContinue">
            <summary>
            Gets or sets whether to wrap expanded text to ensuing input fields
            if it's too long to fit in the original field.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoExpand.AutoExpandOverwrite">
            <summary>
            Gets or sets how to treat text that follows an expansion.
            </summary>
            <remarks>
            Gets or sets how to treat text that follows an expansion.
            <list type="bullet">
            <listheader><term>Values:</term></listheader>
                <item>
                    <term>EraseToEOFMode</term>
                    <description>Erases all remaining data in the field following the expansion.</description>
                </item>
                <item>
                    <term>InsertMode</term>
                    <description>Inserts the expansion and pushes any following data to the end of the field.</description>
                </item>
                <item>
                    <term>OverwriteMode</term>
                    <description>Overwrites any existing field data.</description>
                </item>
            </list>
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoExpand.Enabled">
            <summary>
            Gets or sets whether to enable Auto Expand in the session.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IAutoExpand.AutoExpandDefinitionCollection">
            <summary>
            Returns an enumerator of Auto Expand definitions defined for
            the session or null if no definitions exist.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IAutoExpand.AddEntry(System.String,System.String)">
            <summary>
            Adds a key-value pair to the Auto Expand dictionary.
            </summary>
            <param name="abbreviation">
            The typed abbreviation. 
            </param>
            <param name="expansion">
            The definition, or expanded form, of the new dictionary entry.  
            </param>
            <remarks>
            Updates the current entry, if one exists.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if either of the input parameters are null (or in Visual Basic, are Nothing).
            </exception>
            <example>
            <code>
            AutoExpandDefinition autoExpandDef;
            string strAbb = autoExpandDef.Abbreviation;
            string strExp = autoExpandDef.Expansion;
            AddEntry(strAbb,strExp);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IAutoExpand.RemoveEntry(System.String)">
            <summary>
            Deletes an Auto Expand dictionary entry.
            </summary>
            <param name="abbreviation">
            The dictionary abbreviation entry to remove.
            </param>
            <remarks>
            This exception does nothing if the entry does not exist.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the input parameter is null (or in Visual Basic, is Nothing).
            </exception>
            <example>
            <code>
            AutoExpandDefinition autoExpandDef;
            string strAbb = autoExpandDef.Abbreviation;
            RemoveEntry(strAbb);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IAutoExpand.RemoveAllEntries">
            <summary>
            Removes all items from Auto Expand, resulting in an empty list.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IAutoExpand.ContainsEntry(System.String)">
            <summary>
            Determines whether a given entry exists in the Auto Expand dictionary.
            </summary>
            <param name="abbreviation">
            An Auto Expand dictionary entry. This should be the abbreviation that gets expanded.
            </param>
            <returns>
            True if the abbreviation has an expansion definition; false if it does not.
            </returns>        
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the input parameter is null (or in Visual Basic, is Nothing).
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IAutoExpand.Lookup(System.String)">
            <summary>
            Gets an expansion from a definition in the Auto Expand dictionary.
            </summary>
            <param name="abbreviation">
            An Auto Expand dictionary entry. The abbreviation that gets expanded.
            </param>
            <returns>
            The expansion string if an entry exists, or null if an entry doesn't exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the input parameter is null (or in Visual Basic, is Nothing).
            </exception>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.IAutoExpand.DictionaryChanged">
            <summary>
            Raised when an Auto Expand dictionary entry is added, edited, or removed.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.IAutoExpand.AutoExpanded">
            <summary>
            Raised after a word has been expanded in the session.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.IOfficeTools">
            <summary>
            Defines the interface for the Office Tools Productivity feature.
            </summary>
            <remarks>
            Allows configuration access to Office applications and features, including the 
            ability to add host data to selected Office template files.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.Parent">
            <summary>
            Gets the parent object (IProductivity).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.CloseOfficeDocsOnAppExit">
            <summary>
            Determines if documents created by Office Tools and Office Suite applications 
            close when Reflection closes (true), or if they stay open (false).
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.IncludeScreenData">
            <summary>
            Gets or sets whether to insert host screen data in new Office items.
            </summary>
            <remarks>
            If true, the live host screen (or the active selection on that screen) is inserted into
            newly created Office documents. If false, no host data is inserted.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.CopyAsImage">
            <summary>
            Gets or sets whether to copy the host screen data as an image (true)
            or as text (false) if images are supported by the Office Suite.
            </summary>
            <remarks>
            If the document type supports only text, the document will 
            always copy screen data as text, regardless of this value.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.WordProcessingTemplate">
            <summary>
            Gets or sets the path of the template to use when creating a word-processing document.
            </summary>
            <remarks>
            To configure Office Tools to not use a template, pass in an empty string instead of null
            (or in Visual Basic, Nothing).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null (or in Visual Basic, is Nothing).
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.WordProcessingBookmark">
            <summary>
            Gets or sets the name of the bookmark at which to insert text when creating a word-processing document.        
            </summary>
            <remarks>
            This property is only used in conjunction with an active word-processing template.
            To configure Office Tools to not use a bookmark, pass in an empty string instead of null
            (or in Visual Basic, Nothing).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null (or in Visual Basic, is Nothing).
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.SlideshowTemplate">
            <summary>
            Gets or sets the presentation template for creating new slideshows.
            </summary>
            <remarks>
            This property is relevant only if the Office Tools assembly supports slideshow
            templates. To configure Office Tools to not use a template, pass in an empty string instead of null
            (or in Visual Basic, Nothing).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null (or in Visual Basic, is Nothing).
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.EmailEnabled">
            <summary>
            Gets a value that indicates whether the installed Office Tools assembly 
            supports viewing the e-mail application and creating new e-mail messages.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.NoteEnabled">
            <summary>
            Gets a value that indicates whether the installed Office Tools assembly 
            supports new notes.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.TaskEnabled">
            <summary>
            Gets a value that indicates whether the installed Office Tools assembly 
            supports new tasks.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.AppointmentEnabled">
            <summary>
            Gets a value that indicates whether the installed Office Tools assembly 
            supports new appointments.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.ContactEnabled">
            <summary>
            Gets a value that indicates whether the installed Office Tools assembly 
            supports viewing the contact list and creating new contacts.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.WordProcessingEnabled">
            <summary>
            Gets a value that indicates whether the installed Office Tools assembly 
            supports new word-processing documents.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.SlideshowEnabled">
            <summary>
            Gets a value that indicates whether the installed Office Tools assembly 
            supports new slideshow presentations.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IOfficeTools.OfficeToolsPaneVisible">
            <summary>
            Gets or sets the visible state of the dockable Office Tools panel.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IOfficeTools.CreateNewEmailMessage(System.String)">
            <summary>
            Creates a new e-mail message.
            </summary>
            <param name="messageBodyText">
            The text to insert in the e-mail message body. If null (or in Visual Basic, Nothing) is passed in, 
            a textual representation of the current host screen is inserted.
            </param>        
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IOfficeTools.ActivateEmailApp">
            <summary>
            Activates the e-mail application.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IOfficeTools.CreateNewContact(System.String)">
            <summary>
            Creates a new address book contact.
            </summary>
            <param name="contactBodyText">
            The text to insert in the contact body. If null (or in Visual Basic, Nothing) is passed in, a textual
            representation of the current host screen is inserted.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IOfficeTools.ActivateContactsApp">
            <summary>
            Activates the address book application.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IOfficeTools.CreateNewAppointment(System.String)">
            <summary>
            Creates a new calendar appointment.
            </summary>
            <param name="appointmentBodyText">
            The text to insert in the appointment body. If null (or in Visual Basic, Nothing) is passed in, 
            a textual representation of the current host screen is inserted.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IOfficeTools.CreateNewNote(System.String)">
            <summary>
            Creates a new note.
            </summary>
            <param name="noteText">
            The text to insert in the note. If null (or in Visual Basic, Nothing) is passed in, a textual
            representation of the current host screen is inserted.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IOfficeTools.CreateNewTask(System.String)">
            <summary>
            Creates a new calendar task.
            </summary>
            <param name="taskBodyText">
            The text to insert in the task body. If null (or in Visual Basic, Nothing) is passed in, a textual
            representation of the current host screen is inserted.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IOfficeTools.CreateWordProcessingDocument(System.String,System.String,System.String)">
            <summary>
            Creates a new word-processing document.
            </summary>
            <param name="text">
            The text to insert in the document. If null (or in Visual Basic, Nothing) is passed in, a textual
            representation of the current host screen is inserted.
            </param>
            <param name="template">
            A template to use when creating the new document. If null, invalid, or not found (or in Visual Basic, Nothing),
            no template is used.
            </param>
            <param name="bookmark">
            A location in the templated document to insert the text. If invalid, null, or not specified (or in Visual Basic, Nothing),
            text is inserted at the beginning of the document.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IOfficeTools.CreateWordProcessingDocumentWithGraphic(System.String,System.String,System.String)">
            <summary>
            Creates a new word-processing document with graphics.
            </summary>
            <param name="path">
            The path of the image to insert in the document. If null (or in Visual Basic, Nothing) is passed in, then a graphical
            representation of the current host screen is used.
            </param>
            <param name="template">
            The template for creating new documents. If null, invalid, or not found (or in Visual Basic, Nothing) 
            no template is used.
            </param>
            <param name="bookmark">
            The location in the template to insert a graphic. If null, invalid, or not specified (or in Visual Basic, Nothing),
            the graphic is inserted at the beginning of the document.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IOfficeTools.CreateWordProcessingDocumentWithGraphicSet(System.Collections.Generic.IList{System.Drawing.Image},System.String,System.String)">
            <summary>
            Creates a new word-processing document with a set of graphics.
            </summary>
            <param name="screens">
            A set of screen images to insert into the document.
            </param>
            <param name="template">
            The template to use when creating new documents. If null, invalid, or not found (or in Visual Basic, Nothing),
            no template is used.
            </param>
            <param name="bookmark">
            The location in the document to insert a graphic. If null, invalid, or not found (or in Visual Basic, Nothing)
            the graphic is inserted at the beginning of the document.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IOfficeTools.GetBookmarks(System.String)">
            <summary>
            Gets the collection of bookmarks in a word-processing template file.
            The method returns null if the Office Tools assembly does not support
            the use of templates and bookmarks for word-processing.
            </summary>
            <param name="templateFile">
            The word-processing template file in which to search for bookmarks.
            </param>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.IProductivity">
            <summary>
            Defines the interface for the base Productivity feature. 
            </summary>
            <remarks>
            This interface is also the parent of Productivity features, 
            such as Auto Complete, Spell Check, and Screen History.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IProductivity.Parent">
            <summary>
            Gets the parent object (IIbmTerminal).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IProductivity.AutoExpand">
            <summary>
            Gets the Auto Expand object, which holds configuration properties, methods,
            and events for the Auto Expand Productivity feature.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IProductivity.AutoComplete">
            <summary>
            Gets the Auto Complete object, which holds configuration properties, methods,
            and events for the Auto Complete Productivity feature.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IProductivity.RecentTyping">
            <summary>
            Gets the Recent Typing object, which holds configuration properties, methods,
            and events for the Recent Typing Productivity feature.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IProductivity.ScreenHistory">
            <summary>
            Gets the Screen History object, which holds configuration properties, methods,
            and events for the Screen History Productivity feature.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IProductivity.SpellCheck">
            <summary>
            Gets the Spell Check object, which holds configuration properties, methods,
            and events for the Spell Check Productivity feature.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IProductivity.ScratchPadPanelVisible">
            <summary>
            Gets or sets the visible state of the dockable Scratch Pad panel.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IProductivity.ScratchPadContents">
            <summary>
            Gets or sets allowable text contents for the Scratch Pad.
            </summary>
            <remarks>The Scratch Pad accepts text strings and Rich Text Format (RTF) strings. To empty the Scratch Pad contents, pass in an empty string. (Do not pass in null).</remarks>
            <exception caption="" cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IProductivity.OfficeTools">
            <summary>
            Gets the Office Tools object, which holds configuration properties, methods,
            and events for the Office Tools Productivity feature.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IProductivity.ScratchPadContentsAsText">
            <summary>
            Gets the Scratch Pad contents as text without any Rich Text Format markup.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IProductivity.ScratchPadLoad(System.String)">
            <summary>
            Loads the contents of the specified file into Scratch Pad.
            </summary>
            <param name="filePath">The full path of the file to load into Scratch Pad.</param>
            <returns>ReturnCode.Success if the load succeeded, ReturnCode.Error if it failed.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IProductivity.ScratchPadSaveAs(System.String)">
            <summary>
            Saves Scratch Pad contents to the specified file.
            </summary>
            <param name="filePath">The full path of the file to which Scratch Pad contents are saved.</param>
            <returns>ReturnCode.Success if the save succeeded, ReturnCode.Error if it failed.</returns>
            <remarks>If filePath exists, the file is overwritten.</remarks>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.IRecentTyping">
            <summary>
            Defines the interface to the Recent Typing Productivity feature.
            </summary>
            <remarks>
            Recent Typing allows you to select from a list of recently-typed items 
            and send the selected string to the active document. This feature eliminates 
            the need to manually re-enter information, saving time and reducing typing errors.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IRecentTyping.Parent">
            <summary>
            Gets the parent object (IProductivity).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IRecentTyping.MaxListItems">
            <summary>
            Gets or sets the maximum number of items (between 1 - 1000) that can appear in the
            Recent Typing list. 
            </summary>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set value is outside the valid range.
            </exception>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="This sample sets the MaxListItems property to limit the maximum number of words in the Recent Typing list to 50." source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureRecentTyping\ConfigureRecentTyping\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IRecentTyping.MinimumMatch">
            <summary>
            Gets or sets the minimum length of words (in characters) that are added to Recent Typing.  
            </summary>
            <remarks>
            The valid range of values is 1 - 100.
            </remarks>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set value is outside the valid range.
            </exception>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="This sample sets the MinimumMatch property to add only words with 5 or more characters to the  Recent Typing list." source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureRecentTyping\ConfigureRecentTyping\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IRecentTyping.ClearListOnDisconnect">
            <summary>
            Gets or sets whether to clear the Recent Typing list contents when the 
            session disconnects.
            </summary>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="This sample sets the ClearListOnDisconnect property to keep the Recent Typing list when the session is disconnected." source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureRecentTyping\ConfigureRecentTyping\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IRecentTyping.RecentTypingPanelVisible">
            <summary>Gets or sets the visible state of the dockable Recent Typing panel.</summary>
            <example>
            	<code title="Example" description="This sample sets the RecentTypingPanelVisible property to display the Recent Typing Panel in the frame." source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureRecentTyping\ConfigureRecentTyping\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IRecentTyping.Enabled">
            <summary>
            Gets or sets whether Recent Typing is enabled in the session.
            </summary>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="This sample uses the Enable property to enable Recent Typing." source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureRecentTyping\ConfigureRecentTyping\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IRecentTyping.RecentTypingCollection">
            <summary>
            Returns an enumeration of items currently in the Recent Typing list.
            </summary>
            <example>
            	<code title="Example" description="This sample iterrates through the RecentTypingCollection array, checks for the &quot;SecretStuff&quot; entry, and deletes it from the list if it is found.  " source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureRecentTyping\ConfigureRecentTyping\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IRecentTyping.AddListItem(System.String)">
            <summary>
            Adds a string to the end of the Recent Typing list.
            </summary>
            <param name="newItem">
            The user-typed string to append to the list.
            </param>
            <exception caption="" cref="T:System.ArgumentNullException">
            This exception is thrown if newItem is null (or in Visual Basic, is Nothing).
            </exception>
            <example>
            	<code title="Configure Recent Typing" description="This sample uses AddListItem to add the &quot;kayak&quot; command to the Recent Typing list." source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureRecentTyping\ConfigureRecentTyping\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IRecentTyping.DeleteListItem(System.Int32)">
            <summary>
            Deletes a string from the Recent Typing list.
            </summary>
            <param name="index">
            The index of the item to remove from Recent Typing.
            </param>
            <example>
            	<code title="Example" description="This sample deletes the string &quot;SecretStuff&quot; immediately after it is added to the Recent Typing list.  " source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureRecentTyping\ConfigureRecentTyping\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IRecentTyping.DeleteListItem(System.String)">
            <summary>
            Deletes a string from the Recent Typing list.
            </summary>
            <param name="deleteItem">
            The string to remove from Recent Typing.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if deleteItem is null (or in Visual Basic, is Nothing).
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IRecentTyping.ClearAllItems">
            <summary>
            Removes all items from Recent Typing, resulting in an empty list.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.IRecentTyping.ListChanged">
            <summary>
            Raised when a string is added to or removed from the Recent Typing list.
            </summary>
            <example>
            	<code title="Example" description="This sample handles the ListChanged Event to delete the entry &quot;SecretStuff&quot; if it is added to the Recent Typing list." source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureRecentTyping\ConfigureRecentTyping\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.IScreenHistory">
            <summary>
            Defines the interface for the Screen History feature. 
            </summary>
            <remarks>
            Screen History contains a list of previously viewed, navigable host screens. 
            Configuration items can be retrieved or set.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IScreenHistory.Parent">
            <summary>
            Gets the parent object (IProductivity).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IScreenHistory.NumberOfScreensToRemember">
            <summary>
            Gets or sets the number of host screens in the Screen History list.
            </summary>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="This sample sets the NumberOfScreensToRemember to limit the number of screens in the screen history to 25." source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ScreenHistory\ScreenHistory\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IScreenHistory.ManualCaptureOnly">
            <summary>
            Gets or sets whether host screens are only captured manually (true) 
            or if they're captured automatically (false).
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IScreenHistory.ClearHistoryOnDisconnect">
            <summary>
            Gets or sets a value for whether to clear the screen list when the session disconnects (if true).
            </summary>
            <example>
            	<code title="Example" description="This sample sets the ClearHistoryOnDisconnect property to keep the screen history list when the session disconnects. " source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ScreenHistory\ScreenHistory\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IScreenHistory.ScreenHistoryPanelVisible">
            <summary>Gets or sets the visible state of the dockable Screen History panel.</summary>
            <example>
            	<code title="Example" description="This samples sets the ScreenHistoryPanelVisible property to display the Screen History panel in the frame." source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ScreenHistory\ScreenHistory\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IScreenHistory.Count">
            <summary>
            Returns the number of screens listed in the Screen History of the session.
            </summary>
            <example>
            	<code title="Example" description="This sample uses the Count property to check for an empty list." source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\SelectiveScreenHistory\SelectiveScreenHistory\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.IScreenHistory.Index">
            <summary>
            Returns the zero-based index of the current history screen or -1 if the live
            screen is active.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IScreenHistory.CaptureScreen">
            <summary>
            Captures the current host screen, including any data entered in non-hidden fields,
            and adds it to the Screen History list. 
            </summary>
            <remarks> 
            If privacy filters are enforced, sensitive data in unprotected fields will be replaced 
            in the screen capture by the first filter that has matching criteria.
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IScreenHistory.ShowLiveScreen">
            <summary>
            Shows the current host screen from anywhere in the screen history sequence.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IScreenHistory.Forward">
            <summary>
            Shows the next host screen from the Screen History list in read-only mode.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IScreenHistory.Back">
            <summary>
            Shows the previous host screen from the Screen History list in read-only mode.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IScreenHistory.ClearAllScreens">
            <summary>
            Remove all screens from the Screen History list.
            </summary>
            <example>
            	<code title="Example" description="This samples sets the ClearAllScreens property to clear the screen history after opening the session. " source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\SelectiveScreenHistory\SelectiveScreenHistory\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IScreenHistory.DeleteScreen(System.Int32)">
            <summary>
            Deletes a specific screen from the Screen History list.
            </summary>
            <param name="index">The zero-based index of the screen to delete from the list.</param>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">This exception is thrown if the index 
            is negative or exceeds the range of available screens.</exception>
            <example>
            This sample deletes the first screen (the log in screen) in the Screen History list before saving the remaining screens in the list to as images in a Word
            document and then saving the list to a file.
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IScreenHistory.ShowScreen(System.Int32)">
            <summary>
            Shows a specific screen from the Screen History list.
            </summary>
            <param name="index">The zero-based index of the screen to make active.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">This exception is thrown if the index 
            is negative or exceeds the range of available screens.</exception>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IScreenHistory.GetLiveScreenImage">
            <summary>
            Returns the live screen as an image. 
            </summary>
            <remarks>Returned images are subject to currently enforced privacy filters.
            <para>This method can be used in conjunction with the NewScreenReady event to build a list of screen images.</para><para>The returned image can be used in conjunction with the Productivity.OfficeTools CreateWordProcessingDocumentWithGraphicSet method if the installed Office
            Suite and Office Tools adapter assembly support the use of graphics in word-processing documents.</para>Returns the live screen as an image.</remarks>
            <returns>
            The live screen, in image format.
            </returns>
            <example>
            	<code title="Example" description="This samples handles the NewScreenReady event and GetLiveScreenImage to create a list of screen images that include only screens on the Kayak program. Then it uses the CreateWordProcessingDocumentWithGraphicSet method to save the images in a Word document." source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\SelectiveScreenHistory\SelectiveScreenHistory\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IScreenHistory.GetHistoryScreenImage(System.Int32)">
            <summary>
            Returns a history screen as an image.
            </summary>
            <param name="index">
            The zero-based index of the history screen to capture. This must be a value between
            0 and Count-1.
            </param>
            <remarks>
            Returned images are subject to currently configured privacy filters.
            The returned image can be used in conjunction with the Productivity.OfficeTools
            CreateWordProcessingDocumentWithGraphicSet method if the installed Office Suite
            and Office Tools adapter assembly support the use of graphics in 
            word-processing documents.
            </remarks>
            <returns>
            An image of the specified history screen.
            </returns>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the index does not correspond to a valid screen index in the current Screen
            History list.
            </exception>
            <example>
            	<code title="Example" description="This sample uses GetHistoryScreenImage to save the screens in the Screen History list as images in a Word document before the session is disconnected. " source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ScreenHistory\ScreenHistory\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IScreenHistory.OpenScreenHistoryFile(System.String,System.Boolean)">
            <summary>Loads a screen history file into the session document.</summary>
            <param name="path">The name of the file to load screen history from.</param>
            <param name="overwrite">If true, clears current contents first before loading from file. If false, 
            file contents are appended to screen list.</param>
            <returns>ReturnCode.Success if the load succeeds, ReturnCode.Error if it failed.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.IScreenHistory.SaveScreenHistoryFile(System.String,System.Boolean)">
            <summary>Saves screen history contents to the specified file.</summary>
            <param name="filePath">The full pathname of the file to save the screen history contents to.</param>
            <param name="overwrite">If true, overwrites an existing copy of the file. If false, the file will not be saved if it already exists.</param>
            <remarks>If filePath exists, the file is overwritten.</remarks>
            <returns>ReturnCode.Success if the save succeeded, ReturnCode.Error if it failed.</returns>
            <example>
            	<code title="Example" description="This sample uses SaveScreenHistory to save the screen history to the myScreens.rshx file before the session is disconnected. If the file exists, it is overwritten with the new screen history." source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ScreenHistory\ScreenHistory\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.IScreenHistory.ScreenChanged">
            <summary>
            Raised when screens are added to or deleted from the Screen History list.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.IScreenHistory.ScreenSelected">
            <summary>
            Raised when a history screen has been selected.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.SpellingLanguage">
            <summary>
            Specifies the main language dictionary to use to review the spelling 
            of words, if the Spell Check engine supports multiple languages.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.SpellingLanguage.None">
            <summary>
            No language is defined.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.SpellingLanguage.EnglishUS">
            <summary>
            English (United States of America).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.SpellingLanguage.EnglishUK">
            <summary>
            English (United Kingdom).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.SpellingLanguage.EnglishCanada">
            <summary>
            English (Canada).
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.SpellingLanguage.Spanish">
            <summary>
            Spanish.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.SpellingLanguage.French">
            <summary>
            French.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.SpellingLanguage.Italian">
            <summary>
            Italian.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.SpellingLanguage.German">
            <summary>
            German.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.SpellingLanguage.BrazilianPortuguese">
            <summary>
            Portuguese (Brazilian).
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.ISpellCheck">
            <summary>
            Defines the interface for the Spell Check Productivity feature.
            </summary>
            <remarks>
            You can configure Spell Check settings or review text for misspelled words
            on the current host screen or the current field. 
            </remarks>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.ISpellCheck.MisspelledWord">
            <summary>
            Raised when a word is misspelled in a host session. This event is not raised
            for spelling errors found via the CheckField or CheckScreen calls.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.Parent">
            <summary>
            Gets the parent object (IProductivity).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.AutoCorrect">
            <summary>
            Gets or sets a value indicating whether to correct spelling errors as you type, provided 
            that suggestions are available for the misspelled word.
            </summary>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.CheckSpellingAsType">
            <summary>Gets or sets a value indicating whether to review text for spelling errors and add wavy red lines under words that might be mispelled as you type.</summary>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.IgnoreAllUppercase">
            <summary>
            Gets or sets  a value indicating whether entirely uppercase words are reviewed for spelling errors. 
            </summary>
            <remarks>
            Uppercase words are reviewed (if false) and are not reviewed (if true).
            </remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.IgnoreWordsWithNumbers">
            <summary>
            Gets or sets  a value indicating whether words that contain numerals are reviewed for spelling errors.
            </summary>
            <remarks>
            Words with numerals are reviewed (if false) and not reviewed (if true). 
            </remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.CorrectTwoInitialCaps">
            <summary>
            Gets or sets  a value indicating whether words that start with two or more uppercase letters (the rest in lowercase)
            are corrected to start with one uppercase letter followed by lowercase letters.
            </summary>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.CorrectAccidentalCapsLock">
            <summary>
            Gets or sets a value indicating whether words that start with one lowercase letter followed by uppercase letters 
            are corrected to start with one uppercase letter followed by lowercase letters. 
            </summary>
            <remarks>
            When these words are corrected, the Caps Lock key state is toggled.
            </remarks>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.CustomDictionaryPath">
            <summary>
            Gets or sets the full path to a custom dictionary file to use with Spell Check.
            </summary>
            <remarks>
            To not use a custom dictionary, use an empty string as the parameter. Do not
            use null (or in Visual Basic, Nothing).
            </remarks>
            <exception caption="" cref="T:System.ArgumentNullException">
            Thrown if the set value is null (or in Visual Basic is Nothing).
            </exception>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.MinimumMatch">
            <summary>
            Gets or sets the minimum field length (between 2 - 1920) in which spelling is reviewed. 
            </summary>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified value is outside the valid range.
            </exception>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.MaxSuggestions">
            <summary>
            Gets or sets the maximum number of spelling suggestions (between 1 - 10) offered for a misspelled word.
            </summary>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified value is outside the valid range.
            </exception>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.MaxWordLength">
            <summary>
            Gets or sets the maximum length of words checked for spelling (between 20-200 characters). Longer words are ignored by the spell checker.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if set value is outside the valid range.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.MainLanguage">
            <summary>
            Gets or sets the language of the Spell Check dictionary, 
            provided that the Spell Check engine supports multiple languages.         
            </summary>
            <exception caption="" cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown when the specified value is outside the valid range.
            </exception>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.Enabled">
            <summary>
            Gets or sets  a value indicating whether Spell Check is enabled in the terminal session.
            </summary>
            <exception caption="" cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ISpellCheck.MisspelledWordCollection">
            <summary>
            Returns a collection of misspelled words from the current host screen.
            </summary>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ISpellCheck.CheckScreen">
            <summary>
            Reviews the current screen contents for misspellings.
            </summary>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ISpellCheck.CheckCurrentField">
            <summary>
            Reviews the current field contents for misspellings.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ISpellCheck.RemoveMisspelling(Attachmate.Reflection.Productivity.MisspelledWord)">
            <summary>
            Removes the specified word from the misspelled word list and
            clears the associated misspelling attribute on the screen.
            </summary>
            <param name="word">The word to remove from the misspelled word list.</param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ISpellCheck.RemoveAllMisspellings">
            <summary>
            Clears all misspelled words from the current screen.
            </summary>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ISpellCheck.CorrectMisspelling(Attachmate.Reflection.Productivity.MisspelledWord,System.String)">
            <summary>
            Replaces a misspelled word with a correction at the specified location.
            </summary>
            <param name="misspelled">The misspelled word.</param>
            <param name="correction">The correctly spelled word which replaces the misspelled word.</param>
            <exception caption="" cref="T:System.ArgumentNullException">
            Thrown if either of the input arguments are null (or in Visual Basic are Nothing).
            </exception>
            <exception caption="" cref="T:System.ArgumentException">
            Thrown if the correction string parameter is zero-length (empty).
            </exception>
            <example>
            	<code title="Example" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ISpellCheck.AddToCustomDictionary(System.String)">
            <summary>
            Adds a word to the active custom dictionary, provided that a custom dictionary is set.
            </summary>
            <param name="newWord">The word to add to the dictionary</param>
            <remarks>
            After a word is added, it's no longer recognized as misspelled.
            <para>If no custom dictionary is specified, this has no effect.</para></remarks>
            <exception caption="" cref="T:System.ArgumentNullException">
            Thrown if the input argument is null (or in Visual Basic is Nothing).
            </exception>
            <exception caption="" cref="T:System.ArgumentException">
            Thrown if the input parameter is zero-length (empty).
            </exception>
            <example>
            	<code title="Configure Spellcheck" description="" source="..\..\..\..\..\..\alloy\trunk\core\dev\Docs\Net_Help\projects\Common\ConfigureSpelling\ConfigureSpelling\Program.cs" lang="CS"></code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.MisspelledWord">
            <summary>
            Contains the attributes of a misspelled word on a host screen.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.MisspelledWord.#ctor(System.Int32,System.Int32,System.String,System.String[])">
            <summary>
            Constructor. Returns the suggested word. 
            </summary>
            <param name="startRow">Starting row screen coordinate of the misspelled word.</param>
            <param name="startCol">Starting column screen coordinate of the misspelled word.</param>
            <param name="word">The misspelled word.</param>
            <param name="suggestions">Any spelling suggestions that are available for correction.</param>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.MisspelledWord.StartRow">
            <summary>
            Returns the starting <c>row</c> of the misspelled word.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.MisspelledWord.StartCol">
            <summary>
            Returns the starting <c>column</c> of the misspelled word.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.MisspelledWord.Word">
            <summary>
            Returns the word that was misspelled.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.MisspelledWord.Suggestions">
            <summary>
            Returns a list of suggested spelling corrections for the misspelled word. 
            </summary>           
            <remarks>
            The return value can be <c>empty</c>.
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.MisspelledWord.GetHashCode">
            <summary>
            Gets a hash code for this <c>object</c>.
            </summary>
            <returns>A hashcode.</returns>
            <example>
            <code>
            public int Row;
            int HashCode = Row.GetHashCode();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.MisspelledWord.Equals(System.Object)">
            <summary>
            Compares two misspelled words for equality.
            </summary>
            <param name="obj">Another MisspelledWord to compare equality with.</param>
            <returns>True if the objects are equal, false if they're not equal.</returns>
            <example>
            <code>
            string strWord = "";
            bool IsEqual = Equals(strword);
            return IsEqual;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.MisspelledWord.op_Equality(Attachmate.Reflection.Productivity.MisspelledWord,Attachmate.Reflection.Productivity.MisspelledWord)">
            <summary>
            Compares two MisspelledWords for equality.
            </summary>
            <param name="word1">The left side.</param>
            <param name="word2">The right side.</param>
            <returns><c>True</c> if they're equal, <c>false</c> if they're not equal.</returns>
            <example>
            <code>
            MisspelledWord word1 = new MisspelledWord();
            MisspelledWord word2 = new MisspelledWord();
            if(word1 == word2)
            {
              return true;
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.MisspelledWord.op_Inequality(Attachmate.Reflection.Productivity.MisspelledWord,Attachmate.Reflection.Productivity.MisspelledWord)">
            <summary>
            Compares two MisspelledWords for inequality.
            </summary>
            <param name="word1">The left side.</param>
            <param name="word2">The right side.</param>
            <returns>True if they're not equal, false if they're equal.</returns>
            <example>
            <code>
            MisspelledWord word1 = new MisspelledWord();
            MisspelledWord word2 = new MisspelledWord();
            if(word1 != word2)
            {
              return false;
            }
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.MisspelledWordEventHandler">
            <summary>
            MisspelledWord event delegate.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.MisspelledWordEventArgs">
            <summary>
            Event arguments for spelling that handle misspellings.
            </summary>   
        </member>
        <member name="F:Attachmate.Reflection.Productivity.MisspelledWordEventArgs.MisspelledWord">
            <summary>
            The word that was misspelled.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.MisspelledWordEventArgs.#ctor(Attachmate.Reflection.Productivity.MisspelledWord)">
            <summary>
            Constructor.
            </summary>
            <param name="word">The misspelled word that triggered the event.</param>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.OfficeTools">
            <summary>
            Implementation of the Office Tools Productivity feature and configuration
            of Office applications and features.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.OfficeTools.NewInvalidOfficeToolsOperationException">
            <summary>
            This exception thrown if an invalid operation executes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.OfficeTools.#ctor(Attachmate.Reflection.Productivity.IOfficeTools,Attachmate.Reflection.Productivity.IProductivity)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Productivity.OfficeTools"/> class. 
            </summary>
            <param name="officeTools">
            OfficeTools class object.
            </param>
            <param name="productivity">
            Productivity class object.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.Parent">
            <summary>
            Gets the parent object (IProductivity).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.CloseOfficeDocsOnAppExit">
            <summary>
            Specifies whether to close all Office documents created by Office Tools
            upon application closing. 
            </summary>
            <remarks>
            If <c>true</c>, Office Suite applications and documents
            close when Reflection closes. If <c>false</c>, these applications and documents remain open.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.IncludeScreenData">
            <summary>
            Gets or sets whether to insert host screen data in new Office items. 
            </summary>
            <remarks>
            If <c>true</c>, the live host screen (or the active selection on that screen) is inserted into
            newly created Office documents. If <c>false</c>, no host data is inserted.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.CopyAsImage">
            <summary>
            Gets or sets whether to copy the host screen data as an image <c>true</c>
            or text <c>false</c> when images are supported by the Office Suite.
            </summary>
            <remarks>
            If the particular document type only supports text, 
            that document will always copy as text regardless of this value's setting.
            </remarks>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.WordProcessingTemplate">
            <summary>
            Gets or sets the path of the template to use when creating a word-processing document.
            </summary>
            <remarks>
            To configure Office Tools to not use a template, pass in an empty string rather than <c>null</c>
            (or in Visual Basic is Nothing).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is <c>null</c> (or in Visual Basic is Nothing).
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.WordProcessingBookmark">
            <summary>
            Gets or sets the name of the bookmark at which text is inserted when creating a word-processing document.        
            </summary>
            <remarks>
            This property is only used in conjunction with an active word-processing template.        
            To configure Office Tools to not use a bookmark, pass in an empty string rather than null
            (or in Visual Basic, Nothing).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is <c>null</c> (or in Visual Basic, Nothing).
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.SlideshowTemplate">
            <summary>
            Gets or sets the presentation template to use for creating new slideshows.
            </summary>
            <remarks>
            This property is only meaningful if the Office Tools assembly supports slideshow
            templates. To configure Office Tools to not use a slideshow template, pass in an empty string rather than null
            (or in Visual Basic, Nothing).        
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set parameter is <c>null</c> (or in Visual Basic is Nothing).
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, 
            or if such modifications require Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.EmailEnabled">
            <summary>
            Gets whether the installed Office Tools assembly supports viewing the 
            e-mail application and new e-mail messages.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.NoteEnabled">
            <summary>
            Gets whether the installed Office Tools assembly supports new notes.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.TaskEnabled">
            <summary>
            Gets whether the installed Office Tools assembly supports new tasks.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.AppointmentEnabled">
            <summary>
            Gets whether the installed Office Tools assembly supports new appointments.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.ContactEnabled">
            <summary>
            Gets whether the installed Office Tools assembly supports viewing the contact list and creating new contacts.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.WordProcessingEnabled">
            <summary>
            Gets whether the installed Office Tools assembly supports new word-processing documents.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.SlideshowEnabled">
            <summary>
            Gets whether the installed Office Tools assembly supports new slideshow presentations.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.OfficeTools.OfficeToolsPaneVisible">
            <summary>
            Gets or sets the visible state of the Office Tools dockable panel.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.OfficeTools.CreateNewEmailMessage(System.String)">
            <summary>
            Creates a new e-mail message.
            </summary>
            <param name="messageBodyText">
            The text to enter in the e-mail message body. If <c>null</c>(or in Visual Basic, Nothing) is passed in, then a textual
            representation of the current host screen is entered.
            </param> 
            <exception cref="M:Attachmate.Reflection.Productivity.OfficeTools.NewInvalidOfficeToolsOperationException">Generates a new exception when a new invalid operation 
            <c>CreateNewEmailMessage(string messageBodyText)</c> executes.</exception>
            <example>
            <code>
            OfficeTool Tools = new OfficeTool(IOfficeTool ITools,IProductivity IPrd);
            Tools.CreateNewEmailMessage("Your Message Here");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.OfficeTools.ActivateEmailApp">
            <summary>
            Starts the e-mail application.
            </summary>
            <exception cref="M:Attachmate.Reflection.Productivity.OfficeTools.NewInvalidOfficeToolsOperationException">Generates a new exception when a new invalid operation
            <c>ActivateEmailApp()</c> executes.</exception>
            <example>
            <code>
            OfficeTool Tools = new OfficeTool(IOfficeTool ITools,IProductivity IPrd);
            Tools.ActivateEmailApp();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.OfficeTools.CreateNewContact(System.String)">
            <summary>
            Creates a new address book contact.
            </summary>
            <param name="contactBodyText">
            The text to enter in the contact body. If <c>null</c>(Nothing in Visual Basic) is passed in,
            then a textual representation of the current host screen is entered.
            </param>
            <exception cref="M:Attachmate.Reflection.Productivity.OfficeTools.NewInvalidOfficeToolsOperationException">Generates a new exception when a new invalid operation 
            <c>CreateNewContact(string contactBodyText)</c> executes.</exception>
            <example>
            <code>
            OfficeTool Tools = new OfficeTool(IOfficeTool ITools,IProductivity IPrd);
            Tools.CreateNewContact("Your Contact Body here");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.OfficeTools.ActivateContactsApp">
            <summary>
            Starts the address book application.
            </summary>
            <exception cref="M:Attachmate.Reflection.Productivity.OfficeTools.NewInvalidOfficeToolsOperationException">Generates a new exception when a new invalid operation
            <c>ActivateContactsApp()</c> executes.</exception>
            <example>
            <code>
            OfficeTool Tools = new OfficeTool(IOfficeTool ITools,IProductivity IPrd);
            Tools.ActivateContactsApp();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.OfficeTools.CreateNewAppointment(System.String)">
            <summary>
            Creates a new calendar appointment.
            </summary>
            <param name="appointmentBodyText">
            The text to insert in the appointment's body. If <c>null</c> (Nothing in Visual Basic) is passed in, then a textual
            representation of the current host screen is inserted.
            </param>
            <exception cref="M:Attachmate.Reflection.Productivity.OfficeTools.NewInvalidOfficeToolsOperationException">Generates new Exception when new invalid operation
            <c>CreateNewAppointment(string appointmentBodyText)</c>is executed.</exception>
            <example>
            <code>
            OfficeTool Tools = new OfficeTool(IOfficeTool ITools,IProductivity IPrd);
            Tools.CreateNewAppointment("Your Appointment Body Text");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.OfficeTools.CreateNewNote(System.String)">
            <summary>
            Creates a new note.
            </summary>
            <param name="noteText">
            The text to insert in the note. If <c>null</c> (Nothing in Visual Basic) is passed in, then a textual
            representation of the current host screen is inserted.
            </param>
            <exception cref="M:Attachmate.Reflection.Productivity.OfficeTools.NewInvalidOfficeToolsOperationException">Generates new Exception when new invalid operation  
            <c>CreateNewNote(string noteText)</c>is executed.</exception>
            <example>
            <code>
            OfficeTool Tools = new OfficeTool(IOfficeTool ITools,IProductivity IPrd);
            Tools.CreateNewNote("Your Note Text Here");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.OfficeTools.CreateNewTask(System.String)">
            <summary>
            Creates a new calendar task.
            </summary>
            <param name="taskBodyText">
            The text to insert in the task body. If <c>null</c> (or in Visual Basic, Nothing) is passed in, then a textual
            representation of the current host screen is inserted.
            </param>
            <exception cref="M:Attachmate.Reflection.Productivity.OfficeTools.NewInvalidOfficeToolsOperationException">Generates a new exception when a new invalid operation 
            <c>CreateNewTask(string taskBodyText)</c> executes.</exception>
            <example>
            <code>
            OfficeTool Tools = new OfficeTool(IOfficeTool ITools,IProductivity IPrd);
            Tools.CreateNewTask("Your Task Text Here");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.OfficeTools.CreateWordProcessingDocument(System.String,System.String,System.String)">
            <summary>
            Creates a new word-processing document.
            </summary>
            <param name="text">
            The text to insert in the document. If <c>null</c> (or in Visual Basic, Nothing) is passed in, 
            a textual representation of the current host screen is inserted.
            </param>
            <param name="template">
            A template to use when creating the new document. If set to <c>null</c> (or in Visual Basic, Nothing), 
            not found, or invalid, no template is used.
            </param>
            <param name="bookmark">
            A location in the document at which to insert text. If not specified, (<c>null</c> (or Nothing in Visual Basic)
            or invalid, text is inserted at the beginning of the document.
            </param>
            <exception cref="M:Attachmate.Reflection.Productivity.OfficeTools.NewInvalidOfficeToolsOperationException">Generates a new exception when a new invalid operation 
            <c>CreateWordProcessingDocument(string text, string template, string bookmark)</c> executes.</exception>
            <example>
            <code>
            OfficeTool Tools = new OfficeTool(IOfficeTool ITools,IProductivity IPrd);
            Tools.CreateWordProcessingDocument("Your Text","Your Template String ","Your Bookmark String");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.OfficeTools.CreateWordProcessingDocumentWithGraphic(System.String,System.String,System.String)">
            <summary>
            Creates a new word-processing document with graphics.
            </summary>
            <param name="path">
            The pathname of an image to insert into the document. If <c>null</c> (or in Visual Basic, Nothing)
            is passed in, a graphical representation of the current host screen is inserted.
            </param>
            <param name="template">
            A template to use when creating the new document. If <c>null</c> 
            (or in Visual Basic, Nothing), not found, or invalid, no template is used.
            </param>
            <param name="bookmark">
            A location in the document at which to insert the graphic. If not specified, (<c>null</c> (or in Visual Basic, Nothing),
            or invalid, graphic is inserted at the beginning of the document.
            </param>
            <exception cref="M:Attachmate.Reflection.Productivity.OfficeTools.NewInvalidOfficeToolsOperationException">Generates a new exception when a new invalid operation
            <c>CreateWordProcessingDocumentWithGraphic(string path, string template, string bookmark)</c> executes.</exception>
            <example>
            <code>
            OfficeTool Tools = new OfficeTool(IOfficeTool ITools,IProductivity IPrd);
            Tools.CreateWordProcessingDocumentWithGraphic("Your Path","Your Template ","Your Bookmark");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.OfficeTools.CreateWordProcessingDocumentWithGraphicSet(System.Collections.Generic.IList{System.Drawing.Image},System.String,System.String)">
            <summary>
            Creates a new word-processing document with a set of graphics.
            </summary>
            <param name="screens">
            A set of screen images to insert into the document.
            </param>
            <param name="template">
            A template to use when creating the new document. If <c>null</c> (or in Visual Basic, Nothing), not found, or invalid,
            no template is used.
            </param>
            <param name="bookmark">
            A location in the document to insert the graphic set. If not specified, (<c>null</c> (or in Visual Basic, Nothing),
            or invalid, a graphic set is inserted at the beginning of the document.
            </param>
            <exception cref="M:Attachmate.Reflection.Productivity.OfficeTools.NewInvalidOfficeToolsOperationException">Generates a new exception when a new invalid operation 
            CreateWordProcessingDocumentWithGraphicSet(IList Image screens, string template, string bookmark)<c></c> executes.</exception>
            <example>
            <code>
            OfficeTool Tools = new OfficeTool(IOfficeTool ITools,IProductivity IPrd);
            Tools.CreateWordProcessingDocumentWithGraphic(IList image ,"Your Template ","Your Bookmark");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.OfficeTools.GetBookmarks(System.String)">
            <summary>
            Gets the collection of bookmarks in a word-processing template file.
            The method returns null if the Office Tools assembly does not support
            the use of templates and bookmarks for word-processing.
            </summary>
            <param name="templateFile">
            The word-processing template file in which to search for bookmarks.
            </param>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.Productivity">
            <exclude/>
            <summary>
            Implementation of the base Productivity feature. 
            </summary>
            <remarks>
            This class is also the parent of specific Productivity features,
            including Auto Complete, Auto Expand, Spell Check,
            Recent Typing, Scratch Pad, Screen History, and Office Tools.
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.Productivity.#ctor(Attachmate.Reflection.Productivity.IProductivity,Attachmate.Reflection.Framework.IControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Productivity.Productivity"/> class. 
            </summary>
            <param name="productivity">
            Productivity object.
            </param>
            <param name="terminal">
            IControl object.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.Productivity.Parent">
            <summary>
            Gets the parent object (IIbmTerminal).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.Productivity.AutoExpand">
            <summary>
            Gets the AutoExpand object, which holds configuration properties, methods,
            and events for the Auto Expand Productivity feature.
            </summary>
            <exception cref="M:Attachmate.Reflection.Productivity.Productivity.NewInvalidProductivityOperationException">This exception is thrown when a new invalid operation is executed.</exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.Productivity.AutoComplete">
            <summary>
            Gets the AutoComplete object, which holds configuration properties, methods,
            and events for the Auto Complete Productivity feature.
            </summary>
            <exception cref="M:Attachmate.Reflection.Productivity.Productivity.NewInvalidProductivityOperationException">This exception is thrown when a new invalid operation is executed.</exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.Productivity.RecentTyping">
            <summary>
            Gets the RecentTyping object, which holds configuration properties, methods,
            and events for the Recent Typing Productivity feature.
            </summary>
            <exception cref="M:Attachmate.Reflection.Productivity.Productivity.NewInvalidProductivityOperationException">This exception is thrown when a new invalid operation is executed.</exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.Productivity.ScreenHistory">
            <summary>
            Gets the ScreenHistory object, which holds configuration properties, methods,
            and events for the Screen History Productivity feature.
            </summary>
            <exception cref="M:Attachmate.Reflection.Productivity.Productivity.NewInvalidProductivityOperationException">This exception is thrown when a new invalid operation is executed.</exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.Productivity.SpellCheck">
            <summary>
            Gets the SpellCheck object, which holds configuration properties, methods,
            and events for the Spell Check Productivity feature.
            </summary>
            <exception cref="M:Attachmate.Reflection.Productivity.Productivity.NewInvalidProductivityOperationException">This exception is thrown when a new invalid operation is executed.</exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.Productivity.ScratchPadPanelVisible">
            <summary>
            Gets or sets the visible state of the dockable Scratch Pad panel.
            </summary>
            <exception cref="M:Attachmate.Reflection.Productivity.Productivity.NewInvalidProductivityOperationException">This exception is thrown when a new invalid operation is executed.</exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.Productivity.ScratchPadContents">
            <summary>
            Gets or sets the contents of the Scratch Pad.
            </summary>
            <remarks>
            The scratch pad accepts both text strings and Rich Text Format strings. Unless the 
            parameter value includes the RTF formatting, it is inserted as plain text.
            <para>
            To empty the Scratch Pad contents, pass in an empty string rather than null (or in 
            Visual Basic, Nothing).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the set parameter is null (or in Visual Basic is Nothing).
            </exception>
            <exception cref="M:Attachmate.Reflection.Productivity.Productivity.NewInvalidProductivityOperationException">This exception is thrown when a new invalid operation is executed.</exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.Productivity.OfficeTools">
            <summary>
            Gets the OfficeTools object, which holds configuration properties, methods,
            and events for the Office Tools Productivity feature.
            </summary>
            <exception cref="M:Attachmate.Reflection.Productivity.Productivity.NewInvalidProductivityOperationException">This exception is thrown when a new invalid operation is executed.</exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.Productivity.ScratchPadContentsAsText">
            <summary>
            Gets the contents of the Scratch Pad as text without Rich Text Format markup.
            </summary>
            <exception cref="M:Attachmate.Reflection.Productivity.Productivity.NewInvalidProductivityOperationException">This exception is thrown when a new invalid operation is executed.</exception>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.Productivity.ScratchPadLoad(System.String)">
            <summary>
            Loads the Scratch Pad with the contents of the specified file.
            </summary>
            <param name="filePath">The full path of the file to load into Scratch Pad.</param>
            <returns>ReturnCode.Success if the load succeeded, ReturnCode.Error if it failed.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.Productivity.ScratchPadSaveAs(System.String)">
            <summary>
            Saves the contents of Scratch Pad to the specified file.
            </summary>
            <param name="filePath">The full path of the file in which to save the Scratch Pad contents.</param>
            <returns>ReturnCode.Success if the save succeeded, ReturnCode.Error if it failed.</returns>
            <remarks>If filePath exists, the file is overwritten.</remarks>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.ProductivityOverwriteOption">
            <summary>
            Enumeration of replace word overwrite values that are used to configure
            Auto Expand and Auto Complete.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.ProductivityOverwriteOption.EraseToEof">
            <summary>
            Erases all of the following data in the field.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.ProductivityOverwriteOption.Insert">
            <summary>
            Inserts text and pushes the following data towards the end of the field.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.Productivity.ProductivityOverwriteOption.Overwrite">
            <summary>
            Overwrites any existing field data.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.RecentTyping">
            <summary>
            Implementation for Recent Typing, a Productivity feature.
            </summary>
            <remark>
            Recent Typing allows you to quickly select from a list of recently-typed items 
            and send the selected string to the active document. This eliminates the need to manually 
            re-enter information, and can also save time and reduce typing errors.
            </remark>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.RecentTyping.#ctor(Attachmate.Reflection.Productivity.IRecentTyping,Attachmate.Reflection.Productivity.IProductivity)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Productivity.RecentTyping"/> class. 
            </summary>
            <param name="recentTyping">
            IRecentTyping interface object.
            </param>
            <param name="productivity">
            IProductivity interface object.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.RecentTyping.Parent">
            <summary>
            Gets the parent object, IProductivity.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.RecentTyping.MaxListItems">
            <summary>
            <c>Gets</c> or <c>sets</c> the maximum number of items in the Recent Typing list. 
            </summary>
            <remarks>
            The valid range of values is 1 - 1000.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set value is outside the valid range of values.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that's been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            RecentTyping rec = new RecentTyping(IRecentTyping Irec,IProductivity Iprod);
            rec.MaxListItems = 50;
            </code>
            </example>        
        </member>
        <member name="P:Attachmate.Reflection.Productivity.RecentTyping.MinimumMatch">
            <summary>
            <c>Gets</c> or <c>sets</c> the minimum length, in characters, for words added to Recent Typing. 
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the set value is outside the valid range of values.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that's been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            RecentTyping rec = new RecentTyping(IRecentTyping Irec,IProductivity Iprod);
            rec.MinimumMatch = 20;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.RecentTyping.ClearListOnDisconnect">
            <summary>
            <c>Gets</c> or <c>sets</c> whether the Recent Typing list contents are cleared when the 
            session is disconnected.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that's been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            RecentTyping rec = new RecentTyping(IRecentTyping Irec,IProductivity Iprod);
            rec.ClearListOnDisconnect = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.RecentTyping.RecentTypingPanelVisible">
            <summary>
            <c>Gets</c> or <c>sets</c> the visible state of the dockable Recent Typing panel.
            </summary>
            <example>
            <code>
            RecentTyping rec = new RecentTyping(IRecentTyping Irec,IProductivity Iprod);
            rec.ecentTypingPanelVisible = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.RecentTyping.Enabled">
            <summary>
            <c>Gets</c> or <c>sets</c>a value indicating whether Recent Typing is enabled in the session.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property that's been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            RecentTyping rec = new RecentTyping(IRecentTyping Irec,IProductivity Iprod);
            rec.Enabled = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.RecentTyping.RecentTypingCollection">
            <summary>
            Returns an enumeration of items in the Recent Typing list.
            </summary>
            <example>
            <code>
            RecentTyping rec = new RecentTyping(IRecentTyping Irec,IProductivity Iprod);
            string[] items = rec.RecentTypingCollection;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.RecentTyping.AddListItem(System.String)">
            <summary>
            Adds a string to the end of the Recent Typing list.
            </summary>
            <param name="newItem">The user-typed string to add to the list.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if newItem is <c>Null</c>(or in Visual Basic is Nothing).
            </exception>
            <example>
            <code>
            RecentTyping rec = new RecentTyping(IRecentTyping Irec,IProductivity Iprod);
            rec.AddListItem("NewItem");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.RecentTyping.DeleteListItem(System.Int32)">
            <summary>
            Deletes a string from the Recent Typing list by index.
            </summary>
            <param name="index">The index of the item to remove from the Recent Typing list.</param>
            <example>
            <code>
            RecentTyping rec = new RecentTyping(IRecentTyping Irec,IProductivity Iprod);
            rec.DeleteListItem(2);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.RecentTyping.DeleteListItem(System.String)">
            <summary>
            Deletes a string from the Recent Typing list by item name.
            </summary>
            <param name="deleteItem"> The string to remove from the Recent Typing list.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if deleteItem is <c>Null</c>(or in Visual Basic is Nothing).
            </exception>
            <example>
            <code>
            RecentTyping rec = new RecentTyping(IRecentTyping Irec,IProductivity Iprod);
            rec.DeleteListItem("ItemName");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.RecentTyping.ClearAllItems">
            <summary>
            Removes all items from Recent Typing, resulting in an empty list.
            </summary>
            <example>
            <code>
            RecentTyping rec = new RecentTyping(IRecentTyping Irec,IProductivity Iprod);
            rec.ClearAllItems();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.RecentTyping.Dispose(System.Boolean)">
            <summary>
            Clears all the resources.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.RecentTyping.ListChanged">
            <summary>
            Raised when a string is added to or removed from the Recent Typing list.
            </summary>
            <example>
            <code>
            public void CallEvent()
            {
               RecentTyping rec = new RecentTyping(IRecentTyping Irec,IProductivity Iprod);
               rec.ListChanged+=new EventHandler(rec_ListChanged);
            }
            void rec_ListChanged(object sender, EventArgs e)
            {
               //Your Code here.
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.RecentTyping.OnRecentTypingListChanged(System.EventArgs)">
            <summary>
            Fires the ListChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.RecentTyping.RecentTypingListChangedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.ScreenHistory">
            <summary>
            Implementation of the Screen History, a Productivity feature.  
            </summary>
            <remarks>
            Screen History stores read-only images of previously viewed host screens, which you 
            can navigate to or select from a list. You can also set     
            and retrieve configuration items for this feature.
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.#ctor(Attachmate.Reflection.Productivity.IScreenHistory,Attachmate.Reflection.Productivity.IProductivity)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Productivity.ScreenHistory"/> class. 
            </summary>
            <param name="screenHistory">
            remote screen history instance
            </param>
            <param name="productivity">
            parent productivity object
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ScreenHistory.Parent">
            <summary>
            Gets the parent object (IProductivity).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ScreenHistory.NumberOfScreensToRemember">
            <summary>
            Gets or sets the maximum number of host screens retained in Screen History at any given time.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a Reflection property that's been secured
            via the Permissions Manager, or that can only be modified by an Administrator.
            </exception>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            scr.NumberOfScreensToRemember = 10;
            </code>
            </example>
            <remarks>The valid range of values is 0-99.</remarks>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ScreenHistory.ManualCaptureOnly">
            <summary>
            Gets or sets a value indicating whether new screens are captured manually (<c>true</c>)
            or automatically (<c>false</c>).
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a Reflection property that's been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            scr.ManualCaptureOnly = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ScreenHistory.ClearHistoryOnDisconnect">
            <summary>
            Gets or sets a value indicating whether the screen list is cleared when session disconnects (true)
            or not (false).
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you try to modify a Reflection property that's been secured
            via the Permissions Manager, or if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            scr.ClearHistoryOnDisconnect = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ScreenHistory.ScreenHistoryPanelVisible">
            <summary>
            Gets or sets a value indicating whether the visible state of the dockable Screen History panel is visible.
            </summary>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            scr.ScreenHistoryPanelVisible = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ScreenHistory.Count">
            <summary>
            Gets the number of screens in the Screen History for a session.
            </summary>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            Int32 NoOfScreen = scr.Count;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.ScreenHistory.Index">
            <summary>
            Gets the zero-based index of the current history screen, or minus one (-1) if the live
            screen is active.
            </summary>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            Int32 NoOfScreen = scr.Index;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.CaptureScreen">
            <summary>
            Captures the current host screen (including data in non-hidden fields) and adds it to the Screen History list. 
            </summary>
            <remarks>
            If data in an unprotected field matches one or more currently enforced privacy filters, 
            the first matching filter will replace the data in the screen capture image.
            </remarks>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            scr.CaptureScreen();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.ShowLiveScreen">
            <summary>
            Shows the current host screen from anywhere in the Screen History sequence.
            </summary>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            scr.ShowLiveScreen();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.Forward">
            <summary>
            Shows the next host screen from the Screen History list in read-only mode.
            </summary>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            scr.Forward();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.Back">
            <summary>
            Shows the previous host screen from the Screen History list in read-only mode.
            </summary>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            scr.Back();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.ClearAllScreens">
            <summary>
            Removes all screens from the Screen History list.
            </summary>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            scr.ClearAllScreens();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.DeleteScreen(System.Int32)">
            <summary>
            Deletes a specific screen from the Screen History list.
            </summary>
            <param name="index">
            Specifies the zero-based index of the screen to delete from the list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the index value is negative or exceeds the range of available screens.
            </exception>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            scr.DeleteScreen(2);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.ShowScreen(System.Int32)">
            <summary>
            Shows a specific screen from the Screen History list.
            </summary>
            <param name="index">
            The zero-based index of the screen to make active.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the index value is negative or if it exceeds the range of available screens.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.GetLiveScreenImage">
            <summary>
            Returns the live screen as an image. 
            </summary>
            <remarks>
            The returned image is subject to currently configured privacy filters.
            <para>This method can be used in conjunction with the ScreenChanged event to build a list of screen images.
            The returned image can be used in conjunction with the Productivity.OfficeTools 
            CreateWordProcessingDocumentWithGraphicSet method, provided that the installed Office Suite 
            and Office Tools adapter assembly support the use of graphics in word-processing documents.</para>       
            </remarks>
            <returns>
            The live screen, in image format.
            </returns>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            byte[] image = scr.GetLiveScreenImage();
            </code>
            </example>        
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.GetHistoryScreenImage(System.Int32)">
            <summary>
            Returns a screen image from the Screen History.         
            </summary> 
            <param name="index">
            The zero-based index of the history screen to be captured. This must be a value between
            0 and Count-1 (total number of history screens minus one).
            </param>
            <returns>
            An image of the specified screen. The returned image is subject to currently configured privacy filters.
            The returned image can be used in conjunction with the <see cref="M:Attachmate.Reflection.Productivity.IOfficeTools.CreateWordProcessingDocumentWithGraphicSet(System.Collections.Generic.IList{System.Drawing.Image},System.String,System.String)"/> 
            method, provided that the installed Office suite
            and the installed Office Tools adapter assembly support the use of graphics in word-processing documents.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if the index value doesn't correspond to a valid screen index in the current Screen History.
            </exception>
            <example>
            <code>
            ScreenHistory scr = new ScreenHistory(IScreenHistory IScr,IProductivity Iprod);
            byte[] image = scr.GetHistoryScreenImage(5); 
            </code>
            </example>    
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.OpenScreenHistoryFile(System.String,System.Boolean)">
            <summary>
            Loads a screen history file into the session document.
            </summary>
            <param name="path">The name of the file to load screen history from</param>
            <param name="overwrite">If true, clears current contents first before loading from file. If false, 
            file contents are appended to screen list.</param>
            <returns>ReturnCode.Success if the load succeeds, ReturnCode.Error if it failed</returns>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.SaveScreenHistoryFile(System.String,System.Boolean)">
            <summary>
            Saves screen history contents to the specified file.
            </summary>
            <param name="filePath">The full pathname of the file to save the screen history contents to</param>
            <param name="overwrite">If true, overwrites an existing copy of the file. If false, the file will not be saved if it already exists.</param>
            <returns>ReturnCode.Success if the save succeeded, ReturnCode.Error if it failed.</returns>
            <remarks>If filePath exists, the file is overwritten.</remarks>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.Dispose(System.Boolean)">
            <summary>
            Cleans all the resources.
            </summary>
            <param name="disposing">True if Dispose was called, false if the finalizer is running</param>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.ScreenHistory.ScreenChanged">
            <summary>
            Raised when screens are added or deleted, or when a new screen becomes active.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.OnScreenChanged(System.EventArgs)">
            <summary>
            Fires ScreenChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.ScreenChangedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.ScreenHistory.ScreenSelected">
            <summary>
            Raised when a screen is selected.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.OnScreenSelected(System.EventArgs)">
            <summary>
            Fires ScreenSelected event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.ScreenHistory.ScreenSelectedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Attachmate.Reflection.Productivity.SpellCheck">
            <summary>
            Implementation of the Spell Check Productivity feature.
            </summary>
            <remarks>
            You can configure Spell Check settings, in addition to reviewing words and correcting
            misspellings in the current field or host screen. 
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.SpellCheck.#ctor(Attachmate.Reflection.Productivity.ISpellCheck,Attachmate.Reflection.Productivity.IProductivity)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Productivity.SpellCheck"/> class. 
            </summary>
            <param name="spellCheck">
            remote spell check instance
            </param>
            <param name="productivity">
            The parent productivity object
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.Parent">
            <summary>
            Gets the parent object (IProductivity).
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.Enabled">
            <summary>
            Gets or sets whether Spell Check is enabled in the session.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, or          
            if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.Enabled = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.AutoCorrect">
            <summary>
            Gets or sets whether spelling mistakes are automatically corrected as you type,
            provided that Auto Correct suggestions for the misspelled word are available.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, or          
            if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.AutoCorrect = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.CheckSpellingAsType">
            <summary>
            Gets or sets whether Reflection automatically reviews words for spelling errors
            as you type, adding wavy red lines under possibly misspelled words.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, or          
            if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.CheckSpellingAsType = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.IgnoreAllUppercase">
            <summary>
            Gets or sets whether to exclude words that use only uppercase letters
            from a spelling review. True excludes these words; false doesn't exclude them.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, or          
            if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.IgnoreAllUppercase = true;
            </code>
            </example>        
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.IgnoreWordsWithNumbers">
            <summary>
            Gets or sets whether to exclude words that contain numerals from a spelling review. 
            True excludes these words; <c>false</c> doesn't exclude them.
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, or          
            if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.IgnoreWordsWithNumbers = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.CorrectTwoInitialCaps">
            <summary>
            Gets or sets whether to correct a word that begins with two or more uppercase letters 
            to a word that begins with a single uppercase letter. 
            </summary>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, or          
            if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.CorrectTwoInitialCaps = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.CorrectAccidentalCapsLock">
            <summary>
            Gets or sets whether to correct a word that begins with a lowercase letter and is followed by all uppercase letters
            to a word that begins with a single uppercase letter. 
            </summary>
            <remarks>This also switches the state of the CAPS lOCK key.</remarks>
            
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, or          
            if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.CorectAccidentalCapsLock = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.CustomDictionaryPath">
            <summary>
            Gets or sets the full path to the custom dictionary file to use with Spell Check. 
            </summary>
            <remarks>
            To not specify a custom dictionary, specify an empty string as the parameter
            instead of <c>Null</c>(or in Visual Basic, Nothing).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the set value is <c>Null</c> (or in Visual Basic, is Nothing).
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, or          
            if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.CustomDictionaryPath = "Dictionary file path";
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.MinimumMatch">
            <summary>
            Gets or sets the minimum length of fields reviewed for spelling errors. 
            </summary>
            <remarks>
            The valid range of values is 2 - 1920. The default is 8.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown when the specified value is outside the valid range.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, or          
            if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.MinimumMatch = 1;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.MaxSuggestions">
            <summary>
            Gets or sets the maximum number of spelling suggestions
            for a misspelled word. 
            </summary>
            <remarks>The range of valid values is 1 - 10. The default is 6.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown when the specified value is outside the valid range of values.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, or          
            if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.MaxSuggestions = 10;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.MaxWordLength">
            <summary>
            Gets or sets the maximum length of words checked for spelling (between 20-200 characters). Longer words are ignored by the spell checker.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown if set value is outside the valid range.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown if you modify a Reflection property 
            that's been secured via the Permissions Manager, or if 
            such a modification requires Administrator privileges.
            </exception>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.MainLanguage">
            <summary>
            Gets or sets the language dictionary to use with Spell Check if the 
            Spell Check engine supports multiple languages.         
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown when the specified value is outside the valid range of values.
            </exception>
            <exception cref="T:Attachmate.Reflection.SecuredSettingException">
            This exception is thrown when you modify a Reflection property 
            that has been secured via the Permissions Manager, or          
            if such a modification requires Administrator privileges.
            </exception>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.MainLanguage = SpellingLanguage.EnglishUS;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Productivity.SpellCheck.MisspelledWordCollection">
            <summary>
            Returns a collection of misspelled words from the current host screen.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.SpellCheck.CheckScreen">
            <summary>
            Re-reviews text in the current screen for misspellings.
            </summary>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.CheckScreen();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.SpellCheck.CheckCurrentField">
            <summary>
            Re-reviews text in the current field for misspellings.
            </summary>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.CheckCurrentField();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.SpellCheck.RemoveMisspelling(Attachmate.Reflection.Productivity.MisspelledWord)">
            <summary>
            Removes the specified misspelled word from the misspelled word list and
            clears the associated misspelling attribute from the screen.
            </summary>
            <param name="misspelledWord">The word to remove from the misspelled word list.</param>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.RemoveMisspelling(MisspelledWord miss);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.SpellCheck.RemoveAllMisspellings">
            <summary>
            Clears all misspellings from the current screen.
            </summary>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.RemoveAllMisspellings();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.SpellCheck.CorrectMisspelling(Attachmate.Reflection.Productivity.MisspelledWord,System.String)">
            <summary>
            Replaces a misspelled word with a correctly spelled word at the specified location.
            </summary>
            <param name="misspelled">The misspelled word.</param>
            <param name="correction">The word that replaces the misspelled word.</param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if either of the input arguments are null (or in Visual Basic are Nothing).
            </exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the correction string parameter is zero-length (empty).
            </exception>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.CorrectMisspelling(MisspelledWord miss,"correct string");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.SpellCheck.AddToCustomDictionary(System.String)">
            <summary>
            Adds a word to the active custom dictionary. 
            </summary>
            <remarks>
            The setting has no effect if a custom dictionary isn't specified. 
            After a word is added to the custom dictionary, it is no longer considered as being misspelled.
            </remarks>
            <param name="newWord">The word to add to the dictionary.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the input argument is null (or in Visual Basic is Nothing).
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the input parameter is zero-length (empty).
            </exception>
            <example>
            <code>
            SpellCheck spl = new SpellCheck(ISpellCheck ICheck,IProductivity Iprod);
            spl.AddToCustomDictinary("Word");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.SpellCheck.Dispose(System.Boolean)">
            <summary>
            Cleans all the resources.
            </summary>
            ><param name="disposing">Whether the object is being disposed of or not</param>
        </member>
        <member name="E:Attachmate.Reflection.Productivity.SpellCheck.MisspelledWord">
            <summary>
            Raised when spelling errors are found in a host session.
            </summary>
            <remarks>
            This event is not raised for spelling 
            errors found by CheckField or CheckScreen calls.
            </remarks>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.SpellCheck.OnMisspelledWord(Attachmate.Reflection.Productivity.MisspelledWordEventArgs)">
            <summary>
            Fire MisspelledWord event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Productivity.SpellCheck.MisspelledWordEventSink(System.Object,Attachmate.Reflection.Productivity.MisspelledWordEventArgs)">
            <exclude/>
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Attachmate.Reflection.ReturnCode">
            <summary>
            The code that's returned from a method to indicate success and error conditions.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.ReturnCode.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.ReturnCode.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.ReturnCode.Truncated">
            <summary>
            The text is truncated.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.ReturnCode.Timeout">
            <summary>
            Timeout condition.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.ReturnCode.Cancelled">
            <summary>
            Cancelled.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.ReturnCode.PermissionRequired">
            <summary>
            Permission is required.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.SecuredSettingException">
            <summary>
            This exception is thrown when you modify a Reflection property 
            that's been secured via the Permissions Manager, or that can 
            only be modified by an Administrator.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.SecuredSettingException.#ctor">
            <summary>
            Initializes a new instance of the Attachmate.Reflection.SecuredSettingException class.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.SecuredSettingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Attachmate.Reflection.SecuredSettingException class with
            a specified error message.
            </summary>
            <param name="message">
            A message that describes the error.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.SecuredSettingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Attachmate.Reflection.SecuredSettingException class with
            a specified error message and a reference to the inner exception that causes this exception.
            </summary>
            <param name="message">
            A message that describes the error.
            </param>
            <param name="inner"> 
            The exception that causes the current exception. If the innerException
            parameter is not a null reference, the current exception is raised in a catch
            block that handles the inner exception.
            </param>
        </member>
        <member name="M:Attachmate.Reflection.SecuredSettingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Attachmate.Reflection.SecuredSettingException class with
            serialized data.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.Classic">
            <summary>
                Defines properties and methods to load, modify, or save the Reflection ribbon template.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.Classic.#ctor(Attachmate.Reflection.UserInterface.IView,Attachmate.Reflection.UserInterface.IClassic)">
            <summary>
                the constructor, for internal use
            </summary>
            <param name="view"></param>
            <param name="classic"></param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Classic.Parent">
            <summary>
                Gets the parent object. The parent is the IView object.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ClassicMDI">
            <summary>
                Defines properties and methods to load, modify, or save the Reflection ribbon template.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.ClassicMDI.#ctor(Attachmate.Reflection.UserInterface.IView,Attachmate.Reflection.UserInterface.IClassicMDI)">
            <summary>
                the constructor, for internal use
            </summary>
            <param name="view"></param>
            <param name="classic"></param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ClassicMDI.Parent">
            <summary>
                Gets the parent object. The parent is the IView object.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ControlType">
            <summary>
                Defines the type of user interface control. This collection of user interface control includes
                the controls that could appear in various user interface modes.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ControlType.Undefined">
            <summary>
                Undefined control type.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ControlType.Ribbon">
            <summary>
                Main control for Ribbon mode that contains a collectio of Tab controls.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ControlType.Tab">
            <summary>
                Tab control is the main control within Ribbon mode that contains a collection of Group controls.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ControlType.Group">
            <summary>
                Group control is the primary control that is contained within a Tab control. This control can contain a collection of various child controls.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ControlType.ButtonGroup">
            <summary>
                ButtonGroup a control that contains up to three individual child controls.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ControlType.SplitButton">
            <summary>
                Container control that has a collection of button controls.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ControlType.Gallery">
            <summary>
                This is a general built-in control type, such as Quick Keys and Office Tools.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ControlType.Button">
            <summary>
                Single button control.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ControlType.ColorPickerButton">
            <summary>
                this is a specific built-in control for picking the color.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ControlType.ClassicToolbar">
            <summary>
                Toolbar control in the classic mode.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ControlType.ClassicToolbarButton">
            <summary>
                Toolbar button control in the classic mode.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ControlType.ClassicMenubar">
            <summary>
                Menubar control in the classic mode.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ControlType.ClassicMenuItem">
            <summary>
                Menubar menu item control in the classic mode.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.IClassicMDI">
            <summary>
                Defines properties and methods to interact with the Classic user interface mode.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IClassicMDI.Parent">
            <summary>
            Gets the parent object. The parent is the IView object.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ITouchUx">
            <summary>
                Defines properties and methods to interact with the TouchUx user interface mode.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ITouchUx.Parent">
            <summary>
            Gets the parent object. The parent is the IView object.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ISmartBorder">
            <summary>
            Interface for the SmartBorder SmartUx control.
            </summary>
            <remarks>SmartUx controls are not available when using the Terminal User Control (TUC).</remarks>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ISmartButton">
            <summary>
            Interface for the SmartButton SmartUx control.
            </summary>
            <remarks>SmartUx controls are not available when using the Terminal User Control (TUC).</remarks>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.ISmartButton.ButtonClicked">
            <summary>
            This event is triggered when a button decoration is clicked. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartButton.ButtonText">
            <summary>
            Gets or sets the text displayed on the face of this button.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartButton.BackgroundColor">
            <summary>
            Gets or sets the color used to paint the background of this button.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartButton.ActionSequence">
            <summary>
            A sequence of input map actions to execute when this button is clicked.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ISmartControl">
            <summary>
            Definition for the SmartUx control object.
            </summary>
            <remarks>SmartUx controls are not available when using the Terminal User Control (TUC).</remarks>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.ISmartControl.Activated">
            <summary>
            This event is triggered when the host cursor moves under this decoration.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.ISmartControl.Deactivated">
            <summary>
            This event is triggered when the host cursor moves from under this decoration.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartControl.Id">
            <summary>
            Gets the unique id for this SmartUx control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartControl.StartRow">
            <summary>
            Gets or sets the starting row of the SmartUx control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartControl.StartColumn">
            <summary>
            Gets or sets the starting column of the SmartUx control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartControl.EndRow">
            <summary>
            Gets or sets the ending row of the SmartUx control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartControl.EndColumn">
            <summary>
            Gets or sets the ending column of the SmartUx control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartControl.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the SmartUx control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartControl.ToolTipText">
            <summary>
            Gets or sets the tool tip text for the SmartUx control.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ISmartCustomControl">
            <exclude/>
            <summary>
            A SmartUx control that displays a custom icon and content.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartCustomControl.URL">
            <summary>
            Gets or sets the URL used to display content.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartCustomControl.Icon">
            <summary>
            Gets or sets the custom icon to display with the decoration.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ISmartDatePicker">
            <summary>
            Interface for the SmartDatePicker SmartUx control.
            </summary>
            <remarks>SmartUx controls are not available when using the Terminal User Control (TUC).</remarks>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.ISmartDatePicker.ValueChanged">
            <summary>
            This event is triggered when the value selected by this decoration is changed.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartDatePicker.DateMask">
            <summary>
            Gets or sets the format string used when displaying or retrieving the date.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartDatePicker.CurrentDate">
            <summary>
            Gets or sets the displayed date.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartDatePicker.ActionSequence">
            <summary>
            A sequence of input map actions to execute when the value selected by this decoration is changed.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ISmartDropDown">
            <summary>
            Interface for the SmartDropDown SmartUx control.
            </summary>
            <remarks>SmartUx controls are not available when using the Terminal User Control (TUC).</remarks>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.ISmartDropDown.ValueChanged">
            <summary>
            This event is triggered when the value selected by this decoration is changed.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.ISmartDropDown.AddText(System.String)">
            <summary>
            Adds a string to the drop down list.
            </summary>
            <param name="text">The string to add to the drop down list</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.ISmartDropDown.RemoveText(System.String)">
            <summary>
            Removes a string from the drop down list.
            </summary>
            <param name="text">The string to remove from the drop down list</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.ISmartDropDown.RemoveItem(System.Int32)">
            <summary>
            Removes a specific item from the drop down list.
            </summary>
            <param name="itemIndex">The index of the item to remove from the drop down list</param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartDropDown.ItemCount">
            <summary>
            Gets the number of items in the drop down list.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartDropDown.SelectedValue">
            <summary>
            Gets or sets the item selected in the drop down list.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartDropDown.CurrentItemIndex">
            <summary>
            Gets or sets the index of the item selected in the drop down list.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ISmartDropDown.ActionSequence">
            <summary>
            A sequence of input map actions to execute when the selection is changed in this drop down.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ISmartRequiredField">
            <summary>
            Interface to the SmartRequiredField SmartUx control.
            </summary>
            <remarks>SmartUx controls are not available when using the Terminal User Control (TUC).</remarks>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.Mode">
            <summary>
                Type of user interface mode.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.Mode.None">
            <summary>
                No UI mode defined
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.Mode.Classic">
            <summary>
                Classic (menus/toolbars) UI mode
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.Mode.Ribbon">
            <summary>
                Ribbon UI mode
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.Mode.Browser">
            <summary>
                Browser mode
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.Mode.TouchUx">
            <summary>
                TouchUx mode
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.Mode.ClassicMDI">
            <summary>
                Classic MDI (menus/toolbars) UI mode
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ValueChangedEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="value"></param>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ValueChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ValueChangedEventArgs.Value">
            <summary>
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.ValueChangedEventArgs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.SmartBorder">
            <summary>
            Implementation for the SmartBorder SmartUx control.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartBorder.#ctor(Attachmate.Reflection.UserInterface.ISmartBorder)">
            <summary>
            Initializes a new instance of the SmartBorder class.
            </summary>
            <param name="remoteControl">The server side control</param>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.SmartButton">
            <summary>
            Implementation for the SmartButton SmartUx control.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartButton.#ctor(Attachmate.Reflection.UserInterface.ISmartButton)">
            <summary>
            Initializes a new instance of the SmartButton class.
            </summary>
            <param name="remoteControl">The server side control</param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartButton.ButtonText">
            <summary>
            Gets or sets the text displayed on the face of this button.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartButton.BackgroundColor">
            <summary>
            Gets or sets the color used to paint the background of this button.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.SmartButton.ButtonClicked">
            <summary>This event is triggered when a button control is clicked.</summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartButton.ButtonClickedEventSink(System.Object,System.EventArgs)">
            <summary>
            Event sink for Smart Control Button Clicked event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="eventArgs">Event arguments</param>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.SmartControl">
            <summary>
            Screen Decoration Object.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartControl.#ctor(Attachmate.Reflection.UserInterface.ISmartControl)">
            <summary>
            Initializes a new instance of the SmartControl class.
            </summary>
            <param name="remoteControl">The server side control</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartControl.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartControl.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartControl.Id">
            <summary>
            Gets unique id for this control
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartControl.StartRow">
            <summary>
            Gets or sets the starting row of the control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartControl.StartColumn">
            <summary>
            Gets or sets the starting column of the control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartControl.EndRow">
            <summary>
            Gets or sets the ending row of the control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartControl.EndColumn">
            <summary>
            Gets or sets the ending column of the control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartControl.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartControl.ToolTipText">
            <summary>
            Gets or sets the tool tip text for the control.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.SmartControl.Activated">
            <summary>This event is triggered when the host cursor moves under this control.</summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartControl.ActivatedEventSink(System.Object,System.EventArgs)">
            <summary>
            Event sink for Smart Control Activated event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="eventArgs">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartControl.OnActivated(System.EventArgs)">
            <summary>
            Raise Activated event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.SmartControl.Deactivated">
            <summary>This event is triggered when the host cursor moves under this control.</summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartControl.DeactivatedEventSink(System.Object,System.EventArgs)">
            <summary>
            Event sink for Smart Control Deactivated event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="eventArgs">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartControl.OnDeactivated(System.EventArgs)">
            <summary>
            Raise Deactivated event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.SmartCustomControl">
            <summary>
            A SmartUx control that displays a custom icon and content.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartCustomControl.#ctor(Attachmate.Reflection.UserInterface.ISmartCustomControl)">
            <summary>
            Initializes a new instance of the SmartCustomControl class.
            </summary>
            <param name="remoteControl">The server side control</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartCustomControl.Dispose(System.Boolean)">
            <summary>
            Standard disposal pattern implementation
            </summary>
            <param name="disposing">
            Whether to dispose of held resources that need disposal
            </param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartCustomControl.URL">
            <summary>
            Gets or sets the URL used to display content.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartCustomControl.Icon">
            <summary>
            Gets or sets the custom icon to display with the decoration.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.SmartDatePicker">
            <summary>
            Interface for the SmartDatePicker SmartUx control.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartDatePicker.#ctor(Attachmate.Reflection.UserInterface.ISmartDatePicker)">
            <summary>
            Initializes a new instance of the SmartDatePicker class.
            </summary>
            <param name="remoteControl">The server side control</param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartDatePicker.DateMask">
            <summary>
            Gets or sets the format string used when displaying or retrieving the date.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartDatePicker.CurrentDate">
            <summary>
            Gets or sets the displayed date.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartDatePicker.ActionSequence">
            <summary>
            Gets or sets a value specifying a sequence of input map actions to execute when the value selected by this decoration is changed.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.SmartDatePicker.ValueChanged">
            <summary>This event is triggered when the value selected by this control is changed.</summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartDatePicker.OnValueChanged(Attachmate.Reflection.UserInterface.ValueChangedEventArgs)">
            <summary>
            Raise ValueChanged event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartDatePicker.ValueChangedEventSink(System.Object,System.String)">
            <summary>
            Event sink for SmartControl ValueChanged event.
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="value">Selected value from the control</param>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.SmartDropDown">
            <summary>
            Implementation for the SmartDropDown SmartUx control.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartDropDown.#ctor(Attachmate.Reflection.UserInterface.ISmartDropDown)">
            <summary>
            Initializes a new instance of the SmartDropDown class.
            </summary>
            <param name="remoteControl">The server side control</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartDropDown.AddText(System.String)">
            <summary>
            Adds a string to the drop down list.
            </summary>
            <param name="text">The string to add to the drop down list</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartDropDown.RemoveText(System.String)">
            <summary>
            Removes a string from the drop down list.
            </summary>
            <param name="text">The string to remove from the drop down list</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartDropDown.RemoveItem(System.Int32)">
            <summary>
            Removes a specific item from the drop down list.
            </summary>
            <param name="itemIndex">The index of the item to remove from the drop down list</param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartDropDown.ItemCount">
            <summary>
            Gets the number of items in the drop down list.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartDropDown.SelectedValue">
            <summary>
            Gets or sets the item selected in the drop down list.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartDropDown.CurrentItemIndex">
            <summary>
            Gets or sets the index of the item selected in the drop down list.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.SmartDropDown.ActionSequence">
            <summary>
            Gets or sets a value specifying a sequence of input map actions to execute when the selection is changed in this drop down.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.SmartDropDown.ValueChanged">
            <summary>This event is triggered when the value selected by this control is changed.</summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartDropDown.OnValueChanged(Attachmate.Reflection.UserInterface.ValueChangedEventArgs)">
            <summary>
            Raise ValueChanged event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartDropDown.ValueChangedEventSink(System.Object,System.String)">
            <summary>
            Event sink for SmartControl ValueChanged event.
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="value">Selected value from the control</param>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.SmartRequiredField">
            <summary>
            Implementation of the SmartRequiredField SmartUx control.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.SmartRequiredField.#ctor(Attachmate.Reflection.UserInterface.ISmartRequiredField)">
            <summary>
            Initializes a new instance of the SmartRequiredField class.
            </summary>
            <param name="remoteControl">The server side control</param>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.TouchUx">
            <summary>
                Defines properties and methods to load, modify, or save the Reflection ribbon template.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.TouchUx.#ctor(Attachmate.Reflection.UserInterface.IView,Attachmate.Reflection.UserInterface.ITouchUx)">
            <summary>
                the constructor, for internal use
            </summary>
            <param name="view"></param>
            <param name="touchux"></param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.TouchUx.Parent">
            <summary>
                Gets the parent object. The parent is the IView object.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.UiMode">
            <summary>
            Defines properties and operations for a given frame user interace mode.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.UiMode.#ctor(Attachmate.Reflection.UserInterface.IView,Attachmate.Reflection.UserInterface.IUiMode)">
            <summary>
            Initializes a new instance of the UiMode class.
            </summary>
            <param name="parent">The parent View object</param>
            <param name="uiMode">The remote UiMode object</param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiMode.Parent">
            <summary>
            Gets the parent object. The parent is the IView object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiMode.Mode">
            <summary>
            Gets the type of user interface mode.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiMode.FileName">
            <summary>
            Gets the current user interface mode template file name.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiMode.SubItems">
            <summary>Gets a collection of subitems. Each subitem is returned as a user interface control.</summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.UiMode.GetControlById(System.String)">
            <summary>Returns the first control that has the specified ID. Searches the current child items as well as all descendents.</summary>
            <param name="id">ID of the item to retrieve</param>
            <returns>Returns the control if it exists in as a descendent of the current control (else returns null)</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.UiMode.GetChildControlById(System.String)">
            <summary>Returns the child control that has the specified ID.  If no control is found, then null is returned.</summary>
            <param name="id">ID of the item to retrieve</param>
            <returns>Returns the control if it exists in any of the sub items from the current collection (else returns null)</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.UiMode.Load(System.String)">
            <summary>
                Loads a new user interface template file for the current session document view.
            </summary>
            <param name="fileName">The name of the user interface mode template file.</param>
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the user interface template file does not exist.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.UiMode.Reset">
            <summary>Resets the collection of sub item user controls that is cached. (The UiMode sub items can be changed by editing the current selection through the
            UI designer or by changing the user interface template. In these cases, this call refreshes the cached collection of subitems.)</summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.IUiMode">
            <summary>
            Defines properties and operations for a given frame user interace mode.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiMode.Parent">
            <summary>
            Gets the parent object. The parent is the IView object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiMode.Mode">
            <summary>
            Gets the type of user interface mode.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiMode.FileName">
            <summary>
            Gets the current user interface mode template file name.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiMode.SubItems">
            <summary>
            Gets a collection of subitems. Each subitem is returned as a user interface control.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IUiMode.GetControlById(System.String)">
            <summary>Returns the first control that has the ID specified. Searches the current child items as well as all descendents.</summary>
            <param name="id">ID of the item to retrieve.</param>
            <returns>Returns the control if it exists in as a descendent of the current control. If not, returns null.</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IUiMode.GetChildControlById(System.String)">
            <summary>Returns the child control that has the specified ID.</summary>
            <param name="id">ID of the item to retrieve.</param>
            <returns>Returns the control if it exists in the child collection. Returns null if the control is not in the child collection.</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IUiMode.Load(System.String)">
            <summary>
            Loads a new user interface template file for the current session document view.
            </summary>
            <param name="fileName">The name of the user interface template file.</param>
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the user interface template file does not exist.
            </exception>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IUiMode.Reset">
            <summary>Resets the collection of sub item user controls that is cached. (The UiMode sub items can be changed by editing the current selection through the
            UI designer or by changing the user interface template. In these cases, this call refreshes the cached collection of subitems.)</summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.UiControl">
            <summary>
                Defines properties and operations on the UI control object.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.UiControl.#ctor(Attachmate.Reflection.UserInterface.IUiControl,Attachmate.Reflection.UserInterface.IUiControl)">
            <summary>
                the constructor, for internal use
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiControl.Parent">
            <summary>
                Get the parent control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiControl.ControlType">
            <summary>
                Type of control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiControl.Id">
            <summary>Gets or sets the user-specified ID for a given control. The ID can be the same for any two controls as long as their parents are not the
            same (e.g., No two tabs can have the same ID, but two chunks in different tabs can have the same ID).</summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiControl.InstanceId">
            <summary>Gets the instance ID for a given control. The instance id is a GUID generated when creating the control. The instance ID helps uniquely identify
            two controls (even when they have the same ID).</summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiControl.Visible">
            <summary>
                Gets or sets the visibility for a given control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiControl.Enabled">
            <summary>
                Gets or sets the enabled property of a given control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiControl.ActionId">
            <summary>Gets the ID of the action that this control is bound to. (This is for reference only.) To bind a new action to this control or get the actual
            action sequence that is bound to this control, use the UiControlActionMapper object.</summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiControl.Text">
            <summary>
                Get or sets the text associated with the control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiControl.Tooltip">
            <summary>
                Get or sets the tooltip associated with the control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiControl.Description">
            <summary>
                Get or sets the description associated with the control.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.UiControlContainer">
            <summary>
                Defines properties and operations on the UI control object.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.UiControlContainer.#ctor(Attachmate.Reflection.UserInterface.IUiControl,Attachmate.Reflection.UserInterface.IUiControlContainer)">
            <summary>
                the constructor, for internal use
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.UiControlContainer.SubItems">
            <summary>
                Gets a generic list of subitems. Each subitem is returned as an IUiControl.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.UiControlContainer.GetControlById(System.String)">
            <summary>Returns the first control that has the specified ID. Searches the current child items as well as all descendents.</summary>
            <param name="id">ID of the item to retrieve.</param>
            <returns>Returns the control if it exists in as a descendent of the current control (else returns null)</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.UiControlContainer.GetChildControlById(System.String)">
            <summary>Returns the child control that has the specified ID.</summary>
            <param name="id">ID of the item to retrieve</param>
            <returns>Returns the control if it exists in the child collection (else returns null)</returns>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.IUiControlContainer">
            <summary>Defines properties and operations on the UIControl object.</summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiControlContainer.SubItems">
            <summary>
                Gets a generic list of subitems. Each subitem is returned as an IUiControl.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IUiControlContainer.GetControlById(System.String)">
            <summary>Returns the first control that has the specified ID. Searches the current child items as well as all descendents.</summary>
            <param name="id">ID of the item to retrieve.</param>
            <returns>Returns the control if it exists as a descendent of the current control. If not, returns null.</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IUiControlContainer.GetChildControlById(System.String)">
            <summary>Returns the child control that has the specified ID.</summary>
            <param name="id">ID of the item to retrieve.</param>
            <returns>Returns the control if it exists in the child collection. Returns null if the control is not in the child collection.</returns>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.IUiControl">
            <summary>
                Defines properties and operations on the UIControl object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiControl.Parent">
            <summary>
                Get the parent control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiControl.ControlType">
            <summary>
                Type of control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiControl.Id">
            <summary>Gets or sets the user-specified ID for a given control. The ID can be the same for any two controls as long as their parents are not the same
            (e.g., no two tabs can have the same ID, but two chunks in different tabs can have the same ID).</summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiControl.InstanceId">
            <summary>Gets the instance ID for a given control. The instance ID is a GUID generated when creating the control. The instance ID helps uniquely identify
            two controls (even when they have the same ID).</summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiControl.Visible">
            <summary>
                Gets or sets the visibility for a given control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiControl.Enabled">
            <summary>
                Gets or sets the enabled property of a given control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiControl.ActionId">
            <summary>Gets the ID of the action that this control is bound to. (This is for reference only.)  To bind a new action to this control or get
            the actual action sequence that is bound to this control, use the UiControlActionMapper object.</summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiControl.Text">
            <summary>
                Gets or sets the text associated with the control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiControl.Tooltip">
            <summary>
                Gets or sets the tooltip associated with the control.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IUiControl.Description">
            <summary>
                Gets or sets the description associated with the control.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.IClassic">
            <summary>
                Defines properties and methods to interact with the Classic user interface mode.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IClassic.Parent">
            <summary>
            Gets the parent object. The parent is the IView object.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.IFrame">
            <summary>
            IFrame is the top-level user interface component.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrame.AllViews">
            <summary>
            Gets all views.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrame.ViewCount">
            <summary>
            Gets the number of views that are running.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrame.FullScreen">
            <summary>
            Gets or sets a value indicating whether the frame is in full screen mode.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrame.SelectedView">
            <summary>
            Gets or sets the view that is selected.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrame.StatusBarText">
            <summary>Gets or sets the text displayed on the status bar.</summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrame.Visible">
            <summary>Gets or sets the visibility of the Reflection terminal window.</summary>
            <remarks>
            	<para>The Reflection terminal window is typically hidden when you start Reflection from another application using Automation.</para>
            	<para>Setting Visible to False is not the same as minimizing Reflection. (Use the WindowState property to minimize Reflection.) When Reflection is minimized, it
            appears on the Windows Task List and can brought into view in various ways. When Reflection is not visible it does not appear on the Task List and can be
            brought into view only by setting the Visible property to True.</para>
            </remarks>
            <value>The default value is True.</value>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrame.WindowMode">
            <summary>Gets the WindowMode.</summary>
            <example>
            	<code title="Example" description="" lang="CS">
            void Sample_Frame_WindowMode()
            {
                Application app = MyReflection.ActiveApplication;
                IFrame frame = (IFrame)app.GetObject("Frame");
             
                if (frame.WindowMode == WindowModes.Browser ||
                    frame.WindowMode == WindowModes.Ribbon)
                
                    Console.Write("There are " + frame.ViewCount + " views open within " +
                           "this frame instance.\n");    
                else
                    Console.Write("Since this frame is in \"classic\" mode, there cannot be more " +
                           "than one session view open in it.");
            }</code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrame.WindowState">
            <summary>Gets or sets the application window state. The window state can be Normal, Minimized, or Maximized.</summary>
            <value>The default is Normal (a default sized window).</value>
            <example>
            	<para></para>
            	<code title="Example" description="" lang="CS">
            void Sample_Frame_WindowState()
            {
                Application app = MyReflection.ActiveApplication;
                IFrame frame = (IFrame)app.GetObject("Frame");
             
                Console.Write("Press 'm' to maximize the Reflection Desktop window...");
                ConsoleKeyInfo cki = Console.ReadKey();
                if (cki.KeyChar == 'm')
                    frame.WindowState = System.Windows.Forms.FormWindowState.Maximized;
                else
                    frame.WindowState = System.Windows.Forms.FormWindowState.Normal;
            }</code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrame.WindowSize">
            <summary>Gets the application window's size.</summary>
            <example>
            	<para></para>
            	<code title="Example" description="" lang="CS">
            void Sample_Frame_WindowSize()
            {
                Application app = MyReflection.ActiveApplication;
                IFrame frame = (IFrame)app.GetObject("Frame");
             
                System.Drawing.Size s = frame.WindowSize;
                Console.Write("Height/Width of Reflection Desktop: " +
                    s.Height + "/" + s.Width);
            }</code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrame.WindowLocation">
            <summary>Gets the application window's location.</summary>
            <example>
            	<para></para>
            	<code title="Example" description="" lang="CS">
            void Sample_Frame_WindowLocation()
            {
                Application app = MyReflection.ActiveApplication;
                IFrame frame = (IFrame)app.GetObject("Frame");
             
                System.Drawing.Point p = frame.WindowLocation;
                Console.Write("x/y location of Reflection Desktop: " +
                    p.X + "/" + p.Y);
            }</code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrame.Name">
            <summary>
            Gets or sets the name of the frame.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrame.VBCommonProject">
            <summary>
            Gets the Common VB Project (VBA use only)
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IFrame.CreateView(System.Object)">
            <summary>
            Creates a View to host the control.
            </summary>
            <param name="control">The terminal control to host inside the View</param>
            <returns>A new View that hosts the specified terminal control.</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IFrame.GetViewsByName(System.String)">
            <summary>
            Gets a collection of views that matches the name.
            </summary>
            <param name="name">The name of the View to match on.</param>
            <returns>An array of Views that match the specified name.</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IFrame.GetViewByInstanceId(System.Guid)">
            <summary>
            Gets the view that matches the instance ID.
            </summary>
            <param name="instanceId">The instance ID to match on.</param>
            <returns>An array of Views that match the specified ID</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IFrame.GetViewByControl(System.Object)">
            <summary>Gets the view that is associated with a terminal control.</summary>
            <param name="control">Terminal control</param>
            <returns>The View that matches the specified terminal control, if any.</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IFrame.GetViewByTitleText(System.String)">
            <summary>Gets the view that matches the title text.</summary>
            <param name="titleText">The title text to match on.</param>
            <returns>The View that matches the specified title text, if any.</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            void Sample_Frame_GetViewByTitleText()
            {
                //You can alert users by placing custom text in a view's titleText.
                //If you know the titleText, you can retrieve the view object with it.
                Application app =  MyReflection.ActiveApplication;
                IFrame frame = (IFrame) app.GetObject("Frame");
                frame.SelectedView.TitleText = "Alert!";
                //...
                IView view = (IView)frame.GetViewByTitleText("Alert!");
                view.Focus();
            }</code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IFrame.GetViewsByFilePath(System.String)">
            <summary>
            Gets a collection of views that match the session file path.
            </summary>
            <param name="filePath">The session file path to match on.</param>
            <returns>An array of Views that match the specified file path</returns>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrame.StatusBarVisible">
            <summary>
            Gets or sets a value indicating whether the frame window status bar is visible or not.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IFrame.Activate">
            <summary>
            Activates the application and gives it focus.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IFrame.Dispose">
            <summary>
            Disposes resources for instance that implements this interface
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.IFrame.ViewOpened">
            <summary>
            Occurs when a new view is opened.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.IRibbon">
            <summary>
                Defines properties and methods to interact with the Ribbon user interface mode.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IRibbon.Parent">
            <summary>
                Gets the parent object. The parent is the IView object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IRibbon.Expanded">
            <summary>Gets or sets the Ribbon control expanded state. Returns True if it is fully expanded and False if it is collapsed.</summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IRibbon.SelectedTab">
            <summary>Gets or sets the currently selected tab.</summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.IView">
            <summary>
            IView represents the user interface aspect of each document.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IView.Control">
            <summary>
            Gets the control object that is embedded in the view.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IView.Description">
            <summary>
            Gets or sets the description of the view.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IView.InstanceId">
            <summary>
            Gets the instance ID of the view.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IView.Name">
            <summary>
            Gets or sets the name of the view.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IView.TitleText">
            <summary>
            Gets or sets the title text of the view. In tab view mode, the title text is on the tab. 
            In SDI mode, it is the caption of the view window.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IView.ActiveTabForegroundColor">
            <summary>
            Gets or sets the color of the view tab text when it is the active tab. In tab view mode, the title text is on the tab. 
            In SDI mode, it is the caption of the view window.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IView.ActiveTabBackgroundColor">
            <summary>
            Gets or sets the background color of the view tab when it is the active tab.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IView.InactiveTabForegroundColor">
            <summary>
            Gets or sets the color of the view tab text when the tab is not active. In tab view mode, the title text is on the tab. 
            In SDI mode, it is the caption of the view window.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IView.InactiveTabBackgroundColor">
            <summary>
            Gets or sets the background color of the view tab when it is not active.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IView.UiMode">
            <summary>Gets the UiMode object. This object contains a collection of user interface controls.</summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IView.EnablePlus">
            <summary>
            Enable or disable Plus feature.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IView.PlusCustomizationPath">
            <summary>
            Gets or sets Plus customization file path associated with this session.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IView.Close(Attachmate.Reflection.CloseOption)">
            <summary>Closes the view.</summary>
            <param name="option">Specifies how to handle the Save action when closing the view.<br/></param>
            <returns>ReturnCode value indicates success or error conditions.</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IView.Focus">
            <summary>
            Sets the input focus to the view.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IView.CreateSmartBorder">
            <summary>
            Creates a SmartUx Control.
            </summary>
            <returns>A newly created SmartUx Control</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IView.CreateSmartDropDown">
            <summary>
            Creates a SmartUx Control.
            </summary>
            <returns>A newly created SmartUx Control</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IView.CreateSmartRequiredField">
            <summary>
            Creates a SmartUx Control.
            </summary>
            <returns>A newly created SmartUx Control</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IView.CreateSmartButton">
            <summary>
            Creates a SmartUx Control.
            </summary>
            <returns>A newly created SmartUx Control</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IView.CreateSmartDatePicker">
            <summary>
            Creates a SmartUx Control.
            </summary>
            <returns>A newly created SmartUx Control</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IView.CreateSmartCustomControl">
            <summary>
            Creates a SmartUx Control.
            </summary>
            <returns>A newly created SmartUx Control</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IView.AddSmartControl(Attachmate.Reflection.UserInterface.ISmartControl)">
            <summary>
            Adds a SmartUx Control to the view window.
            </summary>
            <param name="control">A SmartUx Control</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IView.RemoveSmartControl(Attachmate.Reflection.UserInterface.ISmartControl)">
            <summary>
            Removes a SmartUx Control from the view window.
            </summary>
            <param name="control">A SmartUx Control</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IView.RemoveAllSmartControls">
            <summary>
            Removes all SmartUx Control from the view window.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.IView.Closed">
            <summary>
            Occurs when the view is closed.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.IView.Closing">
            <summary>
            Occurs when the view is about to close. The event handler can cancel the closing
            by setting the Cancel property of the event argument to true.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.IView.Deselected">
            <summary>
            Occurs when a view is deselected.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.IView.Selected">
            <summary>
            Occurs when a view is selected.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.IView.TitleTextChanged">
            <summary>
            Occurs when the tab text or caption text changes.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.MouseEventHandler">
            <summary>
            MouseEventHandler event delegate. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.MouseEventArgsEx">
            <summary>
            Event argument for UserMouseEventhandler
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.MouseEventArgsEx.#ctor(System.Int32,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the MouseEventArgsEx object.
            </summary>
            <param name="windowMessage">Windows message generated by the mouse event.</param>
            <param name="button">The mouse button that was pressed.</param>
            <param name="clicks">The number of times the mouse button was pressed and released.</param>
            <param name="x">The x-coordinate of the mouse, in pixels, relative to the left side of the session window.</param>
            <param name="y">The y-coordinate of the mouse, in pixels, relative to the top of the session window.</param>
            <param name="delta">A signed count of the number of detents the mouse wheel has rotated, multiplied by the WHEEL_DELTA constant.</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.MouseEventArgsEx.#ctor(System.Int32,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the MouseEventArgsEx object.
            </summary>
            <param name="windowMessage">Windows message generated by the mouse event.</param>
            <param name="button">The mouse button that was pressed.</param>
            <param name="clicks">The number of times the mouse button was pressed and released.</param>
            <param name="row">The terminal row number of the mouse click.</param>
            <param name="column">The terminal column number of the mouse click.</param>
            <param name="x">The x-coordinate of the mouse, in pixels, relative to the left side of the session window.</param>
            <param name="y">The y-coordinate of the mouse, in pixels, relative to the top of the session window.</param>
            <param name="delta">A signed count of the number of detents the mouse wheel has rotated, multiplied by the WHEEL_DELTA constant.</param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.MouseEventArgsEx.WindowMessage">
            <summary>Windows message generated by the mouse event.</summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.MouseEventArgsEx.Button">
            <summary>Gets which mouse button was pressed.</summary>
            <value>
            	<span>
            		<span>One of the MouseButtons enum values.</span>
            		<br/>
            	</span>
            </value>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.MouseEventArgsEx.Clicks">
            <summary>Gets the number of times the mouse button was pressed and released.</summary>
            <value>
            	<span>
            		The number of times the mouse button was pressed and released.
            		<br/>
            	</span>
            </value>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.MouseEventArgsEx.Row">
            <summary>Gets the terminal row number of the mouse click.</summary>
            <value>
            	<span>
            		<span>The row portion of the screen coordinate.</span>
            		<br/>
            	</span>
            </value>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.MouseEventArgsEx.Column">
            <summary>Gets the terminal column number of the mouse click.</summary>
            <value>
            	<span>
            		<span>The column portion of the screen coordinate.</span>
            		<br/>
            	</span>
            </value>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.MouseEventArgsEx.X">
            <summary>Gets the x-coordinate of the mouse during this event, in pixels, relative to the left side of the session window.</summary>
            <value>
            	<span>
            		<span>The x-coordinate of the mouse, in pixels, relative to the left side of the session window.</span>
            		<br/>
            	</span>
            </value>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.MouseEventArgsEx.Y">
            <summary>Gets the y-coordinate of the mouse during this event, in pixels, relative to the top of the session window.</summary>
            <value>
            	<span>
            		<span>The y-coordinate of the mouse, in pixels, relative to the top of the session window.</span>
            		<br/>
            	</span>
            </value>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.MouseEventArgsEx.Delta">
            <summary>Gets a signed count of the number of detents the mouse wheel has rotated, multiplied by the WHEEL_DELTA constant. A detent is one notch of the
            mouse wheel.</summary>
            <value>
            	<span>
            		<span>A signed count of the number of detents the mouse wheel has rotated, multiplied by the WHEEL_DELTA constant.</span>
            		<br/>
            	</span>
            </value>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.MouseEventArgsEx.Location">
            <summary>Gets the location of the mouse during the generating mouse event, relative to the upper-left corner of the session window.</summary>
            <value>
            	<span>
            		<span>A Point structure that contains the x- and y- mouse coordinates, in pixels, relative to the upper-left corner of the session
            window.</span>
            		<br/>
            	</span>
            </value>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.MouseEventArgsEx.op_Implicit(Attachmate.Reflection.UserInterface.MouseEventArgsEx)~System.Windows.Forms.MouseEventArgs">
            <summary>
            Implicitly convert MouseEventArgsEx to MouseEventArgs
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.Ribbon">
            <summary>
                Defines properties and methods to interact with the Ribbon user interface mode.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.Ribbon.#ctor(Attachmate.Reflection.UserInterface.IView,Attachmate.Reflection.UserInterface.IRibbon)">
            <summary>
                the constructor, for internal use
            </summary>
            <param name="view"></param>
            <param name="ribbon"></param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Ribbon.Parent">
            <summary>
                Gets the parent object. The parent is the IView object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Ribbon.Expanded">
            <summary>Gets or sets the Ribbon control expanded state. Returns True if it is fully expanded and False if it is collapsed.</summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Ribbon.SelectedTab">
            <summary>
                Gets or sets the currently selected Tab.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.View">
            <summary>
            Implementation of View, which represents the user interface aspect of each document.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.#ctor(Attachmate.Reflection.UserInterface.IView,Attachmate.Reflection.Framework.Application)">
            <summary>
            Initializes a new instance of the View class
            </summary>
            <param name="remoteView">The server side view object</param>
            <param name="application">The Reflection application instance</param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.View.RemoteView">
            <summary>
            Gets the view object.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.View.Control">
            <summary>
            Returns the embedded control.
            </summary>
            <exception cref="T:System.ApplicationException"><see cref="F:Attachmate.Reflection.UserInterface.View.ExceptionMessageErrorState"/></exception>
            <example>
            <code>
            attachmate.Reflection.UserInterface.View view = new Attachmate.Reflection.UserInterface.View(
                   Attachmate.Reflection.UserInterface.IView Iview,Application app);
            object objControl = view.Control;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.View.Description">
            <summary>
            <c>Gets</c> or <c>sets</c> the description of the view.
            </summary>
            <exception cref="T:System.ApplicationException"><see cref="F:Attachmate.Reflection.UserInterface.View.ExceptionMessageErrorState"/></exception>
            <example>
            <code>
            attachmate.Reflection.UserInterface.View view = new Attachmate.Reflection.UserInterface.View(
                   Attachmate.Reflection.UserInterface.IView Iview,Application app);
            view.Control = "View Description";
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.View.InstanceId">
            <summary>
            <c>Gets</c> the instanceId of the view. The instanceId is different from that of its embedded control.
            </summary>
            <exception cref="T:System.ApplicationException"><see cref="F:Attachmate.Reflection.UserInterface.View.ExceptionMessageErrorState"/></exception>
            <example>
            <code>
            attachmate.Reflection.UserInterface.View view = new Attachmate.Reflection.UserInterface.View(
                   Attachmate.Reflection.UserInterface.IView Iview,Application app);
            Guid guid  = view.InstanceId;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.View.Name">
            <summary>
            <c>Gets</c> or <c>sets</c> the name of the control hosted in the view.
            </summary>
            <exception cref="T:System.ApplicationException"><see cref="F:Attachmate.Reflection.UserInterface.View.ExceptionMessageErrorState"/></exception>
            <example>
            <code>
            attachmate.Reflection.UserInterface.View view = new Attachmate.Reflection.UserInterface.View(
                   Attachmate.Reflection.UserInterface.IView Iview,Application app);
            view.Name = "Control Name";
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.View.TitleText">
            <summary>
            <c>Gets</c> or <c>sets</c> the title text of the view. In tab view mode, the title text is on the tab.
            In SDI mode, it is the <c>caption</c> for the view window.
            </summary>
            <exception cref="T:System.ApplicationException"><see cref="F:Attachmate.Reflection.UserInterface.View.ExceptionMessageErrorState"/></exception>
            <example>
            <code>
            attachmate.Reflection.UserInterface.View view = new Attachmate.Reflection.UserInterface.View(
                   Attachmate.Reflection.UserInterface.IView Iview,Application app);
            view.TitleText = "View Title";
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.View.ActiveTabForegroundColor">
            <summary>
            Gets or sets the color of the view tab text when it is the active tab. In tab view mode, the title text is on the tab. 
            In SDI mode, it is the caption of the view window.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.View.ActiveTabBackgroundColor">
            <summary>
            Gets or sets the background color of the view tab when it is the active tab.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.View.InactiveTabForegroundColor">
            <summary>
            Gets or sets the color of the view tab text when the tab is not active. In tab view mode, the title text is on the tab. 
            In SDI mode, it is the caption of the view window.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.View.InactiveTabBackgroundColor">
            <summary>
            Gets or sets the background color of the view tab when it is not active.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.View.EnablePlus">
            <summary>
            Enable or disable Plus feature.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.View.PlusCustomizationPath">
            <summary>
            Gets or sets Plus customization file path associated with this session.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.View.UiMode">
            <summary>
            Gets the user interface mode. This object contains a collection of user interface controls.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.Close(Attachmate.Reflection.CloseOption)">
            <summary>
            Closes the view.
            </summary>
            <param name="option">Specifies how to respond to situation where the document needs saving before close.</param>
            <exception cref="T:System.ApplicationException"><see cref="F:Attachmate.Reflection.UserInterface.View.ExceptionMessageErrorState"/></exception>
            <returns>Return Code</returns>
            <example>
            <code>
            Attachmate.Reflection.UserInterface.View view = new Attachmate.Reflection.UserInterface.View(
                  Attachmate.Reflection.UserInterface.IView Iview,Application app);
            view.Close(CloseOption.CloseAskSave);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.Focus">
            <summary>
            Sets the input focus to the view.
            </summary>
            <exception cref="T:System.ApplicationException"><see cref="F:Attachmate.Reflection.UserInterface.View.ExceptionMessageErrorState"/></exception>
            <example>
            <code>
            Attachmate.Reflection.UserInterface.View view = new Attachmate.Reflection.UserInterface.View(
                   Attachmate.Reflection.UserInterface.IView Iview,Application app);
            Guid g  = view.InstanceId;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.View.Closed">
            <summary>
            The event is raised when the view is closed.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.View.Closing">
            <summary>
            The event is raised when the view is about to close. The event handler can cancel the closing by setting the cancel property of the event argument to false;
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.View.Deselected">
            <summary>
            The event is raised when a view is deselected.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.View.Selected">
            <summary>
            The event is raised when a view is selected.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.View.TitleTextChanged">
            <summary>
            The event is raised when tab text or caption text changes.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.OnClosed(System.EventArgs)">
            <summary>
            Raise Closed event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.OnClosing(Attachmate.Reflection.CancelableEventArgs)">
            <summary>
            Raise Closing event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.OnDeselected(System.EventArgs)">
            <summary>
            Raise Deselected event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.OnSelected(System.EventArgs)">
            <summary>
            Raise Selected event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.OnTitleTextChanged(System.EventArgs)">
            <summary>
            Raise TitleTextChanged event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.ClosedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.ClosingEventSink(System.Object,Attachmate.Reflection.CancelableEventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.DeselectedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.SelectedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.View.TitleTextChangedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ViewEventHandler">
            <summary>
            ViewEventHandler event delegate. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.ViewEventArgs">
            <summary>
            Event argument for ViewEventHandler.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.ViewEventArgs.m_view">
            <summary>
            IView interface object.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.ViewEventArgs.#ctor(Attachmate.Reflection.UserInterface.IView)">
            <summary>
            Initializes the ViewEventArgs object.
            </summary>
            <param name="view"></param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.ViewEventArgs.View">
            <summary>
            Returns the IView object.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.Frame">
            <summary>
            The Frame class is the top-level user interface component.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.Frame.#ctor(System.Object,Attachmate.Reflection.Framework.Application)">
            <summary>
            Initializes a new instance of the Frame class.
            </summary>
            <param name="remoteFrame">The server side frame instance</param>
            <param name="application">The application instance</param>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.AllViews">
            <summary>
            Gets all views.
            </summary>
            <exception cref="T:System.ApplicationException"><see cref="F:Attachmate.Reflection.UserInterface.Frame.ExceptionMessageErrorState"/></exception>
            <example>
            <code>
            Public void CollectViews()
            {
                Attachmate.Reflection.UserInterface.Frame fram = new Attachmate.Reflection.UserInterface.Frame
                      (Attachmate.Reflection.UserInterface.IFrame RemoteFrame,Application app);
                Attachmate.Reflection.UserInterface.IView[] Iview = fram.AllViews;
                foreach(Attachmate.Reflection.UserInterface.View viewItem in Iview)
                {
                   Console.WriteLine(viewItem.Name);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.ViewCount">
            <summary>
            Gets the number of views that are running.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.FullScreen">
            <summary>
            Gets or sets a value indicating whether the frame window is in full screen state.
            </summary>
            <exception cref="T:System.ApplicationException"><see cref="F:Attachmate.Reflection.UserInterface.Frame.ExceptionMessageErrorState"/></exception>
             <example>
            <code>
            Attachmate.Reflection.UserInterface.Frame fram = new Attachmate.Reflection.UserInterface.Frame
                      (Attachmate.Reflection.UserInterface.IFrame RemoteFrame,Application app);
            fram.FullScreen = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.SelectedView">
            <summary>
            Gets or sets the view that is selected.
            </summary>
            <exception cref="T:System.ApplicationException"><see cref="F:Attachmate.Reflection.UserInterface.Frame.ExceptionMessageErrorState"/></exception>
             <example>
            <code>
            Attachmate.Reflection.UserInterface.Frame fram = new Attachmate.Reflection.UserInterface.Frame
                      (Attachmate.Reflection.UserInterface.IFrame RemoteFrame,Application app);
            Attachmate.Reflection.UserInterface.IView Iview = fram.AllViews;
            string ViewName = Iview.Name;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.StatusBarText">
            <summary>
            Gets or sets the text displayed on the status bar.
            </summary>
            <exception cref="T:System.ApplicationException"><see cref="F:Attachmate.Reflection.UserInterface.Frame.ExceptionMessageErrorState"/></exception>
            <example>
            <code>
            Attachmate.Reflection.UserInterface.Frame fram = new Attachmate.Reflection.UserInterface.Frame
                      (Attachmate.Reflection.UserInterface.IFrame RemoteFrame,Application app);
            string text = fram.StatusBarText;
            </code>
            </example>        
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.Visible">
            <summary>
            Gets or sets a value indicating whether the visibility of the application is set to visible.
            </summary>
            <exception cref="T:System.ApplicationException"><see cref="F:Attachmate.Reflection.UserInterface.Frame.ExceptionMessageErrorState"/></exception>
            <example>
            <code>
            Attachmate.Reflection.UserInterface.Frame fram = new Attachmate.Reflection.UserInterface.Frame
                      (Attachmate.Reflection.UserInterface.IFrame RemoteFrame,Application app);
            fram.Visible = true;
            </code>
            </example>        
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.WindowMode">
            <summary>Gets the WindowMode, which is Ribbon, Browser, or Classic.</summary>
            <exception caption="" cref="T:System.ApplicationException"></exception>
            <example>
            	<code title="Sample_Frame_WindowMode()" description="This sample determines whether the interface mode of the active workspace supports multiple documents and displays the number of views open in the workspace." lang="CS">
            void Sample_Frame_WindowMode()
            {
                Application app = MyReflection.ActiveApplication;
                IFrame frame = (IFrame)app.GetObject("Frame");
             
                //check to see if the Reflection mode supports-multi document interface
                if (frame.WindowMode == WindowModes.Browser ||
                    frame.WindowMode == WindowModes.Ribbon)
                    Console.Write("There are " + frame.ViewCount + " views open within " +
                                       "this frame instance.\n");
                else
                    Console.Write("Since this frame is in \"classic\" mode, there cannot be more " +
                                       "than one session view open in it.");
            }</code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.WindowState">
            <summary>Gets or sets the application window state. The window state could be normal, minimized, or maximized.</summary>
            <exception caption="" cref="T:System.ApplicationException"></exception>
            <example>
            	<code title="Example" description="This sample maximizes the active workspace window. " lang="CS">
            void Sample_Frame_WindowState()
            {
                Application app = MyReflection.ActiveApplication;
                IFrame frame = (IFrame)app.GetObject("Frame");
             
                Console.Write("Press 'm' to maximize the Reflection Desktop window.");
                ConsoleKeyInfo cki = Console.ReadKey();
                if (cki.KeyChar == 'm')
                    frame.WindowState = System.Windows.Forms.FormWindowState.Maximized;
                else
                frame.WindowState = System.Windows.Forms.FormWindowState.Normal;
            }</code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.WindowSize">
            <summary>Gets the application window's size.</summary>
            <exception caption="" cref="T:System.ApplicationException"></exception>
            <example>
            	<code title="Example" description="This sample gets the window size and displays the height and width of the active workspace window." lang="CS">
            void Sample_Frame_WindowSize()
            {
                Application app = MyReflection.ActiveApplication;
                IFrame frame = (IFrame)app.GetObject("Frame");
             
                System.Drawing.Size s = frame.WindowSize;
                Console.WriteLine("The Reflection Desktop window height is {0} pixels and the width is {1} pixels.", s.Height, s.Width);
            }</code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.WindowLocation">
            <summary>Gets or sets the application window's location.</summary>
            <exception caption="" cref="T:System.ApplicationException"></exception>
            <example>
            	<code title="Example" description="This sample displays the x,y coordinates of the upper left corner of the active workspace window." lang="CS">
            void Sample_Frame_WindowLocation()
            {
                Application app = MyReflection.ActiveApplication;
                IFrame frame = (IFrame)app.GetObject("Frame");
             
                System.Drawing.Point p = frame.WindowLocation;
                Console.Write("The x,y location (in pixels) of the Reflection Desktop is: " +
                                p.X + ", " + p.Y + "\n");
            }</code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.Name">
            <summary>
            Gets or sets the frame name.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.VBCommonProject">
            <summary>
            VBA Use only.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.StatusBarVisible">
            <summary>
            Gets or sets a value indicating whether the frame window status bar is visible or not.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.Frame.WsDetails">
            <summary>
            get workspace details
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.Frame.CreateView(System.Object)">
             <summary>
             Creates a view for the control.
             </summary>
             <param name="control">Control object.</param>
             <returns>View object.</returns>
             <exception cref="T:System.ApplicationException"><see cref="F:Attachmate.Reflection.UserInterface.Frame.ExceptionMessageErrorState"/></exception>
             <example>
             <code>
             class MyFrame
             {
                private Application app;
                private IView view;
                private IFrame frame;
                private IIbmTerminal terminal;
            
                public Application App
                {
                   get { return app; }
                   set { app = value; }
                }
            
                public IIbmTerminal Terminal
                {
                   set { terminal = value; }
                }
            
                public void GetView()
                {
                   if (app != null)
                   {
                      if (terminal != null)
                      {
                         frame = (IFrame)app.GetObject("Frame");
                         view = frame.CreateView(terminal);
                      }
                      else
                        Console.WriteLine("No terminal exsists.");
                   }
                   else
                     Console.WriteLine("Fails to get Application object.");
                }
             }
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.Frame.GetViewByInstanceId(System.Guid)">
            <summary>
            Returns the view that matches the instanceId.
            </summary>
            <param name="instanceId">View instance Id.</param>
            <returns>View object.</returns>
            <example>
            <code>
            class Program
            {
               private Guid InstanceId;
               private object remoteFrame;
               private Application App;
               private IFrame frame;
                
               public Application App
               {
                  get { return app; }
                  set { app = value; }
               }
               Public void GetInstanceId()
               {
                 Guid = MyReflection.Start();
               }
            
               Public Iview GetView()
               {
                 frame = (IFram)app.GetObject("frame");
                 return frame.GetViewByInstanceId(InstanceId);
               } 
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.Frame.GetViewByControl(System.Object)">
            <summary>Gets the view that is associated with a terminal control.</summary>
            <param name="control">Terminal control</param>
            <returns>The view associated with the specified control</returns>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.Frame.GetViewByTitleText(System.String)">
            <summary>Returns a collection of views that matches the title text.</summary>
            <param name="titleText">The title of the view.</param>
            <returns>View object.</returns>
            <example>
            	<para></para>
            	<code title="Example" description="This sample places custom text in the title of the selected session in the Reflection Desktop." lang="CS">
            void Sample_Frame_GetViewByTitleText()
            {
                //get the application object based on the last workspace that was activated.
                Application app = MyReflection.ActiveApplication;
                IFrame frame = (IFrame)app.GetObject("Frame");
                frame.SelectedView.TitleText = "Alert!";
             
                //If you know the titleText, you can retrieve the view object with it.
                IView view = (IView)frame.GetViewByTitleText("Alert!");
                view.Focus();
             
            }</code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.Frame.GetViewsByFilePath(System.String)">
            <summary>
            Returns a collection of views that match the session file path.
            </summary>
            <param name="filePath">The path of the view object.</param>
            <returns>View object.</returns>
            <example>
            <code>
            class Program
            {
               private object remoteFrame;
               private Application App;
               private Iframe frame;
                
               public Application App
               {
                  get { return app; }
                  set { app = value; }
               }
               Public Iview GetView()
               {
                 frame = (Iframe)app.GetObject("frame");
                 return frame.GetViewByInstanceId("C:\\Progam");
               } 
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.Frame.GetViewsByName(System.String)">
            <summary>
            Gets all of the views by name.
            </summary>
            <param name="name">The name of the view object.</param>
            <returns>Collection of view objects.</returns>
            <example>
            <code>
            class Program
            {
               private object remoteFrame;
               private Application App;
               private Iframe frame;
            
               public Application App
               {
                  get { return app; }
                  set { app = value; }
               }
               Public Iview GetView()
               {
                 frame = (Iframe)app.GetObject("frame");
                 return frame.GetViewByInstanceId("Name");
               } 
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.Frame.Activate">
            <summary>
            Activates the application and gives it focus.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.Frame.Save">
            <summary>
            Saves the session
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.UserInterface.Frame.ViewOpened">
            <summary>
            The event is raised when a new view is opened.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.Frame.OnViewOpened(Attachmate.Reflection.UserInterface.ViewEventArgs)">
            <summary>
            Raises ViewOpened event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.Frame.ViewOpenedEventSink(System.Object,Attachmate.Reflection.UserInterface.ViewEventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.IFrameInternal">
            <summary>
            Added a new interface to help with saving layout in classic SDI mode. 
            This interface was introduced to avoid exposing the new property and method in Dot Net API.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.UserInterface.IFrameInternal.WsDetails">
            <summary>
            get workspace details
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.UserInterface.IFrameInternal.Save">
            <summary>
            Saves the session
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.UserInterface.WindowModes">
            <summary>
            The enumerator for WindowModes, which indicates the user interface mode the application is using.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.WindowModes.Ribbon">
            <summary>
            Indicates the view of the application with Ribbon tabs, groups, and buttons. 
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.WindowModes.Classic">
            <summary>
            Indicates the view of the application with Classic menus and toolbars.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.WindowModes.Browser">
            <summary>
            Indicates the view of the application with Browser mode.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.WindowModes.TouchUx">
            <summary>
            Indicates the view of the application with TouchUx mode.
            </summary>
        </member>
        <member name="F:Attachmate.Reflection.UserInterface.WindowModes.ClassicMDI">
            <summary>
            Indicates the view of the application with Classic MDI menus and toolbars.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Web.Msie.DocumentCompletedEventHandler">
            <summary>
            DocumentCompleted event delegate.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Attachmate.Reflection.Web.Msie.DocumentCompletedEventArgs">
            <summary>
            DocumentCompleted event argument.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.DocumentCompletedEventArgs.#ctor(System.Uri)">
            <summary>
            The constructor.
            </summary>
            <param name="url">The URL of the document.</param>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.DocumentCompletedEventArgs.Url">
            <summary>
            URL that points to the document. 
            </summary>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.DocumentCompletedEventArgs doc ;
            Uri uri = doc.Url;
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Web.Msie.IWebControl">
            <summary>
            IWebControl interface is an interface to access an HTML-based, Web session.
            </summary>
            <remarks>
            The control Guid for IWebControl is {F1F058B1-0472-4095-A782-3D7333813AD0}. 
            The Guid is used as an input parameter for <c>CreateControl(Guid controlType)</c> in the Application object.
            </remarks>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.CanGoBack">
            <summary>
            Gets a value that indicates whether there is a "go back" page.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.CanGoForward">
            <summary>
            Gets a value that indicates whether there is a "go forward" page.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.Document">
            <summary>
            Gets the Web document in the browser.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.NativeBrowerControl">
            <summary>
            Returns reference to session COM browser control, SHDocVw.WebBrowser, instance.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.DocumentText">
            <summary>
            Gets the Web page text.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.DocumentTitle">
            <summary>
            Gets the Web page title.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.EncryptionLevel">
            <summary>
            Gets the Web page encryption level.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.HasChildren">
            <summary>
            Gets a value that indicates whether there are any children.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.IsBusy">
            <summary>
            Gets a value that indicates whether the Web browser is busy.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.IsOffline">
            <summary>
            Gets a value that indicates whether the Web browser is offline.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.ReadyState">
            <summary>
            Gets the ready state of the Web browser.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.ScriptErrorsSuppressed">
            <summary>
            Gets or sets the state of Script Errors Suppression.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.StatusText">
            <summary>
            Gets the status bar text.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.Url">
            <summary>
            Gets or sets the URL of the current Web page.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebControl.Version">
            <summary>
            Gets the version of the Web browser.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.Close(Attachmate.Reflection.CloseOption)">
            <summary>Closes the terminal session with the close option.</summary>
            <param name="option">Specifies how to handle the Save action when closing the control.</param>
            <returns>ReturnCode value indicates success or error conditions.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.GoBack">
            <summary>
            Goes back to the previous page.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.GoForward">
            <summary>
            Goes forward to the next page.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.GoHome">
            <summary>
            Goes to the home page.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.GoSearch">
            <summary>
            Goes to the search page.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.Navigate(System.String)">
            <summary>
            Navigates to the URL.
            </summary>
            <param name="Url">The Web document URL.</param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.Navigate(System.String,System.Boolean)">
            <summary>
            Navigates to the URL.
            </summary>
            <param name="Url">The web document URL</param>
            <param name="newWindow">Determines if the new page is in a new window.</param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.Navigate(System.String,System.String)">
            <summary>
            Navigates to the URL and displays the content in the frame pointed to by targetFrameName.
            </summary>
            <param name="Url">The Web document URL.</param>
            <param name="targetFrameName">The name of the frame in which to load the document.</param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.Navigate(System.String,System.String,System.Byte[],System.String)">
            <summary>
            Navigates to the URL. 
            </summary>
            <remarks>
            In the frame pointed to by targetFrameName, additional postdata and headers can be passed to the server at the same time.
            </remarks>
            <param name="Url">The Web document URL.</param>
            <param name="targetFrameName">The name of the frame in which to load the document.</param>
            <param name="postData">HTTP POST data, such as form data.</param>
            <param name="additionalHeaders">HTTP headers to add to the default headers.</param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.Print">
            <summary>
            Prints the page.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.Refresh">
            <summary>
            Refreshes the page.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.Save">
            <summary>
            Saves all settings.
            </summary>
            <returns>Return code.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.SaveAs(System.String)">
            <summary>
            Saves all settings to the specified file.
            </summary>
            <param name="filePath">Web session file path.</param>
            <returns>Return code.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebControl.Stop">
            <summary>
            Stops the navigation activity and any other activities, such as playing active contents.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.IWebControl.CanGoBackChanged">
            <summary>
            Occurs when the CanGoBack state changes.  
            </summary>
            <remarks>
            The CanGoBack state indicates whether there is history to go back to in the browser.
            </remarks>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.IWebControl.CanGoForwardChanged">
            <summary>
            Occurs when the CanGoForward state changes. 
            </summary>
            <remarks>
            The CanGoForward state indicates whether there is history to go forward to in the browser.
            </remarks>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.IWebControl.DocumentCompleted">
            <summary>
            Occurs when navigating and parsing a new Web page is complete.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.IWebControl.DocumentTitleChanged">
            <summary>
            Occurs when the document title is changed.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.IWebControl.EncryptionLevelChanged">
            <summary>
            Occurs when a Web page encryption level changes.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.IWebControl.FileDownload">
            <summary>
            Occurs when a file is downloaded.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.IWebControl.Navigated">
            <summary>
            Occurs when navigation is used.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.IWebControl.Navigating">
            <summary>
            Occurs immediately before navigation to a new page.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.IWebControl.StatusTextChanged">
            <summary>
            Occurs when the Web browser status text changes.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Web.Msie.IWebDocument">
            <summary>
            Provides top-level programmatic access to an HTML document hosted by the WebControl.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebDocument.ActiveElement">
            <summary>
            Gets the Web element that has the focus. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebDocument.AllElements">
            <summary>
            Gets all Web elements. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebDocument.Body">
            <summary>
            Gets the body element. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebDocument.Cookie">
            <summary>
            Gets or sets the cookie property.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebDocument.DefaultEncoding">
            <summary>
            Gets the default encoding.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebDocument.Domain">
            <summary>
            Gets or sets the string that describes the domain of this document for security purposes.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebDocument.Encoding">
            <summary>
            Gets or sets the character encoding for this document.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebDocument.Focused">
            <summary>
            Gets a value that indicates whether the document has user input focus. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebDocument.Forms">
            <summary>
            Gets a collection of all of the form elements in the document. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebDocument.Images">
            <summary>
            Gets a collection of all the image tags in the document. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebDocument.Links">
            <summary>
            Gets a list of all the hyperlinks within the current HTML document. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebDocument.Title">
            <summary>
            Gets or sets the text value of the title tag in the current HTML document. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebDocument.Url">
            <summary>
            Gets the URL of the current document.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebDocument.GetElementById(System.String)">
            <summary>
            Gets a Web element by ID. 
            </summary>
            <param name="Id">Element Id.</param>
            <returns>WebElement object.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebDocument.GetElementFromPoint(System.Drawing.Point)">
            <summary>
            Gets the Web element at the point. 
            </summary>
            <param name="point">Web element coordinates.</param>
            <returns>WebElement object.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebDocument.GetElementsByTagName(System.String)">
            <summary>
            Gets a collection of elements with the specified HTML tag. 
            </summary>
            <param name="tagName">The HTML tag.</param>
            <returns>Collection of WebElement objects.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebDocument.InvokeScript(System.String)">
            <summary>
            Executes an Active Scripting function defined in an HTML page.
            </summary>
            <param name="scriptName">Name of the script function.</param>
            <returns>The object returned by the Active Scripting call.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebDocument.InvokeScript(System.String,System.Object[])">
            <summary>
            Executes an Active Scripting function (with arguments) defined in an HTML page.
            </summary>
            <param name="scriptName">Name of the script function.</param>
            <param name="arguments">The array of script function's arguments.</param>
            <returns>The object returned by the Active Scripting call.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebDocument.GetElement(System.String)">
            <summary> 
            Gets the first Web element by an XPath path, relative to the current Web element.
            </summary>
            <param name="xPath">An XPath path pointing to a WebElement in the WebDocument.</param>
            <remarks>
            XPath is a language that describes how to locate specific elements in XML documents 
            by using an addressing syntax. This syntax is based on a path through the document's logical structure or hierarchy. 
            A sample XPath syntax: <c>HTML/BODY/TABLE/TBODY/TR[1]/TD[1]</c>, where WebElement index starts from 0.
            </remarks>
            <returns>WebElement found, or null if no WebElement was found.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebDocument.Extract(System.String,System.String,System.Boolean)">
            <summary>
            Extracts text delimited by pretext and posttext from an HTML text source.
            </summary>
            <param name="pretext">The text before.</param>
            <param name="posttext">The text after.</param>
            <param name="singleLine">If singleLine or not.</param>
            <returns>The extracted text.</returns>
        </member>
        <member name="T:Attachmate.Reflection.Web.Msie.IWebElement">
            <summary>
            IWebElement Represents an HTML element inside of a Web page. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.All">
            <summary>
            Gets all elements underneath the current element. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.CanHaveChildren">
            <summary>
            Gets a value that indicates whether this element has child elements. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.Children">
            <summary>
            Gets all children of the current element. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.Document">
            <summary>
            Gets the HtmlDocument to which this element belongs. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.Enabled">
            <summary>
            Gets or sets whether the user can input data into this element. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.FirstChild">
            <summary>
            Gets the next element below this element in the document tree. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.Id">
            <summary>
            Gets or sets a label by which to identify the element. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.InnerHtml">
            <summary>
            Gets or sets the HTML markup underneath this element. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.InnerText">
            <summary>
            Gets or sets the text assigned to the element. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.Name">
            <summary>
            Gets or sets the name of the element. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.NextSibling">
            <summary>
            Gets the next element at the same level as this element in the document tree. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.OuterHtml">
            <summary>
            Gets or sets the current element's HTML code. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.OuterText">
            <summary>
            Gets or sets the current element's text. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.Style">
            <summary>
            Gets or sets a comma-delimited list of styles for the current element.
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.IWebElement.TagName">
            <summary>
            Gets the name of the HTML tag. 
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebElement.GetAttribute(System.String)">
            <summary>
            Gets the value of the named attribute on the element. 
            </summary>
            <param name="attributeName">The name of the attribute. This argument is not case sensitive.</param>
            <returns>The value of this attribute on the element, as a string value. If the specified attribute does not exist on this element, returns an empty string.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebElement.GetElementsByTagName(System.String)">
            <summary>
            Gets a collection of elements in the HTML WebDocument by HTML. <paramref name="tagName"/>. 
            </summary>
            <param name="tagName">The name of the tag whose WebElement objects you want to retrieve.</param>
            <returns>A collection containing all elements whose HTML tag name is equal to tagName. </returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebElement.InvokeMember(System.String)">
            <summary>
            Executes a method that is unique to the current element. 
            </summary>
            <param name="methodName">The name of the property or method to invoke. </param>
            <returns>The element returned by the function, represented as an Object. If this Object is another HTML element, and you have a reference to the unmanaged MSHTML library added to your project, you can cast it to its appropriate unmanaged interface.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebElement.InvokeMember(System.String,System.Object[])">
            <summary>
            Executes a method (with parameters) defined in the current HTML page. 
            </summary>
            <param name="methodName">The name of the property or method to invoke. </param>
            <param name="parameters">Input parameters.</param>
            <returns>The element returned by the function, represented as an Object. If this Object is another HTML element, and you have a reference to the unmanaged MSHTML library added to your project, you can cast it to its appropriate unmanaged interface.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebElement.ScrollIntoView(System.Boolean)">
            <summary>
            Scrolls through the document that contains this element until the top or bottom edge 
            of the element is aligned with the top of the document's window. 
            </summary>
            <param name="alignWithTop">If true, the top of the object will be displayed at the top of the window. If false, the bottom of the object will be displayed at the bottom of the window.</param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebElement.SetAttribute(System.String,System.String)">
            <summary>
            Sets the value of the named attribute on the element. 
            </summary>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="value">The new value of this attribute.</param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebElement.GetText">
            <summary>
            Gets text from the text field if the Web element is an input text type.
            </summary>
            <returns>The text returned</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebElement.PutText(System.String)">
            <summary>
            Puts text in the text field if the Web element is an input text type.
            </summary>
            <param name="text">The text to input.</param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebElement.Submit">
            <summary>
            Submits the form if the Web element is a form.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebElement.Click">
            <summary>
            Clicks the link if the Web element is a link.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebElement.GetChildrenTagNames">
            <summary>
            Gets all tag names of children.
            </summary>
            <returns>A collection of tag names.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebElement.GetElement(System.String)">
            <summary> 
            Gets the first Web element by an XPath path, relative to the current web element.
            </summary>
            <param name="xPath">An XPath path pointing to a WebElement in the WebDocument.</param>
            <remarks>
            XPath is a language that describes how to locate specific elements in XML documents 
            by using an addressing syntax. This syntax is based on a path through the document's logical structure 
            or hierarchy. A sample XPath syntax: <c>HTML/BODY/TABLE/TBODY/TR[1]/TD[1]</c>, 
            where WebElement index starts from 0.
            </remarks>
            <returns>WebElement found, or null if WebElement is not found.</returns>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.IWebElement.Extract(System.String,System.String,System.Boolean)">
            <summary>
            Extracts text that is delimited by pretext and posttext from an HTML text source.
            </summary>
            <param name="pretext">The text before.</param>
            <param name="posttext">The text after.</param>
            <param name="singleLine">If singleLine or not.</param>
            <returns>The extracted text.</returns>
        </member>
        <member name="T:Attachmate.Reflection.Web.Msie.MsieException">
            <summary>
            Exception object thrown by Web objects to indicate a error condition.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.MsieException.#ctor">
            <summary>
            Initializes a new instance of the IbmHostsException class.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.MsieException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MsieException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.MsieException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MsieException class with a specified error message and a reference
             to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.MsieException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor.
            </summary>
            <param name="info">SerializationInfo class object.</param>
            <param name="context">StreamingContext struct object.</param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.MsieException.#ctor(Attachmate.Reflection.ErrorCode,System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="errorCode">ErrorCode object.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.MsieException.ErrorCode">
            <summary>
            The error code that indicates the error condition.
            </summary>
            <example>
            <code>
            ErrorCode error = ErrorCode.Error;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.MsieException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <summary>
            Populates a <c>System.Runtime.Serialization.SerializationInfo</c> with the data
            needed to serialize the target object.
            </summary>
            <param name="info">Serialization object to populate with data.</param>
            <param name="context">The destination for the serialization.</param>
            <example>
            <code>
            class Program
            {
                private MsieException msiEx;
                private System.Runtime.Serialization.SerializationInfo info;
                private System.Runtime.Serialization.StreamingContext stream;
            
                public void GetData()
                {
                   msiEx.GetObjectData(info,stream);
                }
            } 
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Web.Msie.NavigatedEventHandler">
            <summary>
            NavigatedEvent delegate that handles the navigated event of a Web control.
            </summary>
            <param name="sender">the sender of the event.</param>
            <param name="e">Navigated Event argument.</param>
        </member>
        <member name="T:Attachmate.Reflection.Web.Msie.NavigatedEventArgs">
            <summary>
            Navigated Event argument.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.NavigatedEventArgs.#ctor(System.Uri)">
            <summary>
            The constructor.
            </summary>
            <param name="url">Uri class object.</param>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.NavigatedEventArgs.Url">
            <summary>
            URL of the Web document.
            </summary>
        </member>
        <member name="T:Attachmate.Reflection.Web.Msie.NavigatingEventHandler">
            <summary>
            Navigating event delegate.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">Navigating event argument.</param>
        </member>
        <member name="T:Attachmate.Reflection.Web.Msie.NavigatingEventArgs">
             <summary>
             Navigating event argument.
             </summary>
            [Serializable]
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.NavigatingEventArgs.#ctor(System.Uri,System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="url">Uri of the web document.</param>
            <param name="targetFrameName">The name of the frame in which to load the document.</param>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.NavigatingEventArgs.Url">
            <summary>
            The URL to which the WebCOntrol is navigating.
            </summary>
            <example>
            <code>
            NavigatingEventArgs Nav;
            Uri uri = Nav.Url;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.NavigatingEventArgs.TargetFrameName">
            <summary>
            The target frame in which the new Web page is displayed.
            </summary>
            <example>
            <code>
            NavigatingEventArgs Nav;
            string frameName = Nav.TargetFrameName;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.NavigatingEventArgs.Cancel">
            <summary>
            Cancel property to indicate whether the user wants to cancel the navigation. 
            Set Cancel property to true to cancel the navigation.
            </summary>
            <example>
            <code>
            NavigatingEventArgs Nav;
            Nav.Url = true;
            </code>
            </example>
        </member>
        <member name="T:Attachmate.Reflection.Web.Msie.WebControl">
            <exclude/>
            <summary>
            WebControl class for an HTML-based, Web session..
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Web.Msie.WebControl"/> class. 
            </summary>
            <param name="webControlRemote">
            Remote web control instance
            </param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.Dispose">
            <summary>
            Dispose the object to release the resources when it is no longer needed.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Attachmate.Reflection.Web.Msie.WebControl"/> class. 
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.CanGoBack">
            <summary>
            Gets a value indicating whether there is a "go back" page.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.CanGoBack = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.CanGoForward">
            <summary>
            Gets a value indicating whether there is a "go forward" page.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.CanGoForward = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.Document">
            <summary>
            Gets the Web document in the browser.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            private WebControl WControl;
            private WebDocument WDocument;
            
            public void GetDocument()
            {
              WDocument = WControl.Document;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.NativeBrowerControl">
            <summary>
            Gets the native browser control - SHDocVw.WebBrowser
            </summary>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.DocumentText">
            <summary>
            Gets or sets the Web page text.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            //To <c>set</c> the value of the DocumentText property:
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.DocumentText = "Text Here";
            
            pubic string GetDocumentText
            {
              Get
              {
                 return WControl.DocumentText;
              }
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.DocumentTitle">
            <summary>
            Gets the Web page title.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            pubic string GetDocumentTitle
            {
               Get
               {
                  return WControl.DocumentTitle; 
               }
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.EncryptionLevel">
            <summary>
            Gets the Web page encryption level.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            pubic WebBrowserEncryptionLevel GetEncryptionLevel ()
            {
                return WControl.EncryptionLevel;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.HasChildren">
            <summary>
            Gets a value indicating whether there are any children.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            pubic bool HasChidren()
            {
               return WControl.HasChidern;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.IsBusy">
            <summary>
            Gets a value indicating whether the control is busy.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            pubic bool IsBusy()
            {
               return WControl.IsBusy;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.IsOffline">
            <summary>
            Gets a value indicating whether the control is in offline status.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            pubic bool IsOffline()
            {
               return WControl.IsOffline;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.ReadyState">
            <summary>
            Gets the ready state of the Web browser.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            pubic WebBrowserReadyState GetReadyState()
            {
               return WControl.ReadyState;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.ScriptErrorsSuppressed">
            <summary>
            Gets or sets a value indicating whether script errors are suppressed.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            pubic bool GetReadyState()
            {
               return WControl.ScriptErrorsSuppressed;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.StatusText">
            <summary>
            Gets the status bar text. 
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            pubic string GetStatusText()
            {
               return WControl.StatusText;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.Url">
            <summary>
            Gets or sets the URL of the current Web page.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            //To <c>get</c> the URL of the current page: 
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            pubic Uri GetURL()
            {
               return WControl.Url;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebControl.Version">
            <summary>
            Gets the version of the Web browser.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            pubic Version GetVersion()
            {
               return WControl.Version;
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.Close(Attachmate.Reflection.CloseOption)">
            <summary>
            Closes the terminal session with the close option.
            </summary>
            <param name="option">The Closeoption enum object.</param>
            <returns>ReturnCode object.</returns>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.Close(CloseOption.CloseAlwaysSave);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.GoBack">
            <summary>
            Goes back to the previous page.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.GoBack();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.GoForward">
            <summary>
            Goes forward.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.GoForward();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.GoHome">
            <summary>
            Goes to the home page.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.GoHome();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.GoSearch">
            <summary>
            Goes to the search page.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.GoSearch();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.Navigate(System.String)">
            <summary>
            Navigates to the URL.
            </summary>
            <param name="location">The URL of the Web document.</param>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.Navigate("http://www.google.com");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.Navigate(System.String,System.Boolean)">
            <summary>
            Navigates to the URL.  
            </summary>
            <param name="location">The URL of the Web document.</param>
            <param name="newWindow">Determines whether the new page is in a new window.</param>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.Navigate("www.attachmate.com",true);
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.Navigate(System.String,System.String)">
            <summary>
            Navigates to the URL and displays the content in the frame pointed to by targetFrameName.
            </summary>
            <param name="location">The URL of the Web document.</param>
            <param name="targetFrameName">The name of the frame in which to load the document.</param>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.Navigate("www.attachmate.com","Untitled")
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.Navigate(System.String,System.String,System.Byte[],System.String)">
            <summary>
            Navigates to the URL in the frame pointed to by targetFrameName.
            </summary>
            <param name="location">URL of the Web document.</param>
            <param name="targetFrameName">The name of the frame in which to load the document</param>
            <param name="postData">HTTP POST data such as form data.</param>
            <param name="additionalHeaders">HTTP headers to add to the default headers.</param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.Print">
            <summary>
            Prints the page.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.Print();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.Refresh">
            <summary>
            Refreshes the page.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.Refresh();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.Save">
            <summary>
            Saves all settings.
            </summary>
            <returns>Return code.</returns>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.Save();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.SaveAs(System.String)">
            <summary>
            Saves all settings to the specified file.
            </summary>
            <param name="filePath">Web session file path.</param>
            <returns>Return code.</returns>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.SaveAs(@"C:\...");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.Stop">
            <summary>
            Stops the navigation and any other activities, such as playing active contents.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebControl.NewInvalidWebControlOperationException">Exception is thrown when an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebControl WControl;
            WControl.Stop();
            </code>
            </example>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.WebControl.CanGoBackChanged">
            <summary>
            CanGoBack state change event. CanGoBack state indicates whether there is history to go back to in the browser.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.WebControl.CanGoForwardChanged">
            <summary>
            CanGoForward state change event. CanGoForward state indicates whether there is history to go forward to in the browser.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.WebControl.DocumentCompleted">
            <summary>
            DocumentCompleted event fires when navigating and parsing a new Web page is completed.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.WebControl.DocumentTitleChanged">
            <summary>
            Document title change event.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.WebControl.EncryptionLevelChanged">
            <summary>
            Web page encryption level changed event.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.WebControl.FileDownload">
            <summary>
            File download event.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.WebControl.Navigated">
            <summary>
            Navigated event.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.WebControl.Navigating">
            <summary>
            Fires right before navigation to a new page occurs.
            </summary>
        </member>
        <member name="E:Attachmate.Reflection.Web.Msie.WebControl.StatusTextChanged">
            <summary>
            Web browser status text changed event.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.OnCanGoBackChanged(System.EventArgs)">
            <summary>
            Fires CanGoBackChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.OnCanGoForwardChanged(System.EventArgs)">
            <summary>
            Fires CanGoForeardChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.OnDocumentCompleted(Attachmate.Reflection.Web.Msie.DocumentCompletedEventArgs)">
            <summary>
            Fires DocumentCompleted event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.OnDocumentTitleChanged(System.EventArgs)">
            <summary>
            Fires DocumentTitleChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.OnEncryptionLevelChanged(System.EventArgs)">
            <summary>
            Fires EncryptionLEveleChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.OnFileDownload(System.EventArgs)">
            <summary>
            Fired FileDownload event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.OnNavigated(Attachmate.Reflection.Web.Msie.NavigatedEventArgs)">
            <summary>
            Fired Navigated event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.OnNavigating(Attachmate.Reflection.Web.Msie.NavigatingEventArgs)">
            <summary>
            Fires Navigating event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.OnStatusTextChanged(System.EventArgs)">
            <summary>
            Fired StatusTextChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.CanGoBackChangedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.CanGoForwardChangedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.DocumentCompletedEventSink(System.Object,Attachmate.Reflection.Web.Msie.DocumentCompletedEventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.DocumentTitleChangedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.EncryptionLevelChangedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.FileDownloadEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.NavigatedEventSink(System.Object,Attachmate.Reflection.Web.Msie.NavigatedEventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.NavigatingEventSink(System.Object,Attachmate.Reflection.Web.Msie.NavigatingEventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebControl.StatusTextChangedEventSink(System.Object,System.EventArgs)">
            <summary>
            For internal use.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Attachmate.Reflection.Web.Msie.WebDocument">
            <exclude/>
            <summary>
            WebDocument object.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebDocument.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Web.Msie.WebDocument"/> class. 
            </summary>
            <param name="webDocumentRemote">
            Document remote object.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebDocument.ActiveElement">
            <summary>
            <c>Gets</c> the Web element that has the focus. 
            </summary>
            <remarks>
            Call <c>Dispose()</c> on the returned IWebElement when it is no longer needed.
            </remarks>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public Attachmate.Reflection.Web.Msie.WebElement GetActiveElement()
            {
                return WDocument.ActiveElement;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebDocument.AllElements">
            <summary>
            <c>Gets</c> all Web elements. 
            </summary>
            <remarks>
            Call <c>Dispose()</c> on each returned IWebElement when it is no longer needed.
            </remarks>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public Attachmate.Reflection.Web.Msie.WebElement[] GetAllElements()
            {
              return WDocument.AllElements;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebDocument.Body">
            <summary>
            <c>Gets</c> the body element. 
            </summary>
            <remarks>
            Call <c>Dispose()</c> on the returned IWebElement when it is no longer needed.
            </remarks>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public Attachmate.Reflection.Web.Msie.WebElement GetElementBody()
            {
                return WDocument.Body;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebDocument.Cookie">
            <summary>
            Gets the cookie.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public string GetCookie()
            {
               return WDocument.Cookie;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebDocument.DefaultEncoding">
            <summary>
            <c>Gets</c> the default encoding.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public string GetDefaultEncoding()
            {
               return WDocument.DefaultEncoding;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebDocument.Domain">
            <summary>
            <c>Gets</c> or <c>sets</c> the string that describes the domain of this document for security purposes.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public string GetDomain()
            {
               return WDocument.Domain;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebDocument.Encoding">
            <summary>
            <c>Gets</c> or <c>sets</c> the character encoding for this document.
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public string GetEncoding()
            {
               return WDocument.Encoding;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebDocument.Focused">
            <summary>
            <c>Gets</c> a value that indicates whether the document has user input focus. 
            </summary>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public bool IsFocused()
            {
               return WDocument.Focused;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebDocument.Forms">
             <summary>
             <c>Gets</c> a collection of all of the form elements in the document.
             </summary>
             <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
             <example>
             <code>
             private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
             public Attachmate.Reflection.Web.Msie.WebElement[] GetWebElements()
             {
                return WDocument.Forms;
             }
             </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebDocument.Images">
             <summary>
             <c>Gets</c> a collection of all of the image tags in the document. 
             </summary>
             <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
             <example>
             <code>
             private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
             public Attachmate.Reflection.Web.Msie.WebElement[] GetImages()
             {
                return WDocument.Images;
             }
             </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebDocument.Links">
             <summary>
             <c>Gets</c> a list of all of the hyperlinks within the document. 
             </summary>
             <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
             <example>
             <code>
             private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
             public Attachmate.Reflection.Web.Msie.WebElement[] GetLinks()
             {
                return WDocument.Links;
             }
             </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebDocument.Title">
             <summary>
             <c>Gets</c> or <c>sets</c> the text value of the title tag in the current HTML document. 
             </summary>
             <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
             <example>
             <code>
             private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
             public string GetDocumentTitle()
             {
                return WDocument.Title;
             }
             </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebDocument.Url">
             <summary>
             <c>Gets</c> or <c>sets</c> the URL of the current document.
             </summary>
             <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
             <example>
             <code>
             private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
             public Uri GetWebElements()
             {
                return WDocument.Uri;
             }
             </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebDocument.GetElement(System.String)">
             <summary>
             <c>Get</c> the first Web element by XPath. 
             </summary>
             <remarks>
             Call <c>Dispose()</c> on the returned IWebElement when it is no longer needed.
             </remarks>
             <param name="xpath">Element path.</param>
             <returns>IWebElement object.</returns>
             <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
             <example>
             <code>
             private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
             private Attachmate.Reflection.Web.Msie.WebElement WElement;
             
             WElement = WDocument.GetElement("HTML/BODY/TABLE/TBODY/TR[1]/TD[1]");
             </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebDocument.GetElementById(System.String)">
             <summary>
             <c>Gets</c> a Web element by ID. 
             </summary>
             <remarks>
             Call <c>Dispose()</c> on the returned IWebElement when it is no longer needed.
             </remarks>
             <param name="Id">Element Id.</param>
             <returns>IWebElement object.</returns>
             <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
             <example>
             <code>
             private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
             private Attachmate.Reflection.Web.Msie.WebElement WElement;
             //Calls the GetElementById method.
             WElement = WDocument.GetElementById("USDOLLAR");
             </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebDocument.GetElementFromPoint(System.Drawing.Point)">
            <summary>
            <c>Gets</c> the Web element at the point. 
            </summary>
            <remarks>
            Call <c>Dispose()</c> on the returned IWebElement when it is no longer needed.
            </remarks>
            <param name="point">Element coordinates.</param>
            <returns>IWebElement object.</returns>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public Attachmate.Reflection.Web.Msie.WebElement GetElement()
            {
              return WDocument.GetElementFromPoint(new System.Drawing.Point(0,0));
            } 
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebDocument.GetElementsByTagName(System.String)">
            <summary>
            Retrieves a collection of elements with the specified HTML tag.
            </summary>
            <param name="tagName">The HTML tag name.</param>
            <returns>Collection of elements.</returns>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public Attachmate.Reflection.Web.Msie.WebElement GetElement()
            {
              return WDocument.GetElementByTagName("Tag");
            } 
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebDocument.InvokeScript(System.String)">
            <summary>
            Executes an Active Scripting function defined in an HTML page.
            </summary>
            <param name="scriptName">Script name to be invoked.</param>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public Object ExecuteActiveScript()
            {
              return WDocument.InvokeScript("Script Name");
            } 
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebDocument.InvokeScript(System.String,System.Object[])">
            <summary>
            Executes an Active Scripting function defined in an HTML page with the arguments.
            </summary>
            <param name="scriptName">Script name to be invoked.</param>
            <param name="arguments">Script arguments.</param>
            <returns></returns>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public Object ExecuteActiveScript()
            {
              return WDocument.InvokeScript("Script Name",argument1,argument2);
            } 
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebDocument.Extract(System.String,System.String,System.Boolean)">
            <summary>
            Extracts text delimited by pretext and posttext from an HTML text source.
            </summary>
            <param name="pretext"></param>
            <param name="posttext"></param>
            <param name="singleLine"></param>
            <returns></returns>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebDocument.NewInvalidWebDocumentOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public string[] ExtractText()
            {
              return WDocument.Extract("Pretext","Posttext",true);
            } 
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebDocument.ConvertToWebElements(Attachmate.Reflection.Web.Msie.IWebElement[])">
            <summary>
            
            </summary>
            <param name="webElementsRemote"></param>
            <returns></returns>
        </member>
        <member name="T:Attachmate.Reflection.Web.Msie.WebElement">
            <exclude/>
            <summary>
            WebElement object.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.#ctor(System.Object,Attachmate.Reflection.Web.Msie.WebDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Attachmate.Reflection.Web.Msie.WebElement"/> class. 
            </summary>
            <param name="webElementRemote">
            WebElement object.
            </param>
            <param name="webDocument">
            WebDocument object.
            </param>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.All">
            <summary>
            <c>Gets</c> all elements underneath the current element.
            </summary>
            <remarks>
            Call <c>Dispose()</c> on each returned IWebElement when it is no longer needed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            public Attachmate.Reflection.Web.Msie.WebElement[] GetAllElements()
            {
                return WElement.All;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.CanHaveChildren">
            <summary>
            <c>Gets</c> a value that indicates whether this element has child elements. 
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            WElement.CanHaveChildren = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.Children">
            <summary>
            <c>Gets</c> all children of the current element. 
            </summary>
            <remarks>
            Call <c>Dispose()</c> on each returned IWebElement when it is no longer needed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            public Attachmate.Reflection.Web.Msie.WebElement[] GetAllChildren()
            {
                return WElement.Children;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.Document">
            <summary>
            <c>Gets</c> the HtmlDocument to which this element belongs. 
            </summary>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            public Attachmate.Reflection.Web.Msie.WebElement[] GetDocument()
            {
                return WElement.Document;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.Enabled">
            <summary>
            <c>Gets</c> or <c>sets</c> whether the user can input data into this element. 
            </summary>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            WElement.Enabled = true;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.FirstChild">
            <summary>
            <c>Gets</c> the next element below this element in the document tree. 
            </summary>
            <remarks>
            Call <c>Dispose()</c> on the returned IWebElement when it is no longer needed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            public Attachmate.Reflection.Web.Msie.WebElement GetFirstElement()
            {
                return WElement.FirstChild;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.Id">
            <summary>
            <c>Gets</c> or <c>sets</c> a label by which to identify the element. 
            </summary>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            public string GetElementId()
            {
                return WElement.Id;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.InnerHtml">
            <summary>
            <c>Gets</c> or <c>sets</c> the HTML markup underneath this element. 
            </summary>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            public string GetInnerHtmlForElement()
            {
                return WElement.InnerHtml;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.InnerText">
            <summary>
            <c>Gets</c> or <c>sets</c> the text assigned to the element. 
            </summary>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            public string GetElementText()
            {
                return WElement.InnerText;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.Name">
            <summary>
            <c>Gets</c> or <c>sets</c> the name of the element. 
            </summary>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            
            //Set element name.
            WElement.Name = "Untitled";
            
            //Get element name.
            string elementName = WElement.Name;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.NextSibling">
            <summary>
            <c>Gets</c> the next element at the same level as this element in the document tree. 
            </summary>
            <remarks>
            Call <c>Dispose()</c> on the returned IWebElement when it is no longer needed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            public Attachmate.Reflection.Web.Msie.WebElement GetNextSibling()
            {
                return WElement.NextSibling;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.OuterHtml">
            <summary>
            <c>Gets</c> or <c>sets</c> the current element's HTML code. 
            </summary>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            
            //Set the Element OuterHtml value.
            WElement.OuterHtml = ""<marquee>" &amp; .outerHtmlHTML &amp; "</marquee>"";
            
            //Get the element outerHtml value.
            public string GetElementOuterHtml()
            {
                return WElement.OuterHtml;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.OuterText">
            <summary>
            <c>Gets</c> or <c>sets</c> the current element's text. 
            </summary>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            public string GetElementOuterText()
            {
                return WElement.OuterText;
            }
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.Style">
            <summary>
            <c>Gets</c> or <c>sets</c> a comma-delimited list of styles for the current element.
            </summary>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            //Set Element style
            WElement.Style = "Times New Roman;font-size:14px;font-weight:bold":
            
            //Get Element style.
            string ElementStyle = WElement.Style;
            </code>
            </example>
        </member>
        <member name="P:Attachmate.Reflection.Web.Msie.WebElement.TagName">
            <summary>
            <c>Gets</c> the name of the HTML tag. 
            </summary>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            string HtmlTagName = WElement.TagName;
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.Dispose">
            <summary>
            Disposes the object when it is no longer needed to release resources.
            </summary>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.GetAttribute(System.String)">
            <summary>
            Retrieves the value of the named attribute on the element. 
            </summary>
            <param name="attributeName">Element attribute name.</param>
            <returns>Attribute name.</returns>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            public string GetAttribute()
            {
                return WElement.GetAttribute("Label");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.GetElementsByTagName(System.String)">
            <summary>
            Retrieves a collection of elements represented in HTML by the specified HTML tag. 
            </summary>
            <remarks>
            Call <c>Dispose()</c> on each returned IWebElement when it is no longer needed.
            </remarks>
            <param name="tagName">Name of the HTML tag.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            Attachmate.Reflection.Web.Msie.WebElement WElement;
            public Attachmate.Reflection.Web.Msie.IWebElement[] GetElement()
            {
                return WElement.GetElementsByTagName("IMG");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.InvokeMember(System.String)">
            <summary>
            Executes a method unique to the current element. 
            </summary>
            <remarks>Use this version of InvokeMember to execute unexposed methods that take no arguments.</remarks>
            <param name="methodName">The name of the property or method to invoke.</param>
            <returns>The element returned by the function, represented as an Object. If this Object is another HTML element 
            and your project has a reference to the unmanaged MSHTML library, 
            you can cast it to its appropriate unmanaged interface.</returns>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            
            public Attachmate.Reflection.Web.Msie.IWebElement[] Invoke()
            {
                return WElement.InvokeMember("MethodName");
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.InvokeMember(System.String,System.Object[])">
            <summary>
            Executes a method unique to the current element with parameters.
            </summary>
            <param name="methodName">The name of the property or method to invoke.</param>
            <param name="parameters"></param>
            <returns>The element returned by the function, represented as an Object. If this Object is another HTML element 
            and your project has a reference to the unmanaged MSHTML library,
            you can cast it to its appropriate unmanaged interface.</returns>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <remarks>All arguments supplied to InvokeMember are converted to Win32 VARIANT data types before 
            they're passed to the named scripting function.</remarks>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            private object parameters;
            
            public Attachmate.Reflection.Web.Msie.IWebElement[] Invoke()
            {
                return WElement.InvokeMember("MethodName",parameters);
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.ScrollIntoView(System.Boolean)">
             <summary>
             Scrolls through the document that contains this element until the top 
             or bottom edge of this element is aligned with the top of the document's window. 
             </summary>
             <param name="alignWithTop">If true, the top of the object is displayed at the top of the window. 
             If false, the bottom of the object is displayed at the bottom of the window.</param>
             <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
             <example>
             <code>
             private Attachmate.Reflection.Web.Msie.WebElement WElement;
            
             WElement.ScrollIntoView(true);
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.SetAttribute(System.String,System.String)">
             <summary>
             Sets the value of the named attribute on the element. 
             </summary>
             <param name="attributeName">The name of the attribute to set.</param>
             <param name="value">The new value of this attribute. </param>
             <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
             <remarks>An attribute in HTML is any valid name-value pair for that element. 
             HtmlElement exposes only those attributes that are common to all elements. 
             For example, SRC is a predefined attribute for the IMG tag, but not for the DIV tag. 
             <para>Use GetAttribute and SetAttribute to manipulate attributes that aren't exposed 
             on the managed Document Object Model (DOM). If attributeName is not a defined 
             attribute on an element, SetAttribute defines it on the element as a new attribute.
             GetAttribute and SetAttribute are not case-sensitive.</para>
             To set the class attribute on an HtmlElement, you must refer to the attribute 
             as className when specifying the first argument to SetAttribute.
            </remarks>
             <example>
             <code>
             private Attachmate.Reflection.Web.Msie.WebElement WElement;
             
             WElement.SetAttribute("SRC", "http://www.adatum.com/images/footer-banner.jpg");
             </code>
             </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.GetText">
            <summary>
            Gets text.
            </summary>
            <returns>The returned text.</returns>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            
            string text = WElement.GetText();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.PutText(System.String)">
            <summary>
            Puts text to the screen if the Web element is of the input type.
            </summary>
            <param name="text">The text to be set.</param>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation is executed.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            
            WElement.PutText("Text");
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.Submit">
            <summary>
            Submits the form if the Web element is a form.
            </summary>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation is executed.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            
            WElement.Submit();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.Click">
            <summary>
            Clicks the link, if the Web element is a link.
            </summary>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            
            WElement.Click();
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.GetChildrenTagNames">
            <summary>
            <c>Returns</c> all of the name tags of children.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            
            public string[] GetChildren()
            {
               return WElement.GetChildrenTagNames();
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.GetElement(System.String)">
            <summary>
            Relative to the current Web element. 
            </summary>
            <param name="xPath">Element Path.</param>
            <returns><c>Returns</c> the first Web element by the XPath.</returns>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if an invalid operation executes.</exception>
            <remarks>Call <c>Dispose()</c> on the returned IWebElement when it is no longer needed.
            <para>XPath: HTML/BODY/TABLE/TBODY/TR[1]/TD[1], where element index starts from 0.</para>
            </remarks>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebElement WElement;
            
            public Attachmate.Reflection.Web.Msie.IWebElement GetElement()
            {
               return WElement.GetElement(HTML/BODY/TABLE/TBODY/TR[1]/TD[1]);
            }
            </code>
            </example>
        </member>
        <member name="M:Attachmate.Reflection.Web.Msie.WebElement.Extract(System.String,System.String,System.Boolean)">
            <summary>
            Extracts text delimited by pretext and posttext from an HTML text source.
            </summary>
            <param name="pretext"></param>
            <param name="posttext"></param>
            <param name="singleLine"></param>
            <returns></returns>
            <exception cref="M:Attachmate.Reflection.Web.Msie.WebElement.NewInvalidWebElementOperationException">This exception is thrown when an invalid operation executes. </exception>
            <example>
            <code>
            private Attachmate.Reflection.Web.Msie.WebDocument WDocument;
            public string[] ExtractText()
            {
              return WDocument.Extract("Pretext","Posttext",true);
            } 
            </code>
            </example>
        </member>
    </members>
</doc>
